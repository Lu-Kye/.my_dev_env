{
	"folder_history":
	[
		"/D/lujian/Documents/java-workspace/gs-gradle/complete",
		"/E/SDMOBARefactor/Assets",
		"/E/SDMOBARefactor/ClientSolution",
		"/E/SDMOBARefactor",
		"/D/lujian/Documents/java-workspace",
		"/D/lujian/Documents/php-workspace",
		"/D/lujian/Documents/java-workspace/gs-serving-web-content",
		"/D/lujian/Documents/java-workspace/thirdparties/spring4-mvc-gradle-xml-hello-world",
		"/D/lujian/Documents/java-workspace/sql-lab",
		"/D/lujian/Applications/Tomcat/webapps/examples",
		"/D/lujian/Documents/java-workspace/thirdparties",
		"/D/lujian/Documents/environments-setup",
		"/E/SDMOBA/Assets",
		"/D/lujian/Applications/Unity/Editor/Data/CGIncludes",
		"/E/SDMOBARefactor/Assets/Shaders",
		"/D/lujian/Documents/Lu-Kye.github.io/blogs",
		"/D/lujian/Documents/cpp-workspace",
		"/D/lujian/Documents/php-workspace/thirdparty/swift-algorithm-club",
		"/D/lujian/Documents/cpp-workspace/docgen",
		"/C/Users/lujian"
	],
	"last_version": 3114,
	"last_window_id": 47,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 480.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"Compa",
						"CompareType"
					],
					[
						"c",
						"compareType"
					],
					[
						"Com",
						"CompareType"
					],
					[
						"Black",
						"BlackboardType"
					],
					[
						"Dr",
						"DrawDictionary"
					],
					[
						"Draw",
						"DrawDictionaryElement"
					],
					[
						"ta",
						"targetCamera"
					],
					[
						"targ",
						"targetTexture"
					],
					[
						"tar",
						"targetTexture"
					]
				]
			},
			"build_system_choices":
			[
				[
					[
						[
							"Packages/C++/C++ Single File.sublime-build",
							""
						],
						[
							"Packages/C++/C++ Single File.sublime-build",
							"Run"
						]
					],
					[
						"Packages/C++/C++ Single File.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/C++/C++ Single File.sublime-build",
							""
						],
						[
							"Packages/C++/C++ Single File.sublime-build",
							"Run"
						],
						[
							"Packages/Makefile/Make.sublime-build",
							""
						],
						[
							"Packages/Makefile/Make.sublime-build",
							"Clean"
						]
					],
					[
						"Packages/C++/C++ Single File.sublime-build",
						"Run"
					]
				],
				[
					[
						[
							"Packages/Makefile/Make.sublime-build",
							""
						],
						[
							"Packages/Makefile/Make.sublime-build",
							"Clean"
						]
					],
					[
						"Packages/Makefile/Make.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/User/CPP.sublime-build",
							""
						],
						[
							"Packages/User/CPP.sublime-build",
							"Run"
						]
					],
					[
						"Packages/User/CPP.sublime-build",
						""
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 392.0,
				"last_filter": ":w",
				"selected_items":
				[
					[
						":w",
						":w - Save"
					],
					[
						":e",
						":e - Revert"
					],
					[
						"mark",
						"Markdown Preview: Export HTML in Sublime Text"
					],
					[
						"Package Control: ",
						"Package Control: Install Package"
					],
					[
						"Package Control: ins",
						"Package Control: Install Package"
					],
					[
						"Package Control: Ins",
						"Package Control: Install Package"
					]
				],
				"width": 416.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Node.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/SetUIntValue.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/BlackboardAction.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/BehaviorTree.cs",
				"/E/SDMOBARefactor/ClientSolution/LitJson/LitJson/JsonMapper.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/CompareUIntValue.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/CompareValue.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/Entity/Role.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/Entity/Entity.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Decorator/ChildAgent.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/StateMachine/State/BehaviorTreeState.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/StateMachine/AIStateMachine.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Decorator/Repeater.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/SetValue.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Composite/Sequence.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Decorator/RepeatAgent.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Composite/Selector.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Blackboard.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Decorator/Entry.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Skill/FrameAction/SummonFrames.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Skill/FrameAction/FramesAction.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Skill/FrameAction/FrameAction.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Skill/FrameAction/CatchFrame.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Skill/FrameAction/CameraShakeFrames.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Skill/FrameAction/AttackFrames.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/SetIntValue.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/CompareIntValue.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/EqualBoolValue.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/SetBoolValue.cs",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditorFieldArea.cs",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditorDictFieldArea.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action.cs",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditorBlackboardArea.cs",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditor.cs",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditorCommandManager.cs",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditorTreeViewTopbar.cs",
				"/E/SDMOBARefactor/Assets/Editor/BoundsFieldDrawer.cs",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditorTreeView.cs",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditorMenu.cs",
				"/E/behaviac/example/spaceship/data/bt/behaviors/ships/3_basic_move.xml",
				"/D/lujian/Documents/java-workspace/thirdparties/LeyeOA/WebContent/WEB-INF/web.xml",
				"/D/lujian/Documents/java-workspace/sql-lab/src/src/main/resources/application.properties",
				"/D/lujian/Documents/java-workspace/gs-gradle/initial/build.gradle",
				"/D/lujian/Documents/java-workspace/thirdparties/gradle/build.gradle",
				"/D/lujian/Documents/java-workspace/thirdparties/gradle/subprojects/ide/src/main/groovy/org/gradle/plugins/ide/idea/model/ModuleLibrary.java",
				"/D/lujian/Documents/java-workspace/thirdparties/gradle/README.md",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Installed Packages/Markdown Preview.sublime-package",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/Markdown Preview/MarkdownPreview.sublime-settings",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/User/MarkdownPreview.sublime-settings",
				"/D/lujian/Documents/java-workspace/thirdparties/gradle/buildSrc/src/main/groovy/org/gradle/build/docs/dsl/docbook/ClassDocExtensionsBuilder.java",
				"/D/lujian/Documents/java-workspace/thirdparties/struts-examples/annotations/src/main/java/example/actions/HelloAction.java",
				"/D/lujian/Documents/java-workspace/thirdparties/spring-mvc-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkmobile/server/ThinkPHP/Library/Think/Model.class.php",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkmobile/server/ThinkPHP/Library/Think/Think.class.php",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkshop/Application/Common/Model/CommonModel.class.php",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkshop/ThinkPHP/Library/Think/Model.class.php",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkshop/Application/Admin/Controller/GoodsController.class.php",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkshop/Application/index.html",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkshop/Application/Admin/index.html",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkshop/Application/Admin/View/index.html",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkshop/Application/Admin/View/UserGroup/add_edit.html",
				"/D/lujian/Documents/php-workspace/sql-learning/vendor/autoload.php",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/vendor/composer/autoload_real.php",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/README.md",
				"/D/lujian/Documents/php-workspace/thirdparty/sqli-labs/sql-connections/db-creds.inc",
				"/D/lujian/Documents/php-workspace/sql-learning/composer.json",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/bootstrap/autoload.php",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/vendor/composer/autoload_psr4.php",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/vendor/composer/installed.json",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/vendor/composer/include_paths.php",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/vendor/composer/autoload_files.php",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/vendor/symfony/polyfill-mbstring/bootstrap.php",
				"/D/lujian/Applications/php-5.5.38-Win32-VC11-x86/php.ini-development",
				"/E/SDMOBARefactor/Assets/Shaders/xf_heat_distortion.shader",
				"/E/SDMOBARefactor/Assets/Shaders/Terrain3Layer.shader",
				"/E/SDMOBARefactor/Assets/Shaders/RimLight.shader",
				"/D/lujian/Documents/php-workspace/php-webim/README.md",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/MarkdownEditing/Bold and Italic Markers.tmPreferences",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/MarkdownEditing/Markdown.sublime-settings",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/Terminal/Terminal.sublime-settings",
				"/D/lujian/Documents/cpp-workspace/thirdparty/tfs/src/common/base_main.cpp",
				"/D/lujian/Documents/cpp-workspace/docgen/main.cpp",
				"/D/lujian/Documents/cpp-workspace/thirdparty/tfs/src/common/cdefine.h",
				"/D/lujian/Documents/cpp-workspace/test.lua",
				"/D/lujian/Documents/cpp-workspace/thirdparty/tfs/src/dataserver/bit_map.cpp",
				"/D/lujian/Documents/cpp-workspace/thirdparty/tfs/src/common/meta_server_define.cpp",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/CTags/Default.sublime-keymap",
				"/D/lujian/Documents/cpp-workspace/thirdparty/tfs/src/common/base_main.h",
				"/D/lujian/Documents/cpp-workspace/docgen/file_system/file.h",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/CTags/CTags.sublime-settings",
				"/D/lujian/Documents/Lu-Kye.github.io/blogs/windows/problems.md",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/User/CPP.sublime-build",
				"/D/lujian/Applications/php-5.6.25/INSTALL",
				"/D/lujian/Applications/php-5.6.25/README.md",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings"
			],
			"find":
			{
				"height": 34.0
			},
			"find_in_files":
			{
				"height": 93.0,
				"where_history":
				[
					"E:\\SDMOBARefactor\\ClientSolution\\Lockstep\\Code\\BehaviorTree",
					"E:\\SDMOBARefactor\\ClientSolution\\Lockstep\\Code",
					"E:\\SDMOBARefactor\\ClientSolution\\Lockstep",
					"E:\\SDMOBARefactor\\Assets\\Scripts",
					"E:\\SDMOBARefactor\\ClientSolution\\Lockstep\\Code\\Entity",
					"E:\\SDMOBARefactor\\Assets\\Editor\\BehaviorTreeEditor",
					"D:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-mvc-showcase",
					"D:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-mvc-showcase\\src",
					"D:\\lujian\\Documents\\java-workspace\\thirdparties\\tomcat\\java\\org\\apache\\tomcat",
					"D:\\lujian\\Documents\\java-workspace\\thirdparties\\tomcat\\java\\org\\apache",
					"D:\\lujian\\Documents\\java-workspace\\thirdparties\\gradle\\buildSrc\\src\\main",
					"D:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-mvc-showcase",
					"D:\\lujian\\Documents\\php-workspace\\thirdparty\\Fixhub\\resources",
					"D:\\lujian\\Documents\\php-workspace\\thirdparty\\Fixhub\\resources\\assets\\sass\\components",
					"D:\\lujian\\Documents\\cpp-workspace\\thirdparty\\tfs"
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"AddDictionaryDefaultElement",
					"Blackboard",
					"revaluate",
					"Target",
					"_target",
					"onTakeDamage",
					"WriteValue",
					"commandManager",
					"TreeViewCommandManager",
					"tab",
					"Save",
					"install",
					"JSP-Serv",
					"log",
					"log4j",
					"main(",
					"main",
					"APP_HOME",
					"idea",
					"markdown",
					"apply plugin",
					"plugin",
					"samples",
					"hideMode",
					"loadClass",
					"includeFile",
					"include",
					"require",
					"col-md-8",
					"EXIT_SUCCESS",
					"UNAME_S"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 26.0
			},
			"input":
			{
				"height": 35.0
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 124.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "Packages/User/CPP.sublime-build",
			"replace":
			{
				"height": 48.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"aistate",
						"ClientSolution\\Lockstep\\Code\\StateMachine\\AIStateMachine.cs"
					],
					[
						"entry",
						"ClientSolution\\Lockstep\\Code\\BehaviorTree\\Decorator\\Entry.cs"
					],
					[
						"behaviortree",
						"ClientSolution\\Lockstep\\Code\\BehaviorTree\\BehaviorTree.cs"
					],
					[
						"betree",
						"ClientSolution\\Lockstep\\Code\\BehaviorTree\\BehaviorTree.cs"
					],
					[
						"blackbo",
						"ClientSolution\\Lockstep\\Code\\BehaviorTree\\Blackboard.cs"
					],
					[
						"beblack",
						"Assets\\Editor\\BehaviorTreeEditor\\BehaviorTreeEditorBlackboardArea.cs"
					],
					[
						"",
						"Assets\\Editor\\BehaviorTreeEditor\\BehaviorTreeEditorFieldArea.cs"
					],
					[
						"blackboard",
						"Assets\\Editor\\BehaviorTreeEditor\\BehaviorTreeEditorBlackboardArea.cs"
					],
					[
						"numguess",
						"tomcat\\webapps\\examples\\jsp\\num\\numguess.jsp"
					],
					[
						"modulelibrary",
						"gradle\\subprojects\\ide\\src\\main\\groovy\\org\\gradle\\plugins\\ide\\idea\\model\\ModuleLibrary.java"
					],
					[
						"colli",
						"Scripts\\XPhysics\\BoundsCollider.cs"
					],
					[
						"grayscalee",
						"ThirdParts\\Standard Assets\\Effects\\ImageEffects\\Shaders\\GrayscaleEffect.shader"
					],
					[
						"gray",
						"ThirdParts\\Standard Assets\\Effects\\ImageEffects\\Scripts\\Grayscale.cs"
					],
					[
						"greyscale",
						"ThirdParts\\Standard Assets\\Effects\\ImageEffects\\Scripts\\Grayscale.cs"
					],
					[
						"imageeffectbase",
						"ThirdParts\\Standard Assets\\Effects\\ImageEffects\\Scripts\\ImageEffectBase.cs"
					],
					[
						"graysc",
						"ThirdParts\\Standard Assets\\Effects\\ImageEffects\\Scripts\\Grayscale.cs"
					],
					[
						"runesp",
						"Scripts\\Lockstep\\RuneSpawner.cs"
					],
					[
						"runecon",
						"Scripts\\Controller\\RuneController.cs"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"show_minimap": true,
			"show_open_files": true,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 459.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 640.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
					[
						"Compa",
						"CompareType"
					],
					[
						"c",
						"compareType"
					],
					[
						"Com",
						"CompareType"
					],
					[
						"Black",
						"BlackboardType"
					],
					[
						"Dr",
						"DrawDictionary"
					],
					[
						"Draw",
						"DrawDictionaryElement"
					],
					[
						"ta",
						"targetCamera"
					],
					[
						"targ",
						"targetTexture"
					],
					[
						"tar",
						"targetTexture"
					]
				]
			},
			"buffers":
			[
				{
					"contents": "Searching 7551 files for \"Component\"\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\build.gradle:\n  240  		\"http://fasterxml.github.io/jackson-databind/javadoc/2.8/\",\n  241  		\"http://fasterxml.github.io/jackson-dataformat-xml/javadoc/2.8/\",\n  242: 		\"http://hc.apache.org/httpcomponents-client-ga/httpclient/apidocs/\"\n  243  	] as String[]\n  244  }\n  ...\n  743  		}\n  744  		optional(\"com.fasterxml:aalto-xml:1.0.0\")\n  745: 		optional(\"org.apache.httpcomponents:httpclient:${httpclientVersion}\")\n  746: 		optional(\"org.apache.httpcomponents:httpasyncclient:${httpasyncVersion}\")\n  747  		optional(\"io.netty:netty-all:${nettyVersion}\")\n  748  		optional(\"com.squareup.okhttp:okhttp:${okhttpVersion}\")\n  ...\n  801  		optional(\"com.fasterxml.jackson.core:jackson-databind:${jackson2Version}\")\n  802  		optional(\"org.freemarker:freemarker:${freemarkerVersion}\")\n  803: 		optional \"org.apache.httpcomponents:httpclient:${httpclientVersion}\"\n  804  		optional('org.webjars:webjars-locator:0.32')\n  805  		testCompile(\"javax.validation:validation-api:${beanvalVersion}\")\n  ...\n  916  		testCompile(\"javax.validation:validation-api:${beanvalVersion}\")\n  917  		testCompile(\"org.hibernate:hibernate-validator:${hibval5Version}\")\n  918: 		testCompile(\"org.apache.httpcomponents:httpclient:${httpclientVersion}\")\n  919  		testCompile(\"commons-fileupload:commons-fileupload:${fileuploadVersion}\")\n  920  		testCompile(\"commons-io:commons-io:1.3\")\n  ...\n 1042  		testCompile(\"org.hsqldb:hsqldb:${hsqldbVersion}\")\n 1043  		testCompile(\"org.slf4j:slf4j-jcl:${slf4jVersion}\")\n 1044: 		testCompile(\"org.apache.httpcomponents:httpclient:${httpclientVersion}\")\n 1045  		testCompile(\"javax.cache:cache-api:1.0.0\")\n 1046  		testCompile('de.bechte.junit:junit-hierarchicalcontextrunner:4.12.1')\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\gradle\\ide.gradle:\n   71  }\n   72  \n   73: task eclipseWstComponent(type: Copy) {\n   74  	from rootProject.files(\n   75: 		\"src/eclipse/org.eclipse.wst.common.component\")\n   76  	into project.file('.settings/')\n   77  	expand(deployname: project.name)\n   ..\n   88  	delete project.file(\".settings/org.eclipse.jdt.core.prefs\")\n   89  	delete project.file(\".settings/org.eclipse.jdt.ui.prefs\")\n   90: 	delete project.file(\".settings/org.eclipse.wst.common.component\")\n   91  	delete project.file(\".settings/org.eclipse.wst.common.project.facet.core.xml\")\n   92  }\n   ..\n   94  tasks[\"eclipseJdt\"].dependsOn(eclipseJdtPrepare)\n   95  tasks[\"cleanEclipse\"].dependsOn(cleanEclipseJdtUi)\n   96: tasks[\"eclipse\"].dependsOn(eclipseSettings, eclipseWstComponent)\n   97  \n   98  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\gradle\\jdiff\\LICENSE.txt:\n  321  the materials to be distributed need not include anything that is\n  322  normally distributed (in either source or binary form) with the major\n  323: components (compiler, kernel, and so on) of the operating system on\n  324: which the executable runs, unless that component itself accompanies\n  325  the executable.\n  326  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\gradle\\jdiff\\xerces.jar:\n    <binary>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-aop\\src\\main\\java\\org\\springframework\\aop\\aspectj\\MethodInvocationProceedingJoinPoint.java:\n  284  		private void appendType(StringBuilder sb, Class<?> type, boolean useLongTypeName) {\n  285  			if (type.isArray()) {\n  286: 				appendType(sb, type.getComponentType(), useLongTypeName);\n  287  				sb.append(\"[]\");\n  288  			}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-aop\\src\\main\\java\\org\\springframework\\aop\\config\\AdvisorComponentDefinition.java:\n   20  import org.springframework.beans.factory.config.BeanDefinition;\n   21  import org.springframework.beans.factory.config.BeanReference;\n   22: import org.springframework.beans.factory.parsing.AbstractComponentDefinition;\n   23  import org.springframework.util.Assert;\n   24  \n   25  /**\n   26:  * {@link org.springframework.beans.factory.parsing.ComponentDefinition}\n   27   * that bridges the gap between the advisor bean definition configured\n   28:  * by the {@code <aop:advisor>} tag and the component definition\n   29   * infrastructure.\n   30   *\n   ..\n   33   * @since 2.0\n   34   */\n   35: public class AdvisorComponentDefinition extends AbstractComponentDefinition {\n   36  \n   37  	private final String advisorBeanName;\n   ..\n   46  \n   47  \n   48: 	public AdvisorComponentDefinition(String advisorBeanName, BeanDefinition advisorDefinition) {\n   49  		 this(advisorBeanName, advisorDefinition, null);\n   50  	}\n   51  \n   52: 	public AdvisorComponentDefinition(\n   53  			String advisorBeanName, BeanDefinition advisorDefinition, BeanDefinition pointcutDefinition) {\n   54  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-aop\\src\\main\\java\\org\\springframework\\aop\\config\\AopNamespaceUtils.java:\n   20  \n   21  import org.springframework.beans.factory.config.BeanDefinition;\n   22: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   23  import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n   24  import org.springframework.beans.factory.xml.ParserContext;\n   ..\n   59  				parserContext.getRegistry(), parserContext.extractSource(sourceElement));\n   60  		useClassProxyingIfNecessary(parserContext.getRegistry(), sourceElement);\n   61: 		registerComponentIfNecessary(beanDefinition, parserContext);\n   62  	}\n   63  \n   ..\n   68  				parserContext.getRegistry(), parserContext.extractSource(sourceElement));\n   69  		useClassProxyingIfNecessary(parserContext.getRegistry(), sourceElement);\n   70: 		registerComponentIfNecessary(beanDefinition, parserContext);\n   71  	}\n   72  \n   ..\n   77  				parserContext.getRegistry(), parserContext.extractSource(sourceElement));\n   78  		useClassProxyingIfNecessary(parserContext.getRegistry(), sourceElement);\n   79: 		registerComponentIfNecessary(beanDefinition, parserContext);\n   80  	}\n   81  \n   ..\n   93  	}\n   94  \n   95: 	private static void registerComponentIfNecessary(BeanDefinition beanDefinition, ParserContext parserContext) {\n   96  		if (beanDefinition != null) {\n   97: 			BeanComponentDefinition componentDefinition =\n   98: 					new BeanComponentDefinition(beanDefinition, AopConfigUtils.AUTO_PROXY_CREATOR_BEAN_NAME);\n   99: 			parserContext.registerComponent(componentDefinition);\n  100  		}\n  101  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-aop\\src\\main\\java\\org\\springframework\\aop\\config\\AspectComponentDefinition.java:\n   19  import org.springframework.beans.factory.config.BeanDefinition;\n   20  import org.springframework.beans.factory.config.BeanReference;\n   21: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   22  \n   23  /**\n   24:  * {@link org.springframework.beans.factory.parsing.ComponentDefinition}\n   25   * that holds an aspect definition, including its nested pointcuts.\n   26   *\n   ..\n   28   * @author Juergen Hoeller\n   29   * @since 2.0\n   30:  * @see #getNestedComponents()\n   31:  * @see PointcutComponentDefinition\n   32   */\n   33: public class AspectComponentDefinition extends CompositeComponentDefinition {\n   34  \n   35  	private final BeanDefinition[] beanDefinitions;\n   ..\n   38  \n   39  \n   40: 	public AspectComponentDefinition(\n   41  			String aspectName, BeanDefinition[] beanDefinitions, BeanReference[] beanReferences, Object source) {\n   42  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-aop\\src\\main\\java\\org\\springframework\\aop\\config\\ConfigBeanDefinitionParser.java:\n   38  import org.springframework.beans.factory.config.RuntimeBeanNameReference;\n   39  import org.springframework.beans.factory.config.RuntimeBeanReference;\n   40: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   41  import org.springframework.beans.factory.parsing.ParseState;\n   42  import org.springframework.beans.factory.support.AbstractBeanDefinition;\n   ..\n   98  	@Override\n   99  	public BeanDefinition parse(Element element, ParserContext parserContext) {\n  100: 		CompositeComponentDefinition compositeDef =\n  101: 				new CompositeComponentDefinition(element.getTagName(), parserContext.extractSource(element));\n  102: 		parserContext.pushContainingComponent(compositeDef);\n  103  \n  104  		configureAutoProxyCreator(parserContext, element);\n  ...\n  118  		}\n  119  \n  120: 		parserContext.popAndRegisterContainingComponent();\n  121  		return null;\n  122  	}\n  ...\n  154  			if (pointcut instanceof BeanDefinition) {\n  155  				advisorDef.getPropertyValues().add(POINTCUT, pointcut);\n  156: 				parserContext.registerComponent(\n  157: 						new AdvisorComponentDefinition(advisorBeanName, advisorDef, (BeanDefinition) pointcut));\n  158  			}\n  159  			else if (pointcut instanceof String) {\n  160  				advisorDef.getPropertyValues().add(POINTCUT, new RuntimeBeanReference((String) pointcut));\n  161: 				parserContext.registerComponent(\n  162: 						new AdvisorComponentDefinition(advisorBeanName, advisorDef));\n  163  			}\n  164  		}\n  ...\n  232  			}\n  233  \n  234: 			AspectComponentDefinition aspectComponentDefinition = createAspectComponentDefinition(\n  235  					aspectElement, aspectId, beanDefinitions, beanReferences, parserContext);\n  236: 			parserContext.pushContainingComponent(aspectComponentDefinition);\n  237  \n  238  			List<Element> pointcuts = DomUtils.getChildElementsByTagName(aspectElement, POINTCUT);\n  ...\n  241  			}\n  242  \n  243: 			parserContext.popAndRegisterContainingComponent();\n  244  		}\n  245  		finally {\n  ...\n  248  	}\n  249  \n  250: 	private AspectComponentDefinition createAspectComponentDefinition(\n  251  			Element aspectElement, String aspectId, List<BeanDefinition> beanDefs,\n  252  			List<BeanReference> beanRefs, ParserContext parserContext) {\n  ...\n  255  		BeanReference[] beanRefArray = beanRefs.toArray(new BeanReference[beanRefs.size()]);\n  256  		Object source = parserContext.extractSource(aspectElement);\n  257: 		return new AspectComponentDefinition(aspectId, beanDefArray, beanRefArray, source);\n  258  	}\n  259  \n  ...\n  451  			}\n  452  \n  453: 			parserContext.registerComponent(\n  454: 					new PointcutComponentDefinition(pointcutBeanName, pointcutDefinition, expression));\n  455  		}\n  456  		finally {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-aop\\src\\main\\java\\org\\springframework\\aop\\config\\PointcutComponentDefinition.java:\n   18  \n   19  import org.springframework.beans.factory.config.BeanDefinition;\n   20: import org.springframework.beans.factory.parsing.AbstractComponentDefinition;\n   21  import org.springframework.util.Assert;\n   22  \n   23  /**\n   24:  * {@link org.springframework.beans.factory.parsing.ComponentDefinition}\n   25   * implementation that holds a pointcut definition.\n   26   *\n   ..\n   28   * @since 2.0\n   29   */\n   30: public class PointcutComponentDefinition extends AbstractComponentDefinition {\n   31  \n   32  	private final String pointcutBeanName;\n   ..\n   37  \n   38  \n   39: 	public PointcutComponentDefinition(String pointcutBeanName, BeanDefinition pointcutDefinition, String expression) {\n   40  		Assert.notNull(pointcutBeanName, \"Bean name must not be null\");\n   41  		Assert.notNull(pointcutDefinition, \"Pointcut definition must not be null\");\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-aop\\src\\main\\java\\org\\springframework\\aop\\config\\ScopedProxyBeanDefinitionDecorator.java:\n   22  import org.springframework.aop.scope.ScopedProxyUtils;\n   23  import org.springframework.beans.factory.config.BeanDefinitionHolder;\n   24: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   25  import org.springframework.beans.factory.xml.BeanDefinitionDecorator;\n   26  import org.springframework.beans.factory.xml.ParserContext;\n   ..\n   55  				ScopedProxyUtils.createScopedProxy(definition, parserContext.getRegistry(), proxyTargetClass);\n   56  		String targetBeanName = ScopedProxyUtils.getTargetBeanName(definition.getBeanName());\n   57: 		parserContext.getReaderContext().fireComponentRegistered(\n   58: 				new BeanComponentDefinition(definition.getBeanDefinition(), targetBeanName));\n   59  		return holder;\n   60  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-aop\\src\\main\\java\\org\\springframework\\aop\\config\\SpringConfiguredBeanDefinitionParser.java:\n   20  \n   21  import org.springframework.beans.factory.config.BeanDefinition;\n   22: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   23  import org.springframework.beans.factory.support.RootBeanDefinition;\n   24  import org.springframework.beans.factory.xml.BeanDefinitionParser;\n   ..\n   59  			def.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n   60  			def.setSource(parserContext.extractSource(element));\n   61: 			parserContext.registerBeanComponent(new BeanComponentDefinition(def, BEAN_CONFIGURER_ASPECT_BEAN_NAME));\n   62  		}\n   63  		return null;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-aop\\src\\main\\java\\org\\springframework\\aop\\framework\\AopProxyUtils.java:\n  218  						Object[] newArguments = new Object[arguments.length];\n  219  						System.arraycopy(arguments, 0, newArguments, 0, varargIndex);\n  220: 						Class<?> targetElementType = varargType.getComponentType();\n  221  						int varargLength = Array.getLength(varargArray);\n  222  						Object newVarargArray = Array.newInstance(targetElementType, varargLength);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-aop\\src\\main\\java\\org\\springframework\\aop\\framework\\autoproxy\\AutoProxyUtils.java:\n   22  \n   23  /**\n   24:  * Utilities for auto-proxy aware components.\n   25   * Mainly for internal use within the framework.\n   26   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-aop\\src\\test\\java\\org\\springframework\\aop\\config\\AopNamespaceHandlerEventTests.java:\n   25  import org.springframework.beans.factory.config.BeanDefinition;\n   26  import org.springframework.beans.factory.config.BeanReference;\n   27: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   28: import org.springframework.beans.factory.parsing.ComponentDefinition;\n   29: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   30  import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n   31  import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;\n   ..\n   67  	public void testPointcutEvents() throws Exception {\n   68  		this.reader.loadBeanDefinitions(POINTCUT_EVENTS_CONTEXT);\n   69: 		ComponentDefinition[] componentDefinitions = this.eventListener.getComponentDefinitions();\n   70: 		assertEquals(\"Incorrect number of events fired\", 1, componentDefinitions.length);\n   71: 		assertTrue(\"No holder with nested components\", componentDefinitions[0] instanceof CompositeComponentDefinition);\n   72  \n   73: 		CompositeComponentDefinition compositeDef = (CompositeComponentDefinition) componentDefinitions[0];\n   74  		assertEquals(\"aop:config\", compositeDef.getName());\n   75  \n   76: 		ComponentDefinition[] nestedComponentDefs = compositeDef.getNestedComponents();\n   77: 		assertEquals(\"Incorrect number of inner components\", 2, nestedComponentDefs.length);\n   78: 		PointcutComponentDefinition pcd = null;\n   79: 		for (int i = 0; i < nestedComponentDefs.length; i++) {\n   80: 			ComponentDefinition componentDefinition = nestedComponentDefs[i];\n   81: 			if (componentDefinition instanceof PointcutComponentDefinition) {\n   82: 				pcd = (PointcutComponentDefinition) componentDefinition;\n   83  				break;\n   84  			}\n   85  		}\n   86: 		assertNotNull(\"PointcutComponentDefinition not found\", pcd);\n   87  		assertEquals(\"Incorrect number of BeanDefinitions\", 1, pcd.getBeanDefinitions().length);\n   88  	}\n   ..\n   91  	public void testAdvisorEventsWithPointcutRef() throws Exception {\n   92  		this.reader.loadBeanDefinitions(POINTCUT_REF_CONTEXT);\n   93: 		ComponentDefinition[] componentDefinitions = this.eventListener.getComponentDefinitions();\n   94: 		assertEquals(\"Incorrect number of events fired\", 2, componentDefinitions.length);\n   95  \n   96: 		assertTrue(\"No holder with nested components\", componentDefinitions[0] instanceof CompositeComponentDefinition);\n   97: 		CompositeComponentDefinition compositeDef = (CompositeComponentDefinition) componentDefinitions[0];\n   98  		assertEquals(\"aop:config\", compositeDef.getName());\n   99  \n  100: 		ComponentDefinition[] nestedComponentDefs = compositeDef.getNestedComponents();\n  101: 		assertEquals(\"Incorrect number of inner components\", 3, nestedComponentDefs.length);\n  102: 		AdvisorComponentDefinition acd = null;\n  103: 		for (int i = 0; i < nestedComponentDefs.length; i++) {\n  104: 			ComponentDefinition componentDefinition = nestedComponentDefs[i];\n  105: 			if (componentDefinition instanceof AdvisorComponentDefinition) {\n  106: 				acd = (AdvisorComponentDefinition) componentDefinition;\n  107  				break;\n  108  			}\n  109  		}\n  110: 		assertNotNull(\"AdvisorComponentDefinition not found\", acd);\n  111  		assertEquals(1, acd.getBeanDefinitions().length);\n  112  		assertEquals(2, acd.getBeanReferences().length);\n  113  \n  114: 		assertTrue(\"No advice bean found\", componentDefinitions[1] instanceof BeanComponentDefinition);\n  115: 		BeanComponentDefinition adviceDef = (BeanComponentDefinition) componentDefinitions[1];\n  116  		assertEquals(\"countingAdvice\", adviceDef.getBeanName());\n  117  	}\n  ...\n  120  	public void testAdvisorEventsWithDirectPointcut() throws Exception {\n  121  		this.reader.loadBeanDefinitions(DIRECT_POINTCUT_EVENTS_CONTEXT);\n  122: 		ComponentDefinition[] componentDefinitions = this.eventListener.getComponentDefinitions();\n  123: 		assertEquals(\"Incorrect number of events fired\", 2, componentDefinitions.length);\n  124  \n  125: 		assertTrue(\"No holder with nested components\", componentDefinitions[0] instanceof CompositeComponentDefinition);\n  126: 		CompositeComponentDefinition compositeDef = (CompositeComponentDefinition) componentDefinitions[0];\n  127  		assertEquals(\"aop:config\", compositeDef.getName());\n  128  \n  129: 		ComponentDefinition[] nestedComponentDefs = compositeDef.getNestedComponents();\n  130: 		assertEquals(\"Incorrect number of inner components\", 2, nestedComponentDefs.length);\n  131: 		AdvisorComponentDefinition acd = null;\n  132: 		for (int i = 0; i < nestedComponentDefs.length; i++) {\n  133: 			ComponentDefinition componentDefinition = nestedComponentDefs[i];\n  134: 			if (componentDefinition instanceof AdvisorComponentDefinition) {\n  135: 				acd = (AdvisorComponentDefinition) componentDefinition;\n  136  				break;\n  137  			}\n  138  		}\n  139: 		assertNotNull(\"AdvisorComponentDefinition not found\", acd);\n  140  		assertEquals(2, acd.getBeanDefinitions().length);\n  141  		assertEquals(1, acd.getBeanReferences().length);\n  142  \n  143: 		assertTrue(\"No advice bean found\", componentDefinitions[1] instanceof BeanComponentDefinition);\n  144: 		BeanComponentDefinition adviceDef = (BeanComponentDefinition) componentDefinitions[1];\n  145  		assertEquals(\"countingAdvice\", adviceDef.getBeanName());\n  146  	}\n  ...\n  149  	public void testAspectEvent() throws Exception {\n  150  		this.reader.loadBeanDefinitions(CONTEXT);\n  151: 		ComponentDefinition[] componentDefinitions = this.eventListener.getComponentDefinitions();\n  152: 		assertEquals(\"Incorrect number of events fired\", 5, componentDefinitions.length);\n  153  \n  154: 		assertTrue(\"No holder with nested components\", componentDefinitions[0] instanceof CompositeComponentDefinition);\n  155: 		CompositeComponentDefinition compositeDef = (CompositeComponentDefinition) componentDefinitions[0];\n  156  		assertEquals(\"aop:config\", compositeDef.getName());\n  157  \n  158: 		ComponentDefinition[] nestedComponentDefs = compositeDef.getNestedComponents();\n  159: 		assertEquals(\"Incorrect number of inner components\", 2, nestedComponentDefs.length);\n  160: 		AspectComponentDefinition acd = null;\n  161: 		for (int i = 0; i < nestedComponentDefs.length; i++) {\n  162: 			ComponentDefinition componentDefinition = nestedComponentDefs[i];\n  163: 			if (componentDefinition instanceof AspectComponentDefinition) {\n  164: 				acd = (AspectComponentDefinition) componentDefinition;\n  165  				break;\n  166  			}\n  167  		}\n  168  \n  169: 		assertNotNull(\"AspectComponentDefinition not found\", acd);\n  170  		BeanDefinition[] beanDefinitions = acd.getBeanDefinitions();\n  171  		assertEquals(5, beanDefinitions.length);\n  ...\n  182  		assertEquals(\"Incorrect references found\", 0, expectedReferences.size());\n  183  \n  184: 		for (int i = 1; i < componentDefinitions.length; i++) {\n  185: 			assertTrue(componentDefinitions[i] instanceof BeanComponentDefinition);\n  186  		}\n  187  \n  188: 		ComponentDefinition[] nestedComponentDefs2 = acd.getNestedComponents();\n  189: 		assertEquals(\"Inner PointcutComponentDefinition not found\", 1, nestedComponentDefs2.length);\n  190: 		assertTrue(nestedComponentDefs2[0] instanceof PointcutComponentDefinition);\n  191: 		PointcutComponentDefinition pcd = (PointcutComponentDefinition) nestedComponentDefs2[0];\n  192  		assertEquals(\"Incorrect number of BeanDefinitions\", 1, pcd.getBeanDefinitions().length);\n  193  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\AbstractNestablePropertyAccessor.java:\n  306  			if (propValue.getClass().isArray()) {\n  307  				PropertyHandler ph = getLocalPropertyHandler(actualName);\n  308: 				Class<?> requiredType = propValue.getClass().getComponentType();\n  309  				int arrayIndex = Integer.parseInt(key);\n  310  				Object oldValue = null;\n  ...\n  317  					int length = Array.getLength(propValue);\n  318  					if (arrayIndex >= length && arrayIndex < this.autoGrowCollectionLimit) {\n  319: 						Class<?> componentType = propValue.getClass().getComponentType();\n  320: 						Object newArray = Array.newInstance(componentType, arrayIndex + 1);\n  321  						System.arraycopy(propValue, 0, newArray, 0, length);\n  322  						setPropertyValue(actualName, newArray);\n  ...\n  737  		int length = Array.getLength(array);\n  738  		if (index >= length && index < this.autoGrowCollectionLimit) {\n  739: 			Class<?> componentType = array.getClass().getComponentType();\n  740: 			Object newArray = Array.newInstance(componentType, index + 1);\n  741  			System.arraycopy(array, 0, newArray, 0, length);\n  742  			for (int i = length; i < Array.getLength(newArray); i++) {\n  743: 				Array.set(newArray, i, newValue(componentType, null, name));\n  744  			}\n  745  			setPropertyValue(name, newArray);\n  ...\n  769  \n  770  	/**\n  771: 	 * Get the last component of the path. Also works if not nested.\n  772  	 * @param pa property accessor to work on\n  773  	 * @param nestedPath property path we know is nested\n  774: 	 * @return last component of the path (the property on the target bean)\n  775  	 */\n  776  	protected String getFinalPath(AbstractNestablePropertyAccessor pa, String nestedPath) {\n  ...\n  873  		try {\n  874  			if (type.isArray()) {\n  875: 				Class<?> componentType = type.getComponentType();\n  876  				// TODO - only handles 2-dimensional arrays\n  877: 				if (componentType.isArray()) {\n  878: 					Object array = Array.newInstance(componentType, 1);\n  879: 					Array.set(array, 0, Array.newInstance(componentType.getComponentType(), 0));\n  880  					return array;\n  881  				}\n  882  				else {\n  883: 					return Array.newInstance(componentType, 0);\n  884  				}\n  885  			}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\BeanUtils.java:\n  505  	public static boolean isSimpleProperty(Class<?> clazz) {\n  506  		Assert.notNull(clazz, \"Class must not be null\");\n  507: 		return isSimpleValueType(clazz) || (clazz.isArray() && isSimpleValueType(clazz.getComponentType()));\n  508  	}\n  509  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\ExtendedBeanInfo.java:\n  197  				candidateType = ipd.getIndexedPropertyType();\n  198  				if (candidateName.equals(propertyName) &&\n  199: 						(candidateType.equals(propertyType) || candidateType.equals(propertyType.getComponentType()))) {\n  200  					return pd;\n  201  				}\n  ...\n  204  				candidateType = pd.getPropertyType();\n  205  				if (candidateName.equals(propertyName) &&\n  206: 						(candidateType.equals(propertyType) || propertyType.equals(candidateType.getComponentType()))) {\n  207  					return pd;\n  208  				}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\access\\SingletonBeanFactoryLocator.java:\n   51   * searched for is 'classpath*:beanRefFactory.xml', with the Spring-standard\n   52   * 'classpath*:' prefix ensuring that if the classpath contains multiple copies\n   53:  * of this file (perhaps one in each component jar) they will be combined. To\n   54   * override the default resource name, instead of using the no-arg\n   55   * {@link #getInstance()} method, use the {@link #getInstance(String selector)}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\annotation\\AnnotatedGenericBeanDefinition.java:\n   30   * <p>This GenericBeanDefinition variant is mainly useful for testing code that expects\n   31   * to operate on an AnnotatedBeanDefinition, for example strategy implementations\n   32:  * in Spring's component scanning support (where the default definition class is\n   33   * {@link org.springframework.context.annotation.ScannedGenericBeanDefinition},\n   34   * which also implements the AnnotatedBeanDefinition interface).\n   ..\n   63  	 * {@link org.springframework.context.annotation.ScannedGenericBeanDefinition\n   64  	 * ScannedGenericBeanDefinition}, however the semantics of the latter indicate that a\n   65: 	 * bean was discovered specifically via component-scanning as opposed to other means.\n   66  	 * @param metadata the annotation metadata for the bean class in question\n   67  	 * @since 3.1.1\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\annotation\\AutowiredAnnotationBeanPostProcessor.java:\n   94   *\n   95   * <p>Note: A default AutowiredAnnotationBeanPostProcessor will be registered\n   96:  * by the \"context:annotation-config\" and \"context:component-scan\" XML tags.\n   97   * Remove or turn off the default annotation configuration there if you intend\n   98   * to specify a custom AutowiredAnnotationBeanPostProcessor bean definition.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\annotation\\Lookup.java:\n   43   *\n   44   * <p><b>Concrete limitations in typical Spring configuration scenarios:</b>\n   45:  * When used with component scanning or any other mechanism that filters out abstract\n   46   * beans, provide stub implementations of your lookup methods to be able to declare\n   47   * them as concrete classes. And please remember that lookup methods won't work on\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\annotation\\RequiredAnnotationBeanPostProcessor.java:\n   63   *\n   64   * <p>Note: A default RequiredAnnotationBeanPostProcessor will be registered\n   65:  * by the \"context:annotation-config\" and \"context:component-scan\" XML tags.\n   66   * Remove or turn off the default annotation configuration there if you intend\n   67   * to specify a custom RequiredAnnotationBeanPostProcessor bean definition.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\BeanFactory.java:\n   38   *\n   39   * <p>The point of this approach is that the BeanFactory is a central registry\n   40:  * of application components, and centralizes configuration of application\n   41:  * components (no more do individual objects need to read properties files,\n   42   * for example). See chapters 4 and 11 of \"Expert One-on-One J2EE Design and\n   43   * Development\" for a discussion of the benefits of this approach.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\config\\BeanDefinition.java:\n   63  	 * Role hint indicating that a {@code BeanDefinition} is a supporting\n   64  	 * part of some larger configuration, typically an outer\n   65: 	 * {@link org.springframework.beans.factory.parsing.ComponentDefinition}.\n   66  	 * {@code SUPPORT} beans are considered important enough to be aware\n   67  	 * of when looking more closely at a particular\n   68: 	 * {@link org.springframework.beans.factory.parsing.ComponentDefinition},\n   69  	 * but not when looking at the overall configuration of an application.\n   70  	 */\n   ..\n   75  	 * entirely background role and has no relevance to the end-user. This hint is\n   76  	 * used when registering beans that are completely part of the internal workings\n   77: 	 * of a {@link org.springframework.beans.factory.parsing.ComponentDefinition}.\n   78  	 */\n   79  	int ROLE_INFRASTRUCTURE = 2;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\FactoryBean.java:\n   36   * example for the AOP {@link org.springframework.aop.framework.ProxyFactoryBean}\n   37   * or the {@link org.springframework.jndi.JndiObjectFactoryBean}.\n   38:  * It can be used for application components as well; however,\n   39   * this is not common outside of infrastructure code.\n   40   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\parsing\\AbstractComponentDefinition.java:\n   21  \n   22  /**\n   23:  * Base implementation of {@link ComponentDefinition} that provides a basic implementation of\n   24   * {@link #getDescription} which delegates to {@link #getName}. Also provides a base implementation\n   25   * of {@link #toString} which delegates to {@link #getDescription} in keeping with the recommended\n   ..\n   31   * @since 2.0\n   32   */\n   33: public abstract class AbstractComponentDefinition implements ComponentDefinition {\n   34  \n   35  	/**\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\parsing\\BeanComponentDefinition.java:\n   27  \n   28  /**\n   29:  * ComponentDefinition based on a standard BeanDefinition, exposing the given bean\n   30   * definition as well as inner bean definitions and bean references for the given bean.\n   31   *\n   ..\n   34   * @since 2.0\n   35   */\n   36: public class BeanComponentDefinition extends BeanDefinitionHolder implements ComponentDefinition {\n   37  \n   38  	private BeanDefinition[] innerBeanDefinitions;\n   ..\n   42  \n   43  	/**\n   44: 	 * Create a new BeanComponentDefinition for the given bean.\n   45  	 * @param beanDefinition the BeanDefinition\n   46  	 * @param beanName the name of the bean\n   47  	 */\n   48: 	public BeanComponentDefinition(BeanDefinition beanDefinition, String beanName) {\n   49  		super(beanDefinition, beanName);\n   50  		findInnerBeanDefinitionsAndBeanReferences(beanDefinition);\n   ..\n   52  \n   53  	/**\n   54: 	 * Create a new BeanComponentDefinition for the given bean.\n   55  	 * @param beanDefinition the BeanDefinition\n   56  	 * @param beanName the name of the bean\n   57  	 * @param aliases alias names for the bean, or {@code null} if none\n   58  	 */\n   59: 	public BeanComponentDefinition(BeanDefinition beanDefinition, String beanName, String[] aliases) {\n   60  		super(beanDefinition, beanName, aliases);\n   61  		findInnerBeanDefinitionsAndBeanReferences(beanDefinition);\n   ..\n   63  \n   64  	/**\n   65: 	 * Create a new BeanComponentDefinition for the given bean.\n   66  	 * @param holder the BeanDefinitionHolder encapsulating the\n   67  	 * bean definition as well as the name of the bean\n   68  	 */\n   69: 	public BeanComponentDefinition(BeanDefinitionHolder holder) {\n   70  		super(holder);\n   71  		findInnerBeanDefinitionsAndBeanReferences(holder.getBeanDefinition());\n   ..\n  122  \n  123  	/**\n  124: 	 * This implementation returns this ComponentDefinition's description.\n  125  	 * @see #getDescription()\n  126  	 */\n  ...\n  131  \n  132  	/**\n  133: 	 * This implementations expects the other object to be of type BeanComponentDefinition\n  134  	 * as well, in addition to the superclass's equality requirements.\n  135  	 */\n  136  	@Override\n  137  	public boolean equals(Object other) {\n  138: 		return (this == other || (other instanceof BeanComponentDefinition && super.equals(other)));\n  139  	}\n  140  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\parsing\\ComponentDefinition.java:\n   34   * in the {@link org.springframework.beans.factory.BeanFactory} back to the configuration data in a way\n   35   * that has concrete meaning to the end user. As such, {@link org.springframework.beans.factory.xml.NamespaceHandler}\n   36:  * implementations are able to publish events in the form of a {@code ComponentDefinition} for each\n   37   * logical entity being configured. Third parties can then {@link ReaderEventListener subscribe to these events},\n   38   * allowing for a user-centric view of the bean metadata.\n   39   *\n   40:  * <p>Each {@code ComponentDefinition} has a {@link #getSource source object} which is configuration-specific.\n   41   * In the case of XML-based configuration this is typically the {@link org.w3c.dom.Node} which contains the user\n   42   * supplied configuration information. In addition to this, each {@link BeanDefinition} enclosed in a\n   43:  * {@code ComponentDefinition} has its own {@link BeanDefinition#getSource() source object} which may point\n   44   * to a different, more specific, set of configuration data. Beyond this, individual pieces of bean metadata such\n   45   * as the {@link org.springframework.beans.PropertyValue PropertyValues} may also have a source object giving an\n   ..\n   61   * important the configuration provider believes a {@link BeanDefinition} is to the end user. It is expected\n   62   * that tools will <strong>not</strong> display all {@link BeanDefinition BeanDefinitions} for a given\n   63:  * {@code ComponentDefinition} choosing instead to filter based on the role. Tools may choose to make\n   64   * this filtering user configurable. Particular notice should be given to the\n   65   * {@link BeanDefinition#ROLE_INFRASTRUCTURE INFRASTRUCTURE role identifier}. {@link BeanDefinition BeanDefinitions}\n   ..\n   70   * @author Juergen Hoeller\n   71   * @since 2.0\n   72:  * @see AbstractComponentDefinition\n   73:  * @see CompositeComponentDefinition\n   74:  * @see BeanComponentDefinition\n   75:  * @see ReaderEventListener#componentRegistered(ComponentDefinition)\n   76   */\n   77: public interface ComponentDefinition extends BeanMetadataElement {\n   78  \n   79  	/**\n   80: 	 * Get the user-visible name of this {@code ComponentDefinition}.\n   81  	 * <p>This should link back directly to the corresponding configuration data\n   82: 	 * for this component in a given context.\n   83  	 */\n   84  	String getName();\n   85  \n   86  	/**\n   87: 	 * Return a friendly description of the described component.\n   88  	 * <p>Implementations are encouraged to return the same value from\n   89  	 * {@code toString()}.\n   ..\n   93  	/**\n   94  	 * Return the {@link BeanDefinition BeanDefinitions} that were registered\n   95: 	 * to form this {@code ComponentDefinition}.\n   96: 	 * <p>It should be noted that a {@code ComponentDefinition} may well be related with\n   97  	 * other {@link BeanDefinition BeanDefinitions} via {@link BeanReference references},\n   98  	 * however these are <strong>not</strong> included as they may be not available immediately.\n   ..\n  104  	/**\n  105  	 * Return the {@link BeanDefinition BeanDefinitions} that represent all relevant\n  106: 	 * inner beans within this component.\n  107  	 * <p>Other inner beans may exist within the associated {@link BeanDefinition BeanDefinitions},\n  108  	 * however these are not considered to be needed for validation or for user visualization.\n  ...\n  113  	/**\n  114  	 * Return the set of {@link BeanReference BeanReferences} that are considered\n  115: 	 * to be important to this {@code ComponentDefinition}.\n  116  	 * <p>Other {@link BeanReference BeanReferences} may exist within the associated\n  117  	 * {@link BeanDefinition BeanDefinitions}, however these are not considered\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\parsing\\CompositeComponentDefinition.java:\n   23  \n   24  /**\n   25:  * {@link ComponentDefinition} implementation that holds one or more nested\n   26:  * {@link ComponentDefinition} instances, aggregating them into a named group\n   27:  * of components.\n   28   *\n   29   * @author Juergen Hoeller\n   30   * @since 2.0.1\n   31:  * @see #getNestedComponents()\n   32   */\n   33: public class CompositeComponentDefinition extends AbstractComponentDefinition {\n   34  \n   35  	private final String name;\n   ..\n   37  	private final Object source;\n   38  \n   39: 	private final List<ComponentDefinition> nestedComponents = new LinkedList<>();\n   40  \n   41  \n   42  	/**\n   43: 	 * Create a new CompositeComponentDefinition.\n   44: 	 * @param name the name of the composite component\n   45: 	 * @param source the source element that defines the root of the composite component\n   46  	 */\n   47: 	public CompositeComponentDefinition(String name, Object source) {\n   48  		Assert.notNull(name, \"Name must not be null\");\n   49  		this.name = name;\n   ..\n   64  \n   65  	/**\n   66: 	 * Add the given component as nested element of this composite component.\n   67: 	 * @param component the nested component to add\n   68  	 */\n   69: 	public void addNestedComponent(ComponentDefinition component) {\n   70: 		Assert.notNull(component, \"ComponentDefinition must not be null\");\n   71: 		this.nestedComponents.add(component);\n   72  	}\n   73  \n   74  	/**\n   75: 	 * Return the nested components that this composite component holds.\n   76: 	 * @return the array of nested components, or an empty array if none\n   77  	 */\n   78: 	public ComponentDefinition[] getNestedComponents() {\n   79: 		return this.nestedComponents.toArray(new ComponentDefinition[this.nestedComponents.size()]);\n   80  	}\n   81  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\parsing\\EmptyReaderEventListener.java:\n   32  \n   33  	@Override\n   34: 	public void componentRegistered(ComponentDefinition componentDefinition) {\n   35  		// no-op\n   36  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\parsing\\ReaderContext.java:\n  108  	}\n  109  \n  110: 	public void fireComponentRegistered(ComponentDefinition componentDefinition) {\n  111: 		this.eventListener.componentRegistered(componentDefinition);\n  112  	}\n  113  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\parsing\\ReaderEventListener.java:\n   20  \n   21  /**\n   22:  * Interface that receives callbacks for component, alias and import\n   23   * registrations during a bean definition reading process.\n   24   *\n   ..\n   38  \n   39  	/**\n   40: 	 * Notification that the given component has been registered.\n   41: 	 * @param componentDefinition a descriptor for the new component\n   42: 	 * @see BeanComponentDefinition\n   43  	 */\n   44: 	void componentRegistered(ComponentDefinition componentDefinition);\n   45  \n   46  	/**\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\support\\AbstractAutowireCapableBeanFactory.java:\n 1134  	 * matching all remaining arguments with beans from the bean factory.\n 1135  	 * <p>This corresponds to constructor injection: In this mode, a Spring\n 1136: 	 * bean factory is able to host components that expect constructor-based\n 1137  	 * dependency resolution.\n 1138  	 * @param beanName the name of the bean\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\support\\ConstructorResolver.java:\n   91  	 * matching all remaining arguments with beans from the bean factory.\n   92  	 * <p>This corresponds to constructor injection: In this mode, a Spring\n   93: 	 * bean factory is able to host components that expect constructor-based\n   94  	 * dependency resolution.\n   95  	 * @param beanName the name of the bean\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\support\\DefaultListableBeanFactory.java:\n 1128  		Class<?> type = descriptor.getDependencyType();\n 1129  		if (type.isArray()) {\n 1130: 			Class<?> componentType = type.getComponentType();\n 1131: 			Map<String, Object> matchingBeans = findAutowireCandidates(beanName, componentType,\n 1132  					new MultiElementDependencyDescriptor(descriptor));\n 1133  			if (matchingBeans.isEmpty()) {\n ....\n 1217  	 * @param beanName the name of the bean that is about to be wired\n 1218  	 * @param requiredType the actual type of bean to look for\n 1219: 	 * (may be an array component type or collection element type)\n 1220  	 * @param descriptor the descriptor of the dependency to resolve\n 1221  	 * @return a Map of candidate names and candidate instances that match\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\xml\\AbstractBeanDefinitionParser.java:\n   22  import org.springframework.beans.factory.config.BeanDefinition;\n   23  import org.springframework.beans.factory.config.BeanDefinitionHolder;\n   24: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   25  import org.springframework.beans.factory.support.AbstractBeanDefinition;\n   26  import org.springframework.beans.factory.support.BeanDefinitionReaderUtils;\n   ..\n   78  				registerBeanDefinition(holder, parserContext.getRegistry());\n   79  				if (shouldFireEvents()) {\n   80: 					BeanComponentDefinition componentDefinition = new BeanComponentDefinition(holder);\n   81: 					postProcessComponentDefinition(componentDefinition);\n   82: 					parserContext.registerComponent(componentDefinition);\n   83  				}\n   84  			}\n   ..\n  146  	 * @return the primary {@link BeanDefinition} resulting from the parsing of the supplied {@link Element}\n  147  	 * @see #parse(org.w3c.dom.Element, ParserContext)\n  148: 	 * @see #postProcessComponentDefinition(org.springframework.beans.factory.parsing.BeanComponentDefinition)\n  149  	 */\n  150  	protected abstract AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext);\n  ...\n  186  	/**\n  187  	 * Determine whether this parser is supposed to fire a\n  188: 	 * {@link org.springframework.beans.factory.parsing.BeanComponentDefinition}\n  189  	 * event after parsing the bean definition.\n  190  	 * <p>This implementation returns {@code true} by default; that is,\n  191  	 * an event will be fired when a bean definition has been completely parsed.\n  192  	 * Override this to return {@code false} in order to suppress the event.\n  193: 	 * @return {@code true} in order to fire a component registration event\n  194  	 * after parsing the bean definition; {@code false} to suppress the event\n  195: 	 * @see #postProcessComponentDefinition\n  196: 	 * @see org.springframework.beans.factory.parsing.ReaderContext#fireComponentRegistered\n  197  	 */\n  198  	protected boolean shouldFireEvents() {\n  ...\n  202  	/**\n  203  	 * Hook method called after the primary parsing of a\n  204: 	 * {@link BeanComponentDefinition} but before the\n  205: 	 * {@link BeanComponentDefinition} has been registered with a\n  206  	 * {@link org.springframework.beans.factory.support.BeanDefinitionRegistry}.\n  207  	 * <p>Derived classes can override this method to supply any custom logic that\n  208  	 * is to be executed after all the parsing is finished.\n  209  	 * <p>The default implementation is a no-op.\n  210: 	 * @param componentDefinition the {@link BeanComponentDefinition} that is to be processed\n  211  	 */\n  212: 	protected void postProcessComponentDefinition(BeanComponentDefinition componentDefinition) {\n  213  	}\n  214  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\xml\\DefaultBeanDefinitionDocumentReader.java:\n   31  import org.springframework.beans.factory.BeanDefinitionStoreException;\n   32  import org.springframework.beans.factory.config.BeanDefinitionHolder;\n   33: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   34  import org.springframework.beans.factory.support.BeanDefinitionReaderUtils;\n   35  import org.springframework.core.io.Resource;\n   ..\n  309  			}\n  310  			// Send registration event.\n  311: 			getReaderContext().fireComponentRegistered(new BeanComponentDefinition(bdHolder));\n  312  		}\n  313  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\xml\\ParserContext.java:\n   20  \n   21  import org.springframework.beans.factory.config.BeanDefinition;\n   22: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   23: import org.springframework.beans.factory.parsing.ComponentDefinition;\n   24: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   25  import org.springframework.beans.factory.support.BeanDefinitionReaderUtils;\n   26  import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n   ..\n   45  	private BeanDefinition containingBeanDefinition;\n   46  \n   47: 	private final Stack<ComponentDefinition> containingComponents = new Stack<>();\n   48  \n   49  \n   ..\n   90  	}\n   91  \n   92: 	public CompositeComponentDefinition getContainingComponent() {\n   93: 		return (!this.containingComponents.isEmpty() ?\n   94: 				(CompositeComponentDefinition) this.containingComponents.lastElement() : null);\n   95  	}\n   96  \n   97: 	public void pushContainingComponent(CompositeComponentDefinition containingComponent) {\n   98: 		this.containingComponents.push(containingComponent);\n   99  	}\n  100  \n  101: 	public CompositeComponentDefinition popContainingComponent() {\n  102: 		return (CompositeComponentDefinition) this.containingComponents.pop();\n  103  	}\n  104  \n  105: 	public void popAndRegisterContainingComponent() {\n  106: 		registerComponent(popContainingComponent());\n  107  	}\n  108  \n  109: 	public void registerComponent(ComponentDefinition component) {\n  110: 		CompositeComponentDefinition containingComponent = getContainingComponent();\n  111: 		if (containingComponent != null) {\n  112: 			containingComponent.addNestedComponent(component);\n  113  		}\n  114  		else {\n  115: 			this.readerContext.fireComponentRegistered(component);\n  116  		}\n  117  	}\n  118  \n  119: 	public void registerBeanComponent(BeanComponentDefinition component) {\n  120: 		BeanDefinitionReaderUtils.registerBeanDefinition(component, getRegistry());\n  121: 		registerComponent(component);\n  122  	}\n  123  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\factory\\xml\\XmlBeanDefinitionReader.java:\n  205  	 * Specify which {@link ReaderEventListener} to use.\n  206  	 * <p>The default implementation is EmptyReaderEventListener which discards every event notification.\n  207: 	 * External tools can provide an alternative implementation to monitor the components being\n  208  	 * registered in the BeanFactory.\n  209  	 */\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\PropertyDescriptorUtils.java:\n  150  \n  151  		if (propertyType != null && (!propertyType.isArray() ||\n  152: 				propertyType.getComponentType() != indexedPropertyType)) {\n  153  			throw new IntrospectionException(\"Type mismatch between indexed and non-indexed methods: \" +\n  154  					indexedReadMethod + \" - \" + indexedWriteMethod);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\java\\org\\springframework\\beans\\TypeConverterDelegate.java:\n  199  				else if (requiredType.isArray()) {\n  200  					// Array required -> apply appropriate conversion of elements.\n  201: 					if (convertedValue instanceof String && Enum.class.isAssignableFrom(requiredType.getComponentType())) {\n  202  						convertedValue = StringUtils.commaDelimitedListToStringArray((String) convertedValue);\n  203  					}\n  204: 					return (T) convertToTypedArray(convertedValue, propertyName, requiredType.getComponentType());\n  205  				}\n  206  				else if (convertedValue instanceof Collection) {\n  ...\n  458  	}\n  459  \n  460: 	private Object convertToTypedArray(Object input, String propertyName, Class<?> componentType) {\n  461  		if (input instanceof Collection) {\n  462  			// Convert Collection elements to array elements.\n  463  			Collection<?> coll = (Collection<?>) input;\n  464: 			Object result = Array.newInstance(componentType, coll.size());\n  465  			int i = 0;\n  466  			for (Iterator<?> it = coll.iterator(); it.hasNext(); i++) {\n  467  				Object value = convertIfNecessary(\n  468: 						buildIndexedPropertyName(propertyName, i), null, it.next(), componentType);\n  469  				Array.set(result, i, value);\n  470  			}\n  ...\n  473  		else if (input.getClass().isArray()) {\n  474  			// Convert array elements, if necessary.\n  475: 			if (componentType.equals(input.getClass().getComponentType()) &&\n  476: 					!this.propertyEditorRegistry.hasCustomEditorForElement(componentType, propertyName)) {\n  477  				return input;\n  478  			}\n  479  			int arrayLength = Array.getLength(input);\n  480: 			Object result = Array.newInstance(componentType, arrayLength);\n  481  			for (int i = 0; i < arrayLength; i++) {\n  482  				Object value = convertIfNecessary(\n  483: 						buildIndexedPropertyName(propertyName, i), null, Array.get(input, i), componentType);\n  484  				Array.set(result, i, value);\n  485  			}\n  ...\n  487  		}\n  488  		else {\n  489: 			// A plain value: convert it to an array with a single component.\n  490: 			Object result = Array.newInstance(componentType, 1);\n  491  			Object value = convertIfNecessary(\n  492: 					buildIndexedPropertyName(propertyName, 0), null, input, componentType);\n  493  			Array.set(result, 0, value);\n  494  			return result;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\main\\resources\\org\\springframework\\beans\\factory\\xml\\spring-tool.xsd:\n   81  		<xsd:annotation>\n   82  			<xsd:documentation><![CDATA[\n   83: 	Indicates that an annotated type exports an application visible component.\n   84  		]]></xsd:documentation>\n   85  		</xsd:annotation>\n   ..\n   87  			<xsd:annotation>\n   88  				<xsd:documentation><![CDATA[\n   89: 	The type of the exported component. May be null if the type is not known until runtime.\n   90  		]]></xsd:documentation>\n   91  			</xsd:annotation>\n   ..\n   95  				<xsd:documentation><![CDATA[\n   96  	Defines an XPath query that can be executed against the node annotated with this\n   97: 	type to determine the identifier of any exported component.\n   98  		]]></xsd:documentation>\n   99  			</xsd:annotation>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\test\\java\\org\\springframework\\beans\\BeanUtilsTests.java:\n   83  			if (\"containedBeans\".equals(descriptor.getName())) {\n   84  				assertTrue(\"Property should be an array\", descriptor.getPropertyType().isArray());\n   85: 				assertEquals(descriptor.getPropertyType().getComponentType(), ContainedBean.class);\n   86  			}\n   87  		}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\test\\java\\org\\springframework\\beans\\factory\\FactoryBeanTests.java:\n   28  import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;\n   29  import org.springframework.core.io.Resource;\n   30: import org.springframework.stereotype.Component;\n   31  import org.springframework.util.Assert;\n   32  \n   ..\n   96  		DefaultListableBeanFactory factory = new DefaultListableBeanFactory();\n   97  		new XmlBeanDefinitionReader(factory).loadBeanDefinitions(ABSTRACT_CONTEXT);\n   98: 		factory.getBeansWithAnnotation(Component.class);\n   99  	}\n  100  \n  ...\n  195  \n  196  \n  197: 	@Component\n  198  	public static class BetaFactoryBean implements FactoryBean<Object> {\n  199  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\test\\java\\org\\springframework\\beans\\factory\\xml\\EventPublicationTests.java:\n   26  import org.springframework.beans.factory.config.TypedStringValue;\n   27  import org.springframework.beans.factory.parsing.AliasDefinition;\n   28: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   29: import org.springframework.beans.factory.parsing.ComponentDefinition;\n   30  import org.springframework.beans.factory.parsing.ImportDefinition;\n   31  import org.springframework.beans.factory.parsing.PassThroughSourceExtractor;\n   ..\n   73  	@Test\n   74  	public void beanEventReceived() throws Exception {\n   75: 		ComponentDefinition componentDefinition1 = this.eventListener.getComponentDefinition(\"testBean\");\n   76: 		assertTrue(componentDefinition1 instanceof BeanComponentDefinition);\n   77: 		assertEquals(1, componentDefinition1.getBeanDefinitions().length);\n   78: 		BeanDefinition beanDefinition1 = componentDefinition1.getBeanDefinitions()[0];\n   79  		assertEquals(new TypedStringValue(\"Rob Harrop\"),\n   80  				beanDefinition1.getConstructorArgumentValues().getGenericArgumentValue(String.class).getValue());\n   81: 		assertEquals(1, componentDefinition1.getBeanReferences().length);\n   82: 		assertEquals(\"testBean2\", componentDefinition1.getBeanReferences()[0].getBeanName());\n   83: 		assertEquals(1, componentDefinition1.getInnerBeanDefinitions().length);\n   84: 		BeanDefinition innerBd1 = componentDefinition1.getInnerBeanDefinitions()[0];\n   85  		assertEquals(new TypedStringValue(\"ACME\"),\n   86  				innerBd1.getConstructorArgumentValues().getGenericArgumentValue(String.class).getValue());\n   87: 		assertTrue(componentDefinition1.getSource() instanceof Element);\n   88  \n   89: 		ComponentDefinition componentDefinition2 = this.eventListener.getComponentDefinition(\"testBean2\");\n   90: 		assertTrue(componentDefinition2 instanceof BeanComponentDefinition);\n   91: 		assertEquals(1, componentDefinition1.getBeanDefinitions().length);\n   92: 		BeanDefinition beanDefinition2 = componentDefinition2.getBeanDefinitions()[0];\n   93  		assertEquals(new TypedStringValue(\"Juergen Hoeller\"),\n   94  				beanDefinition2.getPropertyValues().getPropertyValue(\"name\").getValue());\n   95: 		assertEquals(0, componentDefinition2.getBeanReferences().length);\n   96: 		assertEquals(1, componentDefinition2.getInnerBeanDefinitions().length);\n   97: 		BeanDefinition innerBd2 = componentDefinition2.getInnerBeanDefinitions()[0];\n   98  		assertEquals(new TypedStringValue(\"Eva Schallmeiner\"),\n   99  				innerBd2.getPropertyValues().getPropertyValue(\"name\").getValue());\n  100: 		assertTrue(componentDefinition2.getSource() instanceof Element);\n  101  	}\n  102  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\test\\java\\org\\springframework\\beans\\factory\\xml\\NestedBeansElementAttributeRecursionTests.java:\n   97  		assertThat(bf.getBeanDefinition(\"bazService\").isAutowireCandidate(), is(true));\n   98  		assertThat(bf.getBeanDefinition(\"random\").isAutowireCandidate(), is(false));\n   99: 		assertThat(bf.getBeanDefinition(\"fooComponent\").isAutowireCandidate(), is(false));\n  100  		assertThat(bf.getBeanDefinition(\"fRepository\").isAutowireCandidate(), is(false));\n  101  \n  102: 		assertThat(bf.getBeanDefinition(\"aComponent\").isAutowireCandidate(), is(true));\n  103  		assertThat(bf.getBeanDefinition(\"someService\").isAutowireCandidate(), is(false));\n  104  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\test\\java\\org\\springframework\\beans\\factory\\xml\\UtilNamespaceHandlerTests.java:\n   30  import org.springframework.beans.factory.config.FieldRetrievingFactoryBean;\n   31  import org.springframework.beans.factory.config.PropertiesFactoryBean;\n   32: import org.springframework.beans.factory.parsing.ComponentDefinition;\n   33  import org.springframework.beans.factory.support.AbstractBeanDefinition;\n   34  import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n   ..\n   76  	@Test\n   77  	public void testEvents() {\n   78: 		ComponentDefinition propertiesComponent = this.listener.getComponentDefinition(\"myProperties\");\n   79: 		assertNotNull(\"Event for 'myProperties' not sent\", propertiesComponent);\n   80: 		AbstractBeanDefinition propertiesBean = (AbstractBeanDefinition) propertiesComponent.getBeanDefinitions()[0];\n   81  		assertEquals(\"Incorrect BeanDefinition\", PropertiesFactoryBean.class, propertiesBean.getBeanClass());\n   82  \n   83: 		ComponentDefinition constantComponent = this.listener.getComponentDefinition(\"min\");\n   84: 		assertNotNull(\"Event for 'min' not sent\", propertiesComponent);\n   85: 		AbstractBeanDefinition constantBean = (AbstractBeanDefinition) constantComponent.getBeanDefinitions()[0];\n   86  		assertEquals(\"Incorrect BeanDefinition\", FieldRetrievingFactoryBean.class, constantBean.getBeanClass());\n   87  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\test\\java\\org\\springframework\\tests\\beans\\CollectingReaderEventListener.java:\n   26  \n   27  import org.springframework.beans.factory.parsing.AliasDefinition;\n   28: import org.springframework.beans.factory.parsing.ComponentDefinition;\n   29  import org.springframework.beans.factory.parsing.DefaultsDefinition;\n   30  import org.springframework.beans.factory.parsing.ImportDefinition;\n   ..\n   39  	private final List<DefaultsDefinition> defaults = new LinkedList<>();\n   40  \n   41: 	private final Map<String, ComponentDefinition> componentDefinitions = new LinkedHashMap<>(8);\n   42  \n   43  	private final Map<String, List<AliasDefinition>> aliasMap = new LinkedHashMap<>(8);\n   ..\n   56  \n   57  	@Override\n   58: 	public void componentRegistered(ComponentDefinition componentDefinition) {\n   59: 		this.componentDefinitions.put(componentDefinition.getName(), componentDefinition);\n   60  	}\n   61  \n   62: 	public ComponentDefinition getComponentDefinition(String name) {\n   63: 		return this.componentDefinitions.get(name);\n   64  	}\n   65  \n   66: 	public ComponentDefinition[] getComponentDefinitions() {\n   67: 		Collection<ComponentDefinition> collection = this.componentDefinitions.values();\n   68: 		return collection.toArray(new ComponentDefinition[collection.size()]);\n   69  	}\n   70  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\test\\resources\\org\\springframework\\beans\\factory\\access\\SingletonBeanFactoryLocatorTests-ref1.xml:\n   16  \n   17    <!-- while the following two could be inside another, also on the classpath,\n   18: 	perhaps coming from another component jar -->\n   19  \n   20    <bean id=\"another.qualified.name\"\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-beans\\src\\test\\resources\\org\\springframework\\beans\\factory\\xml\\NestedBeansElementAttributeRecursionTests-autowire-candidates-context.xml:\n   22  			<bean id=\"bazService\" class=\"java.lang.Object\"/>\n   23  			<bean id=\"random\" class=\"java.lang.Object\"/>\n   24: 			<bean id=\"fooComponent\" class=\"java.lang.Object\"/>\n   25  			<bean id=\"fRepository\" class=\"java.lang.Object\"/>\n   26  		</beans>\n   27  \n   28: 		<beans default-autowire-candidates=\"*Component\">\n   29: 			<bean id=\"aComponent\" class=\"java.lang.Object\"/>\n   30  			<bean id=\"someService\" class=\"java.lang.Object\"/>\n   31  		</beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context-indexer\\src\\main\\java\\org\\springframework\\context\\index\\CandidateComponentsIndexer.java:\n   32  import javax.lang.model.element.TypeElement;\n   33  \n   34: import org.springframework.context.index.metadata.CandidateComponentsMetadata;\n   35  import org.springframework.context.index.metadata.ItemMetadata;\n   36  \n   37  /**\n   38:  * Annotation {@link Processor} that writes {@link CandidateComponentsMetadata}\n   39:  * file for spring components.\n   40   *\n   41   * @author Stephane Nicoll\n   ..\n   44  @SupportedAnnotationTypes({\"*\"})\n   45  @SupportedSourceVersion(SourceVersion.RELEASE_8)\n   46: public class CandidateComponentsIndexer extends AbstractProcessor {\n   47  \n   48  	private MetadataStore metadataStore;\n   ..\n   95  	}\n   96  \n   97: 	protected CandidateComponentsMetadata writeMetaData() {\n   98: 		CandidateComponentsMetadata metadata = this.metadataCollector.getMetadata();\n   99  		if (!metadata.getItems().isEmpty()) {\n  100  			try {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context-indexer\\src\\main\\java\\org\\springframework\\context\\index\\metadata\\CandidateComponentsMetadata.java:\n   22  \n   23  /**\n   24:  * Meta-data for candidate components.\n   25   *\n   26   * @author Stephane Nicoll\n   27   * @since 5.0\n   28   */\n   29: public class CandidateComponentsMetadata {\n   30  \n   31  	private final List<ItemMetadata> items;\n   32  \n   33: 	public CandidateComponentsMetadata() {\n   34  		this.items = new ArrayList<>();\n   35  	}\n   ..\n   45  	@Override\n   46  	public String toString() {\n   47: 		return \"CandidateComponentsMetadata{\" + \"items=\" + this.items + '}';\n   48  	}\n   49  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context-indexer\\src\\main\\java\\org\\springframework\\context\\index\\metadata\\PropertiesMarshaller.java:\n   27  \n   28  /**\n   29:  * Marshaller to write {@link CandidateComponentsMetadata} as properties.\n   30   *\n   31   * @author Stephane Nicoll\n   ..\n   34  public class PropertiesMarshaller {\n   35  \n   36: 	public void write(CandidateComponentsMetadata metadata, OutputStream out)\n   37  			throws IOException {\n   38  \n   ..\n   42  	}\n   43  \n   44: 	public CandidateComponentsMetadata read(InputStream in) throws IOException {\n   45: 		CandidateComponentsMetadata result = new CandidateComponentsMetadata();\n   46  		Properties props = new Properties();\n   47  		props.load(in);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context-indexer\\src\\main\\java\\org\\springframework\\context\\index\\MetadataCollector.java:\n   27  \n   28  import org.springframework.context.index.metadata.ItemMetadata;\n   29: import org.springframework.context.index.metadata.CandidateComponentsMetadata;\n   30  \n   31  /**\n   32:  * Used by {@link CandidateComponentsIndexer} to collect {@link CandidateComponentsMetadata}.\n   33   *\n   34   * @author Stephane Nicoll\n   ..\n   40  	private final ProcessingEnvironment processingEnvironment;\n   41  \n   42: 	private final CandidateComponentsMetadata previousMetadata;\n   43  \n   44  	private final TypeUtils typeUtils;\n   ..\n   52  	 */\n   53  	public MetadataCollector(ProcessingEnvironment processingEnvironment,\n   54: 			CandidateComponentsMetadata previousMetadata) {\n   55  		this.processingEnvironment = processingEnvironment;\n   56  		this.previousMetadata = previousMetadata;\n   ..\n   74  	}\n   75  \n   76: 	public CandidateComponentsMetadata getMetadata() {\n   77: 		CandidateComponentsMetadata metadata = new CandidateComponentsMetadata();\n   78  		for (ItemMetadata item : this.metadataItems) {\n   79  			metadata.add(item);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context-indexer\\src\\main\\java\\org\\springframework\\context\\index\\MetadataStore.java:\n   25  \n   26  import org.springframework.context.index.metadata.PropertiesMarshaller;\n   27: import org.springframework.context.index.metadata.CandidateComponentsMetadata;\n   28  \n   29  /**\n   30:  * Store {@link CandidateComponentsMetadata} on the filesystem.\n   31   *\n   32   * @author Stephane Nicoll\n   ..\n   34  class MetadataStore {\n   35  \n   36: 	static final String METADATA_PATH = \"META-INF/spring.components\";\n   37  \n   38  	private final ProcessingEnvironment environment;\n   ..\n   42  	}\n   43  \n   44: 	public CandidateComponentsMetadata readMetadata() {\n   45  		try {\n   46  			return readMetadata(getMetadataResource().openInputStream());\n   ..\n   51  	}\n   52  \n   53: 	public void writeMetadata(CandidateComponentsMetadata metadata) throws IOException {\n   54  		if (!metadata.getItems().isEmpty()) {\n   55  			try (OutputStream outputStream = createMetadataResource().openOutputStream()) {\n   ..\n   59  	}\n   60  \n   61: 	private CandidateComponentsMetadata readMetadata(InputStream in) throws IOException {\n   62  		try {\n   63  			return new PropertiesMarshaller().read(in);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context-indexer\\src\\main\\java\\org\\springframework\\context\\index\\package-info.java:\n   17  /**\n   18   * Generates a 'META-INF/spring.candidates' at compilation time with all\n   19:  * the component candidates detected in the module.\n   20   */\n   21  package org.springframework.context.index;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context-indexer\\src\\main\\java\\org\\springframework\\context\\index\\StereotypesProvider.java:\n   23   * Provide the list of stereotypes that match an {@link Element}. If an element\n   24   * has one more stereotypes, it is referenced in the index of candidate\n   25:  * components and each stereotype can be queried individually.\n   26   *\n   27   * @author Stephane Nicoll\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context-indexer\\src\\main\\resources\\META-INF\\services\\javax.annotation.processing.Processor:\n    1: org.springframework.context.index.CandidateComponentsIndexer\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context-indexer\\src\\test\\java\\org\\springframework\\context\\index\\CandidateComponentsIndexerTests.java:\n   33  import org.junit.rules.TemporaryFolder;\n   34  \n   35: import org.springframework.context.index.metadata.CandidateComponentsMetadata;\n   36  import org.springframework.context.index.metadata.PropertiesMarshaller;\n   37  import org.springframework.context.index.sample.AbstractController;\n   38  import org.springframework.context.index.sample.MetaControllerIndexed;\n   39: import org.springframework.context.index.sample.SampleComponent;\n   40  import org.springframework.context.index.sample.SampleController;\n   41  import org.springframework.context.index.sample.SampleMetaController;\n   ..\n   57  import org.springframework.context.index.sample.type.SpecializedRepo;\n   58  import org.springframework.context.index.test.TestCompiler;\n   59: import org.springframework.stereotype.Component;\n   60  \n   61  import static org.hamcrest.Matchers.*;\n   ..\n   64  \n   65  /**\n   66:  * Tests for {@link CandidateComponentsIndexer}.\n   67   *\n   68   * @author Stephane Nicoll\n   69   */\n   70: public class CandidateComponentsIndexerTests {\n   71  \n   72  	@Rule\n   ..\n   85  	@Test\n   86  	public void noCandidate() throws IOException {\n   87: 		CandidateComponentsMetadata metadata = compile(SampleNone.class);\n   88  		assertThat(metadata.getItems(), hasSize(0));\n   89  	}\n   ..\n   91  	@Test\n   92  	public void noAnnotation() throws IOException {\n   93: 		CandidateComponentsMetadata metadata = compile(CandidateComponentsIndexerTests.class);\n   94  		assertThat(metadata.getItems(), hasSize(0));\n   95  	}\n   96  \n   97  	@Test\n   98: 	public void stereotypeComponent() throws IOException {\n   99: 		testComponent(SampleComponent.class);\n  100  	}\n  101  \n  102  	@Test\n  103  	public void stereotypeService() throws IOException {\n  104: 		testComponent(SampleService.class);\n  105  	}\n  106  \n  107  	@Test\n  108  	public void stereotypeController() throws IOException {\n  109: 		testComponent(SampleController.class);\n  110  	}\n  111  \n  112  	@Test\n  113  	public void stereotypeControllerMetaAnnotation() throws IOException {\n  114: 		testComponent(SampleMetaController.class);\n  115  	}\n  116  \n  117  	@Test\n  118  	public void stereotypeRepository() throws IOException {\n  119: 		testSingleComponent(SampleRepository.class, Component.class);\n  120  	}\n  121  \n  122  	@Test\n  123  	public void stereotypeControllerMetaIndex() throws IOException {\n  124: 		testSingleComponent(SampleMetaIndexedController.class,\n  125: 				Component.class, MetaControllerIndexed.class);\n  126  	}\n  127  \n  128  	@Test\n  129  	public void stereotypeOnAbstractClass() throws IOException {\n  130: 		testComponent(AbstractController.class);\n  131  	}\n  132  \n  133  	@Test\n  134  	public void cdiManagedBean() throws IOException {\n  135: 		testSingleComponent(SampleManagedBean.class, ManagedBean.class);\n  136  	}\n  137  \n  138  	@Test\n  139  	public void cdiNamed() throws IOException {\n  140: 		testSingleComponent(SampleNamed.class, Named.class);\n  141  	}\n  142  \n  143  	@Test\n  144  	public void persistenceEntity() throws IOException {\n  145: 		testSingleComponent(SampleEntity.class, Entity.class);\n  146  	}\n  147  \n  148  	@Test\n  149  	public void persistenceMappedSuperClass() throws IOException {\n  150: 		testSingleComponent(SampleMappedSuperClass.class, MappedSuperclass.class);\n  151  	}\n  152  \n  153  	@Test\n  154  	public void persistenceEmbeddable() throws IOException {\n  155: 		testSingleComponent(SampleEmbeddable.class, Embeddable.class);\n  156  	}\n  157  \n  158  	@Test\n  159  	public void persistenceConverter() throws IOException {\n  160: 		testSingleComponent(SampleConverter.class, Converter.class);\n  161  	}\n  162  \n  163  	@Test\n  164  	public void packageInfo() throws IOException {\n  165: 		CandidateComponentsMetadata metadata = compile(\n  166  				\"org/springframework/context/index/sample/jpa/package-info\");\n  167: 		assertThat(metadata, hasComponent(\n  168  				\"org.springframework.context.index.sample.jpa\", \"package-info\"));\n  169  	}\n  ...\n  171  	@Test\n  172  	public void typeStereotypeFromMetaInterface() throws IOException {\n  173: 		testSingleComponent(SampleSpecializedRepo.class, Repo.class);\n  174  	}\n  175  \n  176  	@Test\n  177  	public void typeStereotypeFromInterfaceFromSuperClass() throws IOException {\n  178: 		testSingleComponent(SampleRepo.class, Repo.class);\n  179  	}\n  180  \n  181  	@Test\n  182  	public void typeStereotypeFromSeveralInterfaces() throws IOException {\n  183: 		testSingleComponent(SampleSmartRepo.class, Repo.class, SmartRepo.class);\n  184  	}\n  185  \n  186  	@Test\n  187  	public void typeStereotypeOnInterface() throws IOException {\n  188: 		testSingleComponent(SpecializedRepo.class, Repo.class);\n  189  	}\n  190  \n  191  	@Test\n  192  	public void typeStereotypeOnInterfaceFromSeveralInterfaces() throws IOException {\n  193: 		testSingleComponent(SmartRepo.class, Repo.class, SmartRepo.class);\n  194  	}\n  195  \n  196  	@Test\n  197  	public void typeStereotypeOnIndexedInterface() throws IOException {\n  198: 		testSingleComponent(Repo.class, Repo.class);\n  199  	}\n  200  \n  201  \n  202: 	private void testComponent(Class<?>... classes) throws IOException {\n  203: 		CandidateComponentsMetadata metadata = compile(classes);\n  204  		for (Class<?> c : classes) {\n  205: 			assertThat(metadata, hasComponent(c, Component.class));\n  206  		}\n  207  		assertThat(metadata.getItems(), hasSize(classes.length));\n  208  	}\n  209  \n  210: 	private void testSingleComponent(Class<?> target, Class<?>... stereotypes) throws IOException {\n  211: 		CandidateComponentsMetadata metadata = compile(target);\n  212: 		assertThat(metadata, hasComponent(target, stereotypes));\n  213  		assertThat(metadata.getItems(), hasSize(1));\n  214  	}\n  215  \n  216: 	private CandidateComponentsMetadata compile(Class<?>... types) throws IOException {\n  217: 		CandidateComponentsIndexer processor = new CandidateComponentsIndexer();\n  218  		this.compiler.getTask(types).call(processor);\n  219  		return readGeneratedMetadata(this.compiler.getOutputLocation());\n  220  	}\n  221  \n  222: 	private CandidateComponentsMetadata compile(String... types) throws IOException {\n  223: 		CandidateComponentsIndexer processor = new CandidateComponentsIndexer();\n  224  		this.compiler.getTask(types).call(processor);\n  225  		return readGeneratedMetadata(this.compiler.getOutputLocation());\n  226  	}\n  227  \n  228: 	private CandidateComponentsMetadata readGeneratedMetadata(File outputLocation) {\n  229  		try {\n  230  			File metadataFile = new File(outputLocation,\n  ...\n  235  			}\n  236  			else {\n  237: 				return new CandidateComponentsMetadata();\n  238  			}\n  239  		}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context-indexer\\src\\test\\java\\org\\springframework\\context\\index\\metadata\\PropertiesMarshallerTests.java:\n   38  	@Test\n   39  	public void readWrite() throws IOException {\n   40: 		CandidateComponentsMetadata metadata = new CandidateComponentsMetadata();\n   41  		metadata.add(createItem(\"com.foo\", \"first\", \"second\"));\n   42  		metadata.add(createItem(\"com.bar\", \"first\"));\n   ..\n   45  		PropertiesMarshaller marshaller = new PropertiesMarshaller();\n   46  		marshaller.write(metadata, outputStream);\n   47: 		CandidateComponentsMetadata readMetadata = marshaller.read(\n   48  				new ByteArrayInputStream(outputStream.toByteArray()));\n   49: 		assertThat(readMetadata, hasComponent(\"com.foo\", \"first\", \"second\"));\n   50: 		assertThat(readMetadata, hasComponent(\"com.bar\", \"first\"));\n   51  		assertThat(readMetadata.getItems(), hasSize(2));\n   52  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context-indexer\\src\\test\\java\\org\\springframework\\context\\index\\sample\\AbstractController.java:\n   17  package org.springframework.context.index.sample;\n   18  \n   19: import org.springframework.stereotype.Component;\n   20  \n   21  /**\n   22:  * Abstract {@link Component} that shouldn't be registered.\n   23   *\n   24   * @author Stephane Nicoll\n   25   */\n   26: @Component\n   27  public abstract class AbstractController {\n   28  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context-indexer\\src\\test\\java\\org\\springframework\\context\\index\\sample\\SampleComponent.java:\n   17  package org.springframework.context.index.sample;\n   18  \n   19: import org.springframework.stereotype.Component;\n   20  \n   21  /**\n   22:  * Test candidate for {@link Component}.\n   23   *\n   24   * @author Stephane Nicoll\n   25   */\n   26: @Component\n   27: public class SampleComponent {\n   28  }\n   29  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context-indexer\\src\\test\\java\\org\\springframework\\context\\index\\sample\\SampleMetaIndexedController.java:\n   19  /**\n   20   * Test candidate for a {@code Controller} that adds both the\n   21:  * {@code Component} and {@code MetaControllerIndexed} stereotypes.\n   22   *\n   23   * @author Stephane Nicoll\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context-indexer\\src\\test\\java\\org\\springframework\\context\\index\\test\\Metadata.java:\n   25  \n   26  import org.springframework.context.index.metadata.ItemMetadata;\n   27: import org.springframework.context.index.metadata.CandidateComponentsMetadata;\n   28  \n   29  /**\n   30:  * Hamcrest {@link org.hamcrest.Matcher Matcher} to help test {@link CandidateComponentsMetadata}.\n   31   *\n   32   * @author Stephane Nicoll\n   ..\n   34  public class Metadata {\n   35  \n   36: 	public static ItemMetadataMatcher hasComponent(Class<?> type, Class<?>... stereotypes) {\n   37  		return new ItemMetadataMatcher(type.getName(), stereotypes);\n   38  	}\n   39  \n   40: 	public static ItemMetadataMatcher hasComponent(String type, String... stereotypes) {\n   41  		return new ItemMetadataMatcher(type, stereotypes);\n   42  	}\n   43  \n   44: 	private static class ItemMetadataMatcher extends BaseMatcher<CandidateComponentsMetadata> {\n   45  \n   46  		private final String type;\n   ..\n   64  		@Override\n   65  		public boolean matches(Object value) {\n   66: 			if (!(value instanceof CandidateComponentsMetadata)) {\n   67  				return false;\n   68  			}\n   69: 			ItemMetadata itemMetadata = getFirstItemWithType((CandidateComponentsMetadata) value, this.type);\n   70  			if (itemMetadata == null) {\n   71  				return false;\n   ..\n   87  		}\n   88  \n   89: 		private ItemMetadata getFirstItemWithType(CandidateComponentsMetadata metadata, String type) {\n   90  			for (ItemMetadata item : metadata.getItems()) {\n   91  				if (item.getType().equals(type)) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context-support\\src\\main\\resources\\org\\springframework\\mail\\javamail\\mime.types:\n  291  # Carbon Copy - remote control/access (Microcom)\n  292  application/ccv				ccv\n  293: # Spreadsheets (Visual Components)\n  294  workbook/formulaone			vts\n  295  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\cache\\annotation\\EnableCaching.java:\n   79   * In both of the scenarios above, {@code @EnableCaching} and {@code\n   80   * <cache:annotation-driven/>} are responsible for registering the necessary Spring\n   81:  * components that power annotation-driven cache management, such as the\n   82   * {@link org.springframework.cache.interceptor.CacheInterceptor CacheInterceptor} and the\n   83   * proxy- or AspectJ-based advice that weaves the interceptor into the call stack when\n   ..\n   85   *\n   86   * <p>If the JSR-107 API and Spring's JCache implementation are present, the necessary\n   87:  * components to manage standard cache annotations are also registered. This creates the\n   88   * proxy- or AspectJ-based advice that weaves the interceptor into the call stack when\n   89   * methods annotated with {@code CacheResult}, {@code CachePut}, {@code CacheRemove} or\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\cache\\config\\AnnotationDrivenCacheBeanDefinitionParser.java:\n   22  import org.springframework.beans.factory.config.BeanDefinition;\n   23  import org.springframework.beans.factory.config.RuntimeBeanReference;\n   24: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   25: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   26  import org.springframework.beans.factory.support.RootBeanDefinition;\n   27  import org.springframework.beans.factory.xml.BeanDefinitionParser;\n   ..\n  165  				parserContext.getRegistry().registerBeanDefinition(CacheManagementConfigUtils.CACHE_ADVISOR_BEAN_NAME, advisorDef);\n  166  \n  167: 				CompositeComponentDefinition compositeDef = new CompositeComponentDefinition(element.getTagName(), eleSource);\n  168: 				compositeDef.addNestedComponent(new BeanComponentDefinition(sourceDef, sourceName));\n  169: 				compositeDef.addNestedComponent(new BeanComponentDefinition(interceptorDef, interceptorName));\n  170: 				compositeDef.addNestedComponent(new BeanComponentDefinition(advisorDef, CacheManagementConfigUtils.CACHE_ADVISOR_BEAN_NAME));\n  171: 				parserContext.registerComponent(compositeDef);\n  172  			}\n  173  		}\n  ...\n  189  				parseCacheResolution(element, def, false);\n  190  				CacheNamespaceHandler.parseKeyGenerator(element, def);\n  191: 				parserContext.registerBeanComponent(new BeanComponentDefinition(def, CacheManagementConfigUtils.CACHE_ASPECT_BEAN_NAME));\n  192  			}\n  193  		}\n  ...\n  229  				parserContext.getRegistry().registerBeanDefinition(CacheManagementConfigUtils.JCACHE_ADVISOR_BEAN_NAME, advisorDef);\n  230  \n  231: 				CompositeComponentDefinition compositeDef = new CompositeComponentDefinition(element.getTagName(), eleSource);\n  232: 				compositeDef.addNestedComponent(new BeanComponentDefinition(sourceDef, sourceName));\n  233: 				compositeDef.addNestedComponent(new BeanComponentDefinition(interceptorDef, interceptorName));\n  234: 				compositeDef.addNestedComponent(new BeanComponentDefinition(advisorDef, CacheManagementConfigUtils.JCACHE_ADVISOR_BEAN_NAME));\n  235: 				parserContext.registerComponent(compositeDef);\n  236  			}\n  237  		}\n  ...\n  248  				def.getPropertyValues().add(\"cacheOperationSource\", new RuntimeBeanReference(sourceName));\n  249  \n  250: 				parserContext.registerBeanComponent(new BeanComponentDefinition(sourceDef, sourceName));\n  251: 				parserContext.registerBeanComponent(new BeanComponentDefinition(def, CacheManagementConfigUtils.JCACHE_ASPECT_BEAN_NAME));\n  252  			}\n  253  		}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\cache\\interceptor\\AbstractCacheInvoker.java:\n   21  \n   22  /**\n   23:  * A base component for invoking {@link Cache} operations and using a\n   24   * configurable {@link CacheErrorHandler} when an exception occurs.\n   25   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\cache\\interceptor\\CacheOperationExpressionEvaluator.java:\n   33  /**\n   34   * Utility class handling the SpEL expression parsing.\n   35:  * Meant to be used as a reusable, thread-safe component.\n   36   *\n   37   * <p>Performs internal caching for performance reasons\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\AnnotatedBeanDefinitionReader.java:\n   93  	/**\n   94  	 * Set the Environment to use when evaluating whether\n   95: 	 * {@link Conditional @Conditional}-annotated component classes should be registered.\n   96  	 * <p>The default is a {@link StandardEnvironment}.\n   97  	 * @see #registerBean(Class, String, Class...)\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\AnnotationBeanNameGenerator.java:\n   33   * {@link org.springframework.beans.factory.support.BeanNameGenerator}\n   34   * implementation for bean classes annotated with the\n   35:  * {@link org.springframework.stereotype.Component @Component} annotation\n   36   * or with another annotation that is itself annotated with\n   37:  * {@link org.springframework.stereotype.Component @Component} as a\n   38   * meta-annotation. For example, Spring's stereotype annotations (such as\n   39   * {@link org.springframework.stereotype.Repository @Repository}) are\n   40   * themselves annotated with\n   41:  * {@link org.springframework.stereotype.Component @Component}.\n   42   *\n   43   * <p>Also supports Java EE 6's {@link javax.annotation.ManagedBean} and\n   44   * JSR-330's {@link javax.inject.Named} annotations, if available. Note that\n   45:  * Spring component annotations always override such standard annotations.\n   46   *\n   47   * <p>If the annotation's value doesn't indicate a bean name, an appropriate\n   ..\n   54   * @author Mark Fisher\n   55   * @since 2.5\n   56:  * @see org.springframework.stereotype.Component#value()\n   57   * @see org.springframework.stereotype.Repository#value()\n   58   * @see org.springframework.stereotype.Service#value()\n   ..\n   62  public class AnnotationBeanNameGenerator implements BeanNameGenerator {\n   63  \n   64: 	private static final String COMPONENT_ANNOTATION_CLASSNAME = \"org.springframework.stereotype.Component\";\n   65  \n   66  \n   ..\n   96  						if (beanName != null && !strVal.equals(beanName)) {\n   97  							throw new IllegalStateException(\"Stereotype annotations suggest inconsistent \" +\n   98: 									\"component names: '\" + beanName + \"' versus '\" + strVal + \"'\");\n   99  						}\n  100  						beanName = strVal;\n  ...\n  108  	/**\n  109  	 * Check whether the given annotation is a stereotype that is allowed\n  110: 	 * to suggest a component name through its annotation {@code value()}.\n  111  	 * @param annotationType the name of the annotation class to check\n  112  	 * @param metaAnnotationTypes the names of meta-annotations on the given annotation\n  113  	 * @param attributes the map of attributes for the given annotation\n  114: 	 * @return whether the annotation qualifies as a stereotype with component name\n  115  	 */\n  116  	protected boolean isStereotypeWithNameValue(String annotationType,\n  117  			Set<String> metaAnnotationTypes, Map<String, Object> attributes) {\n  118  \n  119: 		boolean isStereotype = annotationType.equals(COMPONENT_ANNOTATION_CLASSNAME) ||\n  120: 				(metaAnnotationTypes != null && metaAnnotationTypes.contains(COMPONENT_ANNOTATION_CLASSNAME)) ||\n  121  				annotationType.equals(\"javax.annotation.ManagedBean\") ||\n  122  				annotationType.equals(\"javax.inject.Named\");\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\AnnotationConfigApplicationContext.java:\n   26   * Standalone application context, accepting annotated classes as input - in particular\n   27   * {@link Configuration @Configuration}-annotated classes, but also plain\n   28:  * {@link org.springframework.stereotype.Component @Component} types and JSR-330 compliant\n   29   * classes using {@code javax.inject} annotations. Allows for registering classes one by\n   30   * one using {@link #register(Class...)} as well as for classpath scanning using\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\AnnotationConfigBeanDefinitionParser.java:\n   23  import org.springframework.beans.factory.config.BeanDefinition;\n   24  import org.springframework.beans.factory.config.BeanDefinitionHolder;\n   25: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   26: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   27  import org.springframework.beans.factory.xml.BeanDefinitionParser;\n   28  import org.springframework.beans.factory.xml.ParserContext;\n   ..\n   47  				AnnotationConfigUtils.registerAnnotationConfigProcessors(parserContext.getRegistry(), source);\n   48  \n   49: 		// Register component for the surrounding <context:annotation-config> element.\n   50: 		CompositeComponentDefinition compDefinition = new CompositeComponentDefinition(element.getTagName(), source);\n   51: 		parserContext.pushContainingComponent(compDefinition);\n   52  \n   53: 		// Nest the concrete beans in the surrounding component.\n   54  		for (BeanDefinitionHolder processorDefinition : processorDefinitions) {\n   55: 			parserContext.registerComponent(new BeanComponentDefinition(processorDefinition));\n   56  		}\n   57  \n   58: 		// Finally register the composite component.\n   59: 		parserContext.popAndRegisterContainingComponent();\n   60  \n   61  		return null;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\AutoProxyRegistrar.java:\n   81  					\"AdviceMode and boolean respectively. This means that auto proxy \" +\n   82  					\"creator registration and configuration may not have occurred as \" +\n   83: 					\"intended, and components may not be proxied as expected. Check to \" +\n   84  					\"ensure that %s has been @Import'ed on the same class where these \" +\n   85  					\"annotations are declared; otherwise remove the import of %s \" +\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\Bean.java:\n  109   * <p>{@code @Bean} methods may also be declared within classes that are <em>not</em>\n  110   * annotated with {@code @Configuration}. For example, bean methods may be declared\n  111:  * in a {@code @Component} class or even in a <em>plain old class</em>. In such cases,\n  112   * a {@code @Bean} method will get processed in a so-called <em>'lite'</em> mode.\n  113   *\n  ...\n  129   *\n  130   * <pre class=\"code\">\n  131:  * &#064;Component\n  132   * public class Calculator {\n  133   *     public int sum(int a, int b) {\n  ...\n  181   * @see Lazy\n  182   * @see Primary\n  183:  * @see org.springframework.stereotype.Component\n  184   * @see org.springframework.beans.factory.annotation.Autowired\n  185   * @see org.springframework.beans.factory.annotation.Value\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\ClassPathBeanDefinitionScanner.java:\n   42   * <p>Candidate classes are detected through configurable type filters. The\n   43   * default filters include classes that are annotated with Spring's\n   44:  * {@link org.springframework.stereotype.Component @Component},\n   45   * {@link org.springframework.stereotype.Repository @Repository},\n   46   * {@link org.springframework.stereotype.Service @Service}, or\n   ..\n   55   * @since 2.5\n   56   * @see AnnotationConfigApplicationContext#scan\n   57:  * @see org.springframework.stereotype.Component\n   58   * @see org.springframework.stereotype.Repository\n   59   * @see org.springframework.stereotype.Service\n   60   * @see org.springframework.stereotype.Controller\n   61   */\n   62: public class ClassPathBeanDefinitionScanner extends ClassPathScanningCandidateComponentProvider {\n   63  \n   64  	private final BeanDefinitionRegistry registry;\n   ..\n  101  	 * of a {@code BeanDefinitionRegistry}\n  102  	 * @param useDefaultFilters whether to include the default filters for the\n  103: 	 * {@link org.springframework.stereotype.Component @Component},\n  104  	 * {@link org.springframework.stereotype.Repository @Repository},\n  105  	 * {@link org.springframework.stereotype.Service @Service}, and\n  ...\n  124  	 * of a {@code BeanDefinitionRegistry}\n  125  	 * @param useDefaultFilters whether to include the default filters for the\n  126: 	 * {@link org.springframework.stereotype.Component @Component},\n  127  	 * {@link org.springframework.stereotype.Repository @Repository},\n  128  	 * {@link org.springframework.stereotype.Service @Service}, and\n  ...\n  246  		Set<BeanDefinitionHolder> beanDefinitions = new LinkedHashSet<>();\n  247  		for (String basePackage : basePackages) {\n  248: 			Set<BeanDefinition> candidates = findCandidateComponents(basePackage);\n  249  			for (BeanDefinition candidate : candidates) {\n  250  				ScopeMetadata scopeMetadata = this.scopeMetadataResolver.resolveScopeMetadata(candidate);\n  ...\n  270  	/**\n  271  	 * Apply further settings to the given bean definition,\n  272: 	 * beyond the contents retrieved from scanning the component class.\n  273  	 * @param beanDefinition the scanned bean definition\n  274  	 * @param beanName the generated bean name for the given bean\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\ClassPathScanningCandidateComponentProvider.java:\n   34  import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n   35  import org.springframework.context.ResourceLoaderAware;\n   36: import org.springframework.context.index.CandidateComponentsIndex;\n   37: import org.springframework.context.index.CandidateComponentsIndexLoader;\n   38  import org.springframework.core.annotation.AnnotationUtils;\n   39  import org.springframework.core.env.Environment;\n   ..\n   51  import org.springframework.core.type.filter.AssignableTypeFilter;\n   52  import org.springframework.core.type.filter.TypeFilter;\n   53: import org.springframework.stereotype.Component;\n   54  import org.springframework.stereotype.Controller;\n   55  import org.springframework.stereotype.Indexed;\n   ..\n   60  \n   61  /**\n   62:  * A component provider that provides candidate components from a base package. Can\n   63:  * use {@link CandidateComponentsIndex the index} if it is available of scans the\n   64:  * classpath otherwise. Candidate components are identified by applying exclude and\n   65   * include filters. {@link AnnotationTypeFilter}, {@link AssignableTypeFilter} include\n   66   * filters on an annotation/super-class that are annotated with {@link Indexed} are\n   ..\n   81   * @see org.springframework.core.type.AnnotationMetadata\n   82   * @see ScannedGenericBeanDefinition\n   83:  * @see CandidateComponentsIndex\n   84   */\n   85: public class ClassPathScanningCandidateComponentProvider implements EnvironmentCapable, ResourceLoaderAware {\n   86  \n   87  	static final String DEFAULT_RESOURCE_PATTERN = \"**/*.class\";\n   ..\n   96  			new CachingMetadataReaderFactory(this.resourcePatternResolver);\n   97  \n   98: 	private CandidateComponentsIndex componentsIndex;\n   99  \n  100  	private String resourcePattern = DEFAULT_RESOURCE_PATTERN;\n  ...\n  108  \n  109  	/**\n  110: 	 * Create a ClassPathScanningCandidateComponentProvider with a {@link StandardEnvironment}.\n  111  	 * @param useDefaultFilters whether to register the default filters for the\n  112: 	 * {@link Component @Component}, {@link Repository @Repository},\n  113  	 * {@link Service @Service}, and {@link Controller @Controller}\n  114  	 * stereotype annotations\n  115  	 * @see #registerDefaultFilters()\n  116  	 */\n  117: 	public ClassPathScanningCandidateComponentProvider(boolean useDefaultFilters) {\n  118  		this(useDefaultFilters, new StandardEnvironment());\n  119  	}\n  120  \n  121  	/**\n  122: 	 * Create a ClassPathScanningCandidateComponentProvider with the given {@link Environment}.\n  123  	 * @param useDefaultFilters whether to register the default filters for the\n  124: 	 * {@link Component @Component}, {@link Repository @Repository},\n  125  	 * {@link Service @Service}, and {@link Controller @Controller}\n  126  	 * stereotype annotations\n  ...\n  128  	 * @see #registerDefaultFilters()\n  129  	 */\n  130: 	public ClassPathScanningCandidateComponentProvider(boolean useDefaultFilters, Environment environment) {\n  131  		if (useDefaultFilters) {\n  132  			registerDefaultFilters();\n  ...\n  149  		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader);\n  150  		this.metadataReaderFactory = new CachingMetadataReaderFactory(resourceLoader);\n  151: 		this.componentsIndex = CandidateComponentsIndexLoader.loadIndex(resourceLoader.getClassLoader());\n  152  	}\n  153  \n  154  	/**\n  155: 	 * Return the ResourceLoader that this component provider uses.\n  156  	 */\n  157  	public final ResourceLoader getResourceLoader() {\n  ...\n  171  \n  172  	/**\n  173: 	 * Return the MetadataReaderFactory used by this component provider.\n  174  	 */\n  175  	public final MetadataReaderFactory getMetadataReaderFactory() {\n  ...\n  179  	/**\n  180  	 * Set the Environment to use when resolving placeholders and evaluating\n  181: 	 * {@link Conditional @Conditional}-annotated component classes.\n  182  	 * <p>The default is a {@link StandardEnvironment}.\n  183  	 * @param environment the Environment to use\n  ...\n  204  	 * Set the resource pattern to use when scanning the classpath.\n  205  	 * This value will be appended to each base package name.\n  206: 	 * @see #findCandidateComponents(String)\n  207  	 * @see #DEFAULT_RESOURCE_PATTERN\n  208  	 */\n  ...\n  229  	 * Reset the configured type filters.\n  230  	 * @param useDefaultFilters whether to re-register the default filters for\n  231: 	 * the {@link Component @Component}, {@link Repository @Repository},\n  232  	 * {@link Service @Service}, and {@link Controller @Controller}\n  233  	 * stereotype annotations\n  ...\n  243  \n  244  	/**\n  245: 	 * Register the default filter for {@link Component @Component}.\n  246  	 * <p>This will implicitly register all annotations that have the\n  247: 	 * {@link Component @Component} meta-annotation including the\n  248  	 * {@link Repository @Repository}, {@link Service @Service}, and\n  249  	 * {@link Controller @Controller} stereotype annotations.\n  ...\n  254  	@SuppressWarnings(\"unchecked\")\n  255  	protected void registerDefaultFilters() {\n  256: 		this.includeFilters.add(new AnnotationTypeFilter(Component.class));\n  257: 		ClassLoader cl = ClassPathScanningCandidateComponentProvider.class.getClassLoader();\n  258  		try {\n  259  			this.includeFilters.add(new AnnotationTypeFilter(\n  260  					((Class<? extends Annotation>) ClassUtils.forName(\"javax.annotation.ManagedBean\", cl)), false));\n  261: 			logger.debug(\"JSR-250 'javax.annotation.ManagedBean' found and supported for component scanning\");\n  262  		}\n  263  		catch (ClassNotFoundException ex) {\n  ...\n  267  			this.includeFilters.add(new AnnotationTypeFilter(\n  268  					((Class<? extends Annotation>) ClassUtils.forName(\"javax.inject.Named\", cl)), false));\n  269: 			logger.debug(\"JSR-330 'javax.inject.Named' annotation found and supported for component scanning\");\n  270  		}\n  271  		catch (ClassNotFoundException ex) {\n  ...\n  276  \n  277  	/**\n  278: 	 * Scan the class path for candidate components.\n  279  	 * @param basePackage the package to check for annotated classes\n  280  	 * @return a corresponding Set of autodetected bean definitions\n  281  	 */\n  282: 	public Set<BeanDefinition> findCandidateComponents(String basePackage) {\n  283  		if (isIndexSupported()) {\n  284: 			return addCandidateComponentsFromIndex(basePackage);\n  285  		}\n  286  		else {\n  287: 			return scanCandidateComponents(basePackage);\n  288  		}\n  289  	}\n  290  \n  291: 	protected Set<BeanDefinition> addCandidateComponentsFromIndex(String basePackage) {\n  292  		Set<BeanDefinition> candidates = new LinkedHashSet<>();\n  293  		try {\n  ...\n  298  					throw new IllegalArgumentException(\"Failed to extract stereotype from \"+ filter);\n  299  				}\n  300: 				types.addAll(this.componentsIndex.getCandidateTypes(basePackage, stereotype));\n  301  			}\n  302  			boolean traceEnabled = logger.isTraceEnabled();\n  ...\n  304  			for (String type : types) {\n  305  				MetadataReader metadataReader = this.metadataReaderFactory.getMetadataReader(type);\n  306: 				if (isCandidateComponent(metadataReader)) {\n  307  					AnnotatedGenericBeanDefinition sbd = new AnnotatedGenericBeanDefinition(\n  308  							metadataReader.getAnnotationMetadata());\n  309: 					if (isCandidateComponent(sbd)) {\n  310  						if (debugEnabled) {\n  311: 							logger.debug(\"Using candidate component class from index: \" + type);\n  312  						}\n  313  						candidates.add(sbd);\n  ...\n  332  	}\n  333  \n  334: 	protected Set<BeanDefinition> scanCandidateComponents(String basePackage) {\n  335  		Set<BeanDefinition> candidates = new LinkedHashSet<>();\n  336  		try {\n  ...\n  347  					try {\n  348  						MetadataReader metadataReader = this.metadataReaderFactory.getMetadataReader(resource);\n  349: 						if (isCandidateComponent(metadataReader)) {\n  350  							ScannedGenericBeanDefinition sbd = new ScannedGenericBeanDefinition(metadataReader);\n  351  							sbd.setResource(resource);\n  352  							sbd.setSource(resource);\n  353: 							if (isCandidateComponent(sbd)) {\n  354  								if (debugEnabled) {\n  355: 									logger.debug(\"Identified candidate component class: \" + resource);\n  356  								}\n  357  								candidates.add(sbd);\n  ...\n  371  					catch (Throwable ex) {\n  372  						throw new BeanDefinitionStoreException(\n  373: 								\"Failed to read candidate component class: \" + resource, ex);\n  374  					}\n  375  				}\n  ...\n  404  	 * and does match at least one include filter.\n  405  	 * @param metadataReader the ASM ClassReader for the class\n  406: 	 * @return whether the class qualifies as a candidate component\n  407  	 */\n  408: 	protected boolean isCandidateComponent(MetadataReader metadataReader) throws IOException {\n  409  		for (TypeFilter tf : this.excludeFilters) {\n  410  			if (tf.match(metadataReader, this.metadataReaderFactory)) {\n  ...\n  421  \n  422  	/**\n  423: 	 * Determine whether the given class is a candidate component based on any\n  424  	 * {@code @Conditional} annotations.\n  425  	 * @param metadataReader the ASM ClassReader for the class\n  426: 	 * @return whether the class qualifies as a candidate component\n  427  	 */\n  428  	private boolean isConditionMatch(MetadataReader metadataReader) {\n  ...\n  438  	 * (i.e. not abstract and not an interface). Can be overridden in subclasses.\n  439  	 * @param beanDefinition the bean definition to check\n  440: 	 * @return whether the bean definition qualifies as a candidate component\n  441  	 */\n  442: 	protected boolean isCandidateComponent(AnnotatedBeanDefinition beanDefinition) {\n  443  		return (beanDefinition.getMetadata().isConcrete() && beanDefinition.getMetadata().isIndependent());\n  444  	}\n  ...\n  450  	 */\n  451  	protected boolean isIndexSupported() {\n  452: 		if (this.componentsIndex == null) {\n  453  			return false;\n  454  		}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\CommonAnnotationBeanPostProcessor.java:\n  125   *\n  126   * <p><b>NOTE:</b> A default CommonAnnotationBeanPostProcessor will be registered\n  127:  * by the \"context:annotation-config\" and \"context:component-scan\" XML tags.\n  128   * Remove or turn off the default annotation configuration there if you intend\n  129   * to specify a custom CommonAnnotationBeanPostProcessor bean definition!\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\ComponentScan.java:\n   29  \n   30  /**\n   31:  * Configures component scanning directives for use with @{@link Configuration} classes.\n   32:  * Provides support parallel with Spring XML's {@code <context:component-scan>} element.\n   33   *\n   34   * <p>Either {@link #basePackageClasses} or {@link #basePackages} (or its alias\n   ..\n   37   * class that declares this annotation.\n   38   *\n   39:  * <p>Note that the {@code <context:component-scan>} element has an\n   40   * {@code annotation-config} attribute; however, this annotation does not. This is because\n   41:  * in almost all cases when using {@code @ComponentScan}, default annotation config\n   42   * processing (e.g. processing {@code @Autowired} and friends) is assumed. Furthermore,\n   43   * when using {@link AnnotationConfigApplicationContext}, annotation config processors are\n   44   * always registered, meaning that any attempt to disable them at the\n   45:  * {@code @ComponentScan} level would be ignored.\n   46   *\n   47   * <p>See {@link Configuration @Configuration}'s Javadoc for usage examples.\n   ..\n   56  @Target(ElementType.TYPE)\n   57  @Documented\n   58: @Repeatable(ComponentScans.class)\n   59: public @interface ComponentScan {\n   60  \n   61  	/**\n   62  	 * Alias for {@link #basePackages}.\n   63  	 * <p>Allows for more concise annotation declarations if no other attributes\n   64: 	 * are needed &mdash; for example, {@code @ComponentScan(\"org.my.pkg\")}\n   65: 	 * instead of {@code @ComponentScan(basePackages = \"org.my.pkg\")}.\n   66  	 */\n   67  	@AliasFor(\"basePackages\")\n   ..\n   69  \n   70  	/**\n   71: 	 * Base packages to scan for annotated components.\n   72  	 * <p>{@link #value} is an alias for (and mutually exclusive with) this\n   73  	 * attribute.\n   ..\n   80  	/**\n   81  	 * Type-safe alternative to {@link #basePackages} for specifying the packages\n   82: 	 * to scan for annotated components. The package of each class specified will be scanned.\n   83  	 * <p>Consider creating a special no-op marker class or interface in each package\n   84  	 * that serves no purpose other than being referenced by this attribute.\n   ..\n   87  \n   88  	/**\n   89: 	 * The {@link BeanNameGenerator} class to be used for naming detected components\n   90  	 * within the Spring container.\n   91  	 * <p>The default value of the {@link BeanNameGenerator} interface itself indicates\n   92: 	 * that the scanner used to process this {@code @ComponentScan} annotation should\n   93  	 * use its inherited bean name generator, e.g. the default\n   94  	 * {@link AnnotationBeanNameGenerator} or any custom instance supplied to the\n   ..\n   99  \n  100  	/**\n  101: 	 * The {@link ScopeMetadataResolver} to be used for resolving the scope of detected components.\n  102  	 */\n  103  	Class<? extends ScopeMetadataResolver> scopeResolver() default AnnotationScopeMetadataResolver.class;\n  104  \n  105  	/**\n  106: 	 * Indicates whether proxies should be generated for detected components, which may be\n  107  	 * necessary when using scopes in a proxy-style fashion.\n  108: 	 * <p>The default is defer to the default behavior of the component scanner used to\n  109  	 * execute the actual scan.\n  110  	 * <p>Note that setting this attribute overrides any value set for {@link #scopeResolver}.\n  ...\n  114  \n  115  	/**\n  116: 	 * Controls the class files eligible for component detection.\n  117  	 * <p>Consider use of {@link #includeFilters} and {@link #excludeFilters}\n  118  	 * for a more flexible approach.\n  119  	 */\n  120: 	String resourcePattern() default ClassPathScanningCandidateComponentProvider.DEFAULT_RESOURCE_PATTERN;\n  121  \n  122  	/**\n  123: 	 * Indicates whether automatic detection of classes annotated with {@code @Component}\n  124  	 * {@code @Repository}, {@code @Service}, or {@code @Controller} should be enabled.\n  125  	 */\n  ...\n  127  \n  128  	/**\n  129: 	 * Specifies which types are eligible for component scanning.\n  130: 	 * <p>Further narrows the set of candidate components from everything in {@link #basePackages}\n  131  	 * to everything in the base packages that matches the given filter or filters.\n  132  	 * <p>Note that these filters will be applied in addition to the default filters, if specified.\n  133  	 * Any type under the specified base packages which matches a given filter will be included,\n  134: 	 * even if it does not match the default filters (i.e. is not annotated with {@code @Component}).\n  135  	 * @see #resourcePattern()\n  136  	 * @see #useDefaultFilters()\n  ...\n  139  \n  140  	/**\n  141: 	 * Specifies which types are not eligible for component scanning.\n  142  	 * @see #resourcePattern\n  143  	 */\n  ...\n  153  \n  154  	/**\n  155: 	 * Declares the type filter to be used as an {@linkplain ComponentScan#includeFilters\n  156: 	 * include filter} or {@linkplain ComponentScan#excludeFilters exclude filter}.\n  157  	 */\n  158  	@Retention(RetentionPolicy.RUNTIME)\n  ...\n  184  		 * <td>the annotation itself</td></tr>\n  185  		 * <tr><td>{@link FilterType#ASSIGNABLE_TYPE ASSIGNABLE_TYPE}</td>\n  186: 		 * <td>the type that detected components should be assignable to</td></tr>\n  187  		 * <tr><td>{@link FilterType#CUSTOM CUSTOM}</td>\n  188  		 * <td>an implementation of {@link TypeFilter}</td></tr>\n  ...\n  199  		 * <li>{@link org.springframework.context.ResourceLoaderAware ResourceLoaderAware}\n  200  		 * </ul>\n  201: 		 * <p>Specifying zero classes is permitted but will have no effect on component\n  202  		 * scanning.\n  203  		 * @since 4.2\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\ComponentScanAnnotationParser.java:\n   51  \n   52  /**\n   53:  * Parser for the @{@link ComponentScan} annotation.\n   54   *\n   55   * @author Chris Beams\n   ..\n   58   * @since 3.1\n   59   * @see ClassPathBeanDefinitionScanner#scan(String...)\n   60:  * @see ComponentScanBeanDefinitionParser\n   61   */\n   62: class ComponentScanAnnotationParser {\n   63  \n   64  	private final ResourceLoader resourceLoader;\n   ..\n   71  \n   72  \n   73: 	public ComponentScanAnnotationParser(ResourceLoader resourceLoader, Environment environment,\n   74  			BeanNameGenerator beanNameGenerator, BeanDefinitionRegistry registry) {\n   75  \n   ..\n   81  \n   82  \n   83: 	public Set<BeanDefinitionHolder> parse(AnnotationAttributes componentScan, final String declaringClass) {\n   84  		Assert.state(this.environment != null, \"Environment must not be null\");\n   85  		Assert.state(this.resourceLoader != null, \"ResourceLoader must not be null\");\n   86  \n   87  		ClassPathBeanDefinitionScanner scanner =\n   88: 				new ClassPathBeanDefinitionScanner(this.registry, componentScan.getBoolean(\"useDefaultFilters\"));\n   89  		scanner.setEnvironment(this.environment);\n   90  		scanner.setResourceLoader(this.resourceLoader);\n   91  \n   92: 		Class<? extends BeanNameGenerator> generatorClass = componentScan.getClass(\"nameGenerator\");\n   93  		boolean useInheritedGenerator = BeanNameGenerator.class == generatorClass;\n   94  		scanner.setBeanNameGenerator(useInheritedGenerator ? this.beanNameGenerator :\n   95  				BeanUtils.instantiateClass(generatorClass));\n   96  \n   97: 		ScopedProxyMode scopedProxyMode = componentScan.getEnum(\"scopedProxy\");\n   98  		if (scopedProxyMode != ScopedProxyMode.DEFAULT) {\n   99  			scanner.setScopedProxyMode(scopedProxyMode);\n  100  		}\n  101  		else {\n  102: 			Class<? extends ScopeMetadataResolver> resolverClass = componentScan.getClass(\"scopeResolver\");\n  103  			scanner.setScopeMetadataResolver(BeanUtils.instantiateClass(resolverClass));\n  104  		}\n  105  \n  106: 		scanner.setResourcePattern(componentScan.getString(\"resourcePattern\"));\n  107  \n  108: 		for (AnnotationAttributes filter : componentScan.getAnnotationArray(\"includeFilters\")) {\n  109  			for (TypeFilter typeFilter : typeFiltersFor(filter)) {\n  110  				scanner.addIncludeFilter(typeFilter);\n  111  			}\n  112  		}\n  113: 		for (AnnotationAttributes filter : componentScan.getAnnotationArray(\"excludeFilters\")) {\n  114  			for (TypeFilter typeFilter : typeFiltersFor(filter)) {\n  115  				scanner.addExcludeFilter(typeFilter);\n  ...\n  117  		}\n  118  \n  119: 		boolean lazyInit = componentScan.getBoolean(\"lazyInit\");\n  120  		if (lazyInit) {\n  121  			scanner.getBeanDefinitionDefaults().setLazyInit(true);\n  ...\n  123  \n  124  		Set<String> basePackages = new LinkedHashSet<>();\n  125: 		String[] basePackagesArray = componentScan.getStringArray(\"basePackages\");\n  126  		for (String pkg : basePackagesArray) {\n  127  			String[] tokenized = StringUtils.tokenizeToStringArray(this.environment.resolvePlaceholders(pkg),\n  ...\n  129  			basePackages.addAll(Arrays.asList(tokenized));\n  130  		}\n  131: 		for (Class<?> clazz : componentScan.getClassArray(\"basePackageClasses\")) {\n  132  			basePackages.add(ClassUtils.getPackageName(clazz));\n  133  		}\n  ...\n  153  				case ANNOTATION:\n  154  					Assert.isAssignable(Annotation.class, filterClass,\n  155: 							\"An error occurred while processing a @ComponentScan ANNOTATION type filter: \");\n  156  					@SuppressWarnings(\"unchecked\")\n  157  					Class<Annotation> annotationType = (Class<Annotation>) filterClass;\n  ...\n  163  				case CUSTOM:\n  164  					Assert.isAssignable(TypeFilter.class, filterClass,\n  165: 							\"An error occurred while processing a @ComponentScan CUSTOM type filter: \");\n  166  					TypeFilter filter = BeanUtils.instantiateClass(filterClass, TypeFilter.class);\n  167  					invokeAwareMethods(filter);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\ComponentScanBeanDefinitionParser.java:\n   29  import org.springframework.beans.factory.config.BeanDefinition;\n   30  import org.springframework.beans.factory.config.BeanDefinitionHolder;\n   31: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   32: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   33  import org.springframework.beans.factory.support.BeanNameGenerator;\n   34  import org.springframework.beans.factory.xml.BeanDefinitionParser;\n   ..\n   45  \n   46  /**\n   47:  * Parser for the {@code <context:component-scan/>} element.\n   48   *\n   49   * @author Mark Fisher\n   ..\n   52   * @since 2.5\n   53   */\n   54: public class ComponentScanBeanDefinitionParser implements BeanDefinitionParser {\n   55  \n   56  	private static final String BASE_PACKAGE_ATTRIBUTE = \"base-package\";\n   ..\n   87  		ClassPathBeanDefinitionScanner scanner = configureScanner(parserContext, element);\n   88  		Set<BeanDefinitionHolder> beanDefinitions = scanner.doScan(basePackages);\n   89: 		registerComponents(parserContext.getReaderContext(), beanDefinitions, element);\n   90  \n   91  		return null;\n   ..\n  132  	}\n  133  \n  134: 	protected void registerComponents(\n  135  			XmlReaderContext readerContext, Set<BeanDefinitionHolder> beanDefinitions, Element element) {\n  136  \n  137  		Object source = readerContext.extractSource(element);\n  138: 		CompositeComponentDefinition compositeDef = new CompositeComponentDefinition(element.getTagName(), source);\n  139  \n  140  		for (BeanDefinitionHolder beanDefHolder : beanDefinitions) {\n  141: 			compositeDef.addNestedComponent(new BeanComponentDefinition(beanDefHolder));\n  142  		}\n  143  \n  ...\n  151  					AnnotationConfigUtils.registerAnnotationConfigProcessors(readerContext.getRegistry(), source);\n  152  			for (BeanDefinitionHolder processorDefinition : processorDefinitions) {\n  153: 				compositeDef.addNestedComponent(new BeanComponentDefinition(processorDefinition));\n  154  			}\n  155  		}\n  156  \n  157: 		readerContext.fireComponentRegistered(compositeDef);\n  158  	}\n  159  \n  ...\n  172  			if (element.hasAttribute(SCOPED_PROXY_ATTRIBUTE)) {\n  173  				throw new IllegalArgumentException(\n  174: 						\"Cannot define both 'scope-resolver' and 'scoped-proxy' on <component-scan> tag\");\n  175  			}\n  176  			ScopeMetadataResolver scopeMetadataResolver = (ScopeMetadataResolver) instantiateUserDefinedStrategy(\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\ComponentScans.java:\n   24  \n   25  /**\n   26:  * Container annotation that aggregates several {@link ComponentScan} annotations.\n   27   *\n   28:  * <p>Can be used natively, declaring several nested {@link ComponentScan} annotations.\n   29   * Can also be used in conjunction with Java 8's support for repeatable annotations,\n   30:  * where {@link ComponentScan} can simply be declared several times on the same method,\n   31   * implicitly generating this container annotation.\n   32   *\n   33   * @author Juergen Hoeller\n   34   * @since 4.3\n   35:  * @see ComponentScan\n   36   */\n   37  @Retention(RetentionPolicy.RUNTIME)\n   38  @Target(ElementType.TYPE)\n   39  @Documented\n   40: public @interface ComponentScans {\n   41  \n   42: 	ComponentScan[] value();\n   43  \n   44  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\Condition.java:\n   22  /**\n   23   * A single {@code condition} that must be {@linkplain #matches matched} in order\n   24:  * for a component to be registered.\n   25   *\n   26   * <p>Conditions are checked immediately before the bean-definition is due to be\n   ..\n   47  	 * @param metadata metadata of the {@link org.springframework.core.type.AnnotationMetadata class}\n   48  	 * or {@link org.springframework.core.type.MethodMetadata method} being checked.\n   49: 	 * @return {@code true} if the condition matches and the component can be registered\n   50  	 * or {@code false} to veto registration.\n   51  	 */\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\Conditional.java:\n   23  \n   24  /**\n   25:  * Indicates that a component is only eligible for registration when all\n   26   * {@linkplain #value specified conditions} match.\n   27   *\n   ..\n   32   * <ul>\n   33   * <li>as a type-level annotation on any class directly or indirectly annotated with\n   34:  * {@code @Component}, including {@link Configuration @Configuration} classes</li>\n   35   * <li>as a meta-annotation, for the purpose of composing custom stereotype\n   36   * annotations</li>\n   ..\n   40   * <p>If a {@code @Configuration} class is marked with {@code @Conditional},\n   41   * all of the {@code @Bean} methods, {@link Import @Import} annotations, and\n   42:  * {@link ComponentScan @ComponentScan} annotations associated with that\n   43   * class will be subject to the conditions.\n   44   *\n   ..\n   62  	/**\n   63  	 * All {@link Condition}s that must {@linkplain Condition#matches match}\n   64: 	 * in order for the component to be registered.\n   65  	 */\n   66  	Class<? extends Condition>[] value();\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\Configuration.java:\n   25  import org.springframework.beans.factory.annotation.Autowired;\n   26  import org.springframework.beans.factory.annotation.Value;\n   27: import org.springframework.stereotype.Component;\n   28  \n   29  /**\n   ..\n   79   * post processors that facilitate handling {@code @Configuration} classes.\n   80   *\n   81:  * <h3>Via component scanning</h3>\n   82   *\n   83:  * <p>{@code @Configuration} is meta-annotated with {@link Component @Component}, therefore\n   84:  * {@code @Configuration} classes are candidates for component scanning (typically using\n   85:  * Spring XML's {@code <context:component-scan/>} element) and therefore may also take\n   86   * advantage of {@link Autowired @Autowired}/{@link javax.inject.Inject @Inject}\n   87:  * like any regular {@code @Component}. In particular, if a single constructor is present\n   88   * autowiring semantics will be applied transparently:\n   89   *\n   ..\n  102   *\n  103   * <p>{@code @Configuration} classes may not only be bootstrapped using\n  104:  * component scanning, but may also themselves <em>configure</em> component scanning using\n  105:  * the {@link ComponentScan @ComponentScan} annotation:\n  106   *\n  107   * <pre class=\"code\">\n  108   * &#064;Configuration\n  109:  * &#064;ComponentScan(\"com.acme.app.services\")\n  110   * public class AppConfig {\n  111   *     // various &#064;Bean definitions ...\n  112   * }</pre>\n  113   *\n  114:  * See the {@link ComponentScan @ComponentScan} javadoc for details.\n  115   *\n  116   * <h2>Working with externalized values</h2>\n  ...\n  370   * @see Import\n  371   * @see ImportResource\n  372:  * @see ComponentScan\n  373   * @see Lazy\n  374   * @see PropertySource\n  ...\n  381  @Retention(RetentionPolicy.RUNTIME)\n  382  @Documented\n  383: @Component\n  384  public @interface Configuration {\n  385  \n  ...\n  389  	 * a bean name will be automatically generated.\n  390  	 * <p>The custom name applies only if the Configuration class is picked up via\n  391: 	 * component scanning or supplied directly to a {@link AnnotationConfigApplicationContext}.\n  392  	 * If the Configuration class is registered as a traditional XML bean definition,\n  393  	 * the name/id of the bean element will take precedence.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\ConfigurationClassBeanDefinitionReader.java:\n  276  		}\n  277  \n  278: 		// A bean definition resulting from a component scan can be silently overridden\n  279  		// by an @Bean method, as of 4.2...\n  280  		if (existingBeanDef instanceof ScannedGenericBeanDefinition) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\ConfigurationClassParser.java:\n   91   * <p>This class helps separate the concern of parsing the structure of a Configuration\n   92   * class from the concern of registering BeanDefinition objects based on the\n   93:  * content of that model (with the exception of {@code @ComponentScan} annotations which\n   94   * need to be registered immediately).\n   95   *\n   ..\n  129  	private final BeanDefinitionRegistry registry;\n  130  \n  131: 	private final ComponentScanAnnotationParser componentScanParser;\n  132  \n  133  	private final ConditionEvaluator conditionEvaluator;\n  ...\n  151  	public ConfigurationClassParser(MetadataReaderFactory metadataReaderFactory,\n  152  			ProblemReporter problemReporter, Environment environment, ResourceLoader resourceLoader,\n  153: 			BeanNameGenerator componentScanBeanNameGenerator, BeanDefinitionRegistry registry) {\n  154  \n  155  		this.metadataReaderFactory = metadataReaderFactory;\n  ...\n  158  		this.resourceLoader = resourceLoader;\n  159  		this.registry = registry;\n  160: 		this.componentScanParser = new ComponentScanAnnotationParser(\n  161: 				resourceLoader, environment, componentScanBeanNameGenerator, registry);\n  162  		this.conditionEvaluator = new ConditionEvaluator(registry, environment, resourceLoader);\n  163  	}\n  ...\n  266  		}\n  267  \n  268: 		// Process any @ComponentScan annotations\n  269: 		Set<AnnotationAttributes> componentScans = AnnotationConfigUtils.attributesForRepeatable(\n  270: 				sourceClass.getMetadata(), ComponentScans.class, ComponentScan.class);\n  271: 		if (!componentScans.isEmpty() && !this.conditionEvaluator.shouldSkip(sourceClass.getMetadata(), ConfigurationPhase.REGISTER_BEAN)) {\n  272: 			for (AnnotationAttributes componentScan : componentScans) {\n  273: 				// The config class is annotated with @ComponentScan -> perform the scan immediately\n  274  				Set<BeanDefinitionHolder> scannedBeanDefinitions =\n  275: 						this.componentScanParser.parse(componentScan, sourceClass.getMetadata().getClassName());\n  276  				// Check the set of scanned definitions for any further config classes and parse recursively if necessary\n  277  				for (BeanDefinitionHolder holder : scannedBeanDefinitions) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\ConfigurationClassPostProcessor.java:\n   76   *\n   77   * <p>Registered by default when using {@code <context:annotation-config/>} or\n   78:  * {@code <context:component-scan/>}. Otherwise, may be declared manually as\n   79   * with any other BeanFactoryPostProcessor.\n   80   *\n   ..\n  127  \n  128  	/* using short class names as default bean names */\n  129: 	private BeanNameGenerator componentScanBeanNameGenerator = new AnnotationBeanNameGenerator();\n  130  \n  131  	/* using fully qualified class names as default bean names */\n  ...\n  173  \n  174  	/**\n  175: 	 * Set the {@link BeanNameGenerator} to be used when triggering component scanning\n  176  	 * from {@link Configuration} classes and when registering {@link Import}'ed\n  177  	 * configuration classes. The default is a standard {@link AnnotationBeanNameGenerator}\n  178: 	 * for scanned components (compatible with the default in {@link ClassPathBeanDefinitionScanner})\n  179  	 * and a variant thereof for imported configuration classes (using unique fully-qualified\n  180: 	 * class names instead of standard component overriding).\n  181  	 * <p>Note that this strategy does <em>not</em> apply to {@link Bean} methods.\n  182  	 * <p>This setter is typically only appropriate when configuring the post-processor as\n  ...\n  192  		Assert.notNull(beanNameGenerator, \"BeanNameGenerator must not be null\");\n  193  		this.localBeanNameGeneratorSet = true;\n  194: 		this.componentScanBeanNameGenerator = beanNameGenerator;\n  195  		this.importBeanNameGenerator = beanNameGenerator;\n  196  	}\n  ...\n  306  			if (!this.localBeanNameGeneratorSet && singletonRegistry.containsSingleton(CONFIGURATION_BEAN_NAME_GENERATOR)) {\n  307  				BeanNameGenerator generator = (BeanNameGenerator) singletonRegistry.getSingleton(CONFIGURATION_BEAN_NAME_GENERATOR);\n  308: 				this.componentScanBeanNameGenerator = generator;\n  309  				this.importBeanNameGenerator = generator;\n  310  			}\n  ...\n  314  		ConfigurationClassParser parser = new ConfigurationClassParser(\n  315  				this.metadataReaderFactory, this.problemReporter, this.environment,\n  316: 				this.resourceLoader, this.componentScanBeanNameGenerator, registry);\n  317  \n  318  		Set<BeanDefinitionHolder> candidates = new LinkedHashSet<>(configCandidates);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\ConfigurationClassUtils.java:\n   36  import org.springframework.core.type.classreading.MetadataReader;\n   37  import org.springframework.core.type.classreading.MetadataReaderFactory;\n   38: import org.springframework.stereotype.Component;\n   39  \n   40  /**\n   ..\n   63  \n   64  	static {\n   65: 		candidateIndicators.add(Component.class.getName());\n   66: 		candidateIndicators.add(ComponentScan.class.getName());\n   67  		candidateIndicators.add(Import.class.getName());\n   68  		candidateIndicators.add(ImportResource.class.getName());\n   ..\n   72  	/**\n   73  	 * Check whether the given bean definition is a candidate for a configuration class\n   74: 	 * (or a nested component class declared within a configuration/component class,\n   75  	 * to be auto-registered as well), and mark it accordingly.\n   76  	 * @param beanDef the bean definition to check\n   ..\n  130  	/**\n  131  	 * Check the given metadata for a configuration class candidate\n  132: 	 * (or nested component class declared within a configuration/component class).\n  133  	 * @param metadata the metadata of the annotated class\n  134  	 * @return {@code true} if the given class is to be registered as a\n  ...\n  152  	/**\n  153  	 * Check the given metadata for a lite configuration class candidate\n  154: 	 * (e.g. a class annotated with {@code @Component} or just having\n  155  	 * {@code @Import} declarations or {@code @Bean methods}).\n  156  	 * @param metadata the metadata of the annotated class\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\DependsOn.java:\n   30   *\n   31   * <p>May be used on any class directly or indirectly annotated with\n   32:  * {@link org.springframework.stereotype.Component} or on methods annotated\n   33   * with {@link Bean}.\n   34   *\n   35:  * <p>Using {@link DependsOn} at the class level has no effect unless component-scanning\n   36   * is being used. If a {@link DependsOn}-annotated class is declared via XML,\n   37   * {@link DependsOn} annotation metadata is ignored, and\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\Description.java:\n   25  /**\n   26   * Adds a textual description to bean definitions derived from\n   27:  * {@link org.springframework.stereotype.Component} or {@link Bean}.\n   28   *\n   29   * @author Juergen Hoeller\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\EnableAspectJAutoProxy.java:\n   24  \n   25  /**\n   26:  * Enables support for handling components marked with AspectJ's {@code @Aspect} annotation,\n   27   * similar to functionality found in Spring's {@code <aop:aspectj-autoproxy>} XML element.\n   28   * To be used on @{@link Configuration} classes as follows:\n   ..\n   44   * }</pre>\n   45   *\n   46:  * Where {@code FooService} is a typical POJO component and {@code MyAspect} is an\n   47   * {@code @Aspect}-style aspect:\n   48   *\n   ..\n   78   * }</pre>\n   79   *\n   80:  * <p>Note that {@code @Aspect} beans may be component-scanned like any other. Simply\n   81:  * mark the aspect with both {@code @Aspect} and {@code @Component}:\n   82   *\n   83   * <pre class=\"code\">\n   84   * package com.foo;\n   85   *\n   86:  * &#064;Component\n   87   * public class FooService { ... }\n   88   *\n   89   * &#064;Aspect\n   90:  * &#064;Component\n   91   * public class MyAspect { ... }</pre>\n   92   *\n   93:  * Then use the @{@link ComponentScan} annotation to pick both up:\n   94   *\n   95   * <pre class=\"code\">\n   96   * &#064;Configuration\n   97:  * &#064;ComponentScan(\"com.foo\")\n   98   * &#064;EnableAspectJAutoProxy\n   99   * public class AppConfig {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\FilterType.java:\n   19  /**\n   20   * Enumeration of the type filters that may be used in conjunction with\n   21:  * {@link ComponentScan @ComponentScan}.\n   22   *\n   23   * @author Mark Fisher\n   ..\n   25   * @author Chris Beams\n   26   * @since 2.5\n   27:  * @see ComponentScan\n   28:  * @see ComponentScan#includeFilters()\n   29:  * @see ComponentScan#excludeFilters()\n   30   * @see org.springframework.core.type.filter.TypeFilter\n   31   */\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\Import.java:\n   28   * <p>Provides functionality equivalent to the {@code <import/>} element in Spring XML.\n   29   * Allows for importing {@code @Configuration} classes, {@link ImportSelector} and\n   30:  * {@link ImportBeanDefinitionRegistrar} implementations, as well as regular component\n   31   * classes (as of 4.2; analogous to {@link AnnotationConfigApplicationContext#register}).\n   32   *\n   ..\n   56  	/**\n   57  	 * {@link Configuration}, {@link ImportSelector}, {@link ImportBeanDefinitionRegistrar}\n   58: 	 * or regular component classes to import.\n   59  	 */\n   60  	Class<?>[] value();\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\Lazy.java:\n   27   *\n   28   * <p>May be used on any class directly or indirectly annotated with {@link\n   29:  * org.springframework.stereotype.Component @Component} or on methods annotated with\n   30   * {@link Bean @Bean}.\n   31   *\n   32:  * <p>If this annotation is not present on a {@code @Component} or {@code @Bean} definition,\n   33   * eager initialization will occur. If present and set to {@code true}, the {@code @Bean} or\n   34:  * {@code @Component} will not be initialized until referenced by another bean or explicitly\n   35   * retrieved from the enclosing {@link org.springframework.beans.factory.BeanFactory\n   36   * BeanFactory}. If present and set to {@code false}, the bean will be instantiated on\n   ..\n   43   * overriding the 'default lazy' behavior and that the bean should be eagerly initialized.\n   44   *\n   45:  * <p>In addition to its role for component initialization, this annotation may also be placed\n   46   * on injection points marked with {@link org.springframework.beans.factory.annotation.Autowired}\n   47   * or {@link javax.inject.Inject}: In that context, it leads to the creation of a\n   ..\n   55   * @see Bean\n   56   * @see Configuration\n   57:  * @see org.springframework.stereotype.Component\n   58   */\n   59  @Target({ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR, ElementType.PARAMETER, ElementType.FIELD})\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\package-info.java:\n    1  /**\n    2   * Annotation support for the Application Context, including JSR-250 \"common\"\n    3:  * annotations, component-scanning, and Java-based metadata for creating\n    4   * Spring-managed objects.\n    5   */\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\Primary.java:\n   32   *\n   33   * <p>May be used on any class directly or indirectly annotated with @{@link\n   34:  * org.springframework.stereotype.Component Component} or on methods annotated\n   35   * with @{@link Bean}.\n   36   *\n   37   * <h2>Example</h2>\n   38   * <pre class=\"code\">\n   39:  * &#064;Component\n   40   * public class FooService {\n   41   *     private FooRepository fooRepository;\n   ..\n   47   * }\n   48   *\n   49:  * &#064;Component\n   50   * public class JdbcFooRepository {\n   51   *     public JdbcFooService(DataSource dataSource) {\n   ..\n   55   *\n   56   * &#064;Primary\n   57:  * &#064;Component\n   58   * public class HibernateFooRepository {\n   59   *     public HibernateFooService(SessionFactory sessionFactory) {\n   ..\n   66   * be injected preferentially over the jdbc-based variant assuming both are present as\n   67   * beans within the same Spring application context, which is often the case when\n   68:  * component-scanning is applied liberally.\n   69   *\n   70   * <p>Note that using {@code @Primary} at the class level has no effect unless\n   71:  * component-scanning is being used. If a {@code @Primary}-annotated class is declared via\n   72   * XML, {@code @Primary} annotation metadata is ignored, and\n   73   * {@code <bean primary=\"true|false\"/>} is respected instead.\n   ..\n   77   * @see Lazy\n   78   * @see Bean\n   79:  * @see ComponentScan\n   80:  * @see org.springframework.stereotype.Component\n   81   */\n   82  @Target({ElementType.TYPE, ElementType.METHOD})\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\Profile.java:\n   27  \n   28  /**\n   29:  * Indicates that a component is eligible for registration when one or more\n   30   * {@linkplain #value specified profiles} are active.\n   31   *\n   ..\n   41   * <ul>\n   42   * <li>as a type-level annotation on any class directly or indirectly annotated with\n   43:  * {@code @Component}, including {@link Configuration @Configuration} classes</li>\n   44   * <li>as a meta-annotation, for the purpose of composing custom stereotype annotations</li>\n   45   * <li>as a method-level annotation on any {@link Bean @Bean} method</li>\n   ..\n   52   * {@code beans} element is supplied e.g., {@code <beans profile=\"p1,p2\">}, the\n   53   * {@code beans} element will not be parsed unless at least profile 'p1' or 'p2' has been\n   54:  * activated. Likewise, if a {@code @Component} or {@code @Configuration} class is marked\n   55   * with {@code @Profile({\"p1\", \"p2\"})}, that class will not be registered or processed unless\n   56   * at least profile 'p1' or 'p2' has been activated.\n   57   *\n   58   * <p>If a given profile is prefixed with the NOT operator ({@code !}), the annotated\n   59:  * component will be registered if the profile is <em>not</em> active &mdash; for example,\n   60   * given {@code @Profile({\"p1\", \"!p2\"})}, registration will occur if profile 'p1' is active or\n   61   * if profile 'p2' is <em>not</em> active.\n   ..\n   86  \n   87  	/**\n   88: 	 * The set of profiles for which the annotated component should be registered.\n   89  	 */\n   90  	String[] value();\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\PropertySource.java:\n  133   * <p>In certain situations, it may not be possible or practical to tightly control\n  134   * property source ordering when using {@code @ProperySource} annotations. For example,\n  135:  * if the {@code @Configuration} classes above were registered via component-scanning,\n  136   * the ordering is difficult to predict. In such cases - and if overriding is important -\n  137   * it is recommended that the user fall back to using the programmatic PropertySource API.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\Role.java:\n   29   *\n   30   * <p>May be used on any class directly or indirectly annotated with\n   31:  * {@link org.springframework.stereotype.Component} or on methods\n   32   * annotated with {@link Bean}.\n   33   *\n   34:  * <p>If this annotation is not present on a Component or Bean definition,\n   35   * the default value of {@link BeanDefinition#ROLE_APPLICATION} will apply.\n   36   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\Scope.java:\n   28  /**\n   29   * When used as a type-level annotation in conjunction with\n   30:  * {@link org.springframework.stereotype.Component @Component},\n   31   * {@code @Scope} indicates the name of a scope to use for instances of\n   32   * the annotated type.\n   ..\n   50   * @author Sam Brannen\n   51   * @since 2.5\n   52:  * @see org.springframework.stereotype.Component\n   53   * @see org.springframework.context.annotation.Bean\n   54   */\n   ..\n   66  \n   67  	/**\n   68: 	 * Specifies the name of the scope to use for the annotated component/bean.\n   69  	 * <p>Defaults to an empty string ({@code \"\"}) which implies\n   70  	 * {@link ConfigurableBeanFactory#SCOPE_SINGLETON SCOPE_SINGLETON}.\n   ..\n   80  \n   81  	/**\n   82: 	 * Specifies whether a component should be configured as a scoped proxy\n   83  	 * and if so, whether the proxy should be interface-based or subclass-based.\n   84  	 * <p>Defaults to {@link ScopedProxyMode#DEFAULT}, which typically indicates\n   85  	 * that no scoped proxy should be created unless a different default\n   86: 	 * has been configured at the component-scan instruction level.\n   87  	 * <p>Analogous to {@code <aop:scoped-proxy/>} support in Spring XML.\n   88  	 * @see ScopedProxyMode\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\annotation\\ScopedProxyMode.java:\n   32  	/**\n   33  	 * Default typically equals {@link #NO}, unless a different default\n   34: 	 * has been configured at the component-scan instruction level.\n   35  	 */\n   36  	DEFAULT,\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\ApplicationContext.java:\n   30   * <p>An ApplicationContext provides:\n   31   * <ul>\n   32:  * <li>Bean factory methods for accessing application components.\n   33   * Inherited from {@link org.springframework.beans.factory.ListableBeanFactory}.\n   34   * <li>The ability to load file resources in a generic fashion.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\config\\ContextNamespaceHandler.java:\n   19  import org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n   20  import org.springframework.context.annotation.AnnotationConfigBeanDefinitionParser;\n   21: import org.springframework.context.annotation.ComponentScanBeanDefinitionParser;\n   22  \n   23  /**\n   ..\n   36  		registerBeanDefinitionParser(\"property-override\", new PropertyOverrideBeanDefinitionParser());\n   37  		registerBeanDefinitionParser(\"annotation-config\", new AnnotationConfigBeanDefinitionParser());\n   38: 		registerBeanDefinitionParser(\"component-scan\", new ComponentScanBeanDefinitionParser());\n   39  		registerBeanDefinitionParser(\"load-time-weaver\", new LoadTimeWeaverBeanDefinitionParser());\n   40  		registerBeanDefinitionParser(\"spring-configured\", new SpringConfiguredBeanDefinitionParser());\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\config\\LoadTimeWeaverBeanDefinitionParser.java:\n   20  \n   21  import org.springframework.beans.factory.config.BeanDefinition;\n   22: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   23  import org.springframework.beans.factory.support.AbstractBeanDefinition;\n   24  import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n   ..\n   76  			if (!parserContext.getRegistry().containsBeanDefinition(ASPECTJ_WEAVING_ENABLER_BEAN_NAME)) {\n   77  				RootBeanDefinition def = new RootBeanDefinition(ASPECTJ_WEAVING_ENABLER_CLASS_NAME);\n   78: 				parserContext.registerBeanComponent(\n   79: 						new BeanComponentDefinition(def, ASPECTJ_WEAVING_ENABLER_BEAN_NAME));\n   80  			}\n   81  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\config\\SpringConfiguredBeanDefinitionParser.java:\n   20  \n   21  import org.springframework.beans.factory.config.BeanDefinition;\n   22: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   23  import org.springframework.beans.factory.support.RootBeanDefinition;\n   24  import org.springframework.beans.factory.xml.BeanDefinitionParser;\n   ..\n   52  			def.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n   53  			def.setSource(parserContext.extractSource(element));\n   54: 			parserContext.registerBeanComponent(new BeanComponentDefinition(def, BEAN_CONFIGURER_ASPECT_BEAN_NAME));\n   55  		}\n   56  		return null;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\event\\EventExpressionEvaluator.java:\n   33  /**\n   34   * Utility class handling the SpEL expression parsing. Meant to be used\n   35:  * as a reusable, thread-safe component.\n   36   *\n   37   * @author Stephane Nicoll\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\event\\EventListener.java:\n   41   * the internal {@link EventListenerMethodProcessor} bean which gets\n   42   * registered automatically when using Java config or manually via the\n   43:  * {@code <context:annotation-config/>} or {@code <context:component-scan/>}\n   44   * element when using XML config.\n   45   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\index\\CandidateComponentsIndex.java:\n   28  \n   29  /**\n   30:  * Provide access to the candidates that are defined in {@code META-INF/spring.components}.\n   31   * <p>\n   32   * An arbitrary number of stereotypes can be registered (and queried) on the index: a\n   33   * typical example is the fully qualified name of an annotation that flags the class for\n   34:  * a certain use case. The following call returns all the {@code @Component}\n   35   * <b>candidate</b> types for the {@code com.example} package (and its sub-packages):\n   36   * <pre class=\"code\">\n   37   * Set&lt;String&gt; candidates = index.getCandidateTypes(\n   38:  *         \"com.example\", \"org.springframework.stereotype.Component\");\n   39   * </pre>\n   40   *\n   ..\n   46   * @since 5.0\n   47   */\n   48: public class CandidateComponentsIndex {\n   49  \n   50  	private final MultiValueMap<String, String> index;\n   51  \n   52: 	CandidateComponentsIndex(List<Properties> content) {\n   53  		this.index = parseIndex(content);\n   54  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\index\\CandidateComponentsIndexLoader.java:\n   34  \n   35  /**\n   36:  * Candidate components index loading mechanism for internal use within the framework.\n   37   *\n   38   * @author Stephane Nicoll\n   39   * @since 5.0\n   40   */\n   41: public class CandidateComponentsIndexLoader {\n   42  \n   43  \n   44: 	private static final Log logger = LogFactory.getLog(CandidateComponentsIndexLoader.class);\n   45  \n   46  	/**\n   ..\n   60  \n   61  	/**\n   62: 	 * The location to look for components.\n   63  	 * <p>Can be present in multiple JAR files.\n   64  	 */\n   65: 	public static final String COMPONENTS_RESOURCE_LOCATION = \"META-INF/spring.components\";\n   66  \n   67: 	private static final ConcurrentMap<ClassLoader, CandidateComponentsIndex> cache\n   68  			= new ConcurrentReferenceHashMap<>();\n   69  \n   70  \n   71  	/**\n   72: 	 * Load and instantiate the {@link CandidateComponentsIndex} from\n   73: 	 * {@value #COMPONENTS_RESOURCE_LOCATION}, using the given class loader. If no\n   74  	 * index is available, return {@code null}.\n   75  	 * @param classLoader the ClassLoader to use for loading (can be {@code null} to use the default)\n   76  	 * @return the index to use or {@code null} if no index was found\n   77  	 * @throws IllegalArgumentException if any module index cannot\n   78: 	 * be loaded or if an error occurs while creating {@link CandidateComponentsIndex}\n   79  	 */\n   80: 	public static CandidateComponentsIndex loadIndex(ClassLoader classLoader) {\n   81  		ClassLoader classLoaderToUse = classLoader;\n   82  		if (classLoaderToUse == null) {\n   83: 			classLoaderToUse = CandidateComponentsIndexLoader.class.getClassLoader();\n   84  		}\n   85: 		return cache.computeIfAbsent(classLoaderToUse, CandidateComponentsIndexLoader::doLoadIndex);\n   86  	}\n   87  \n   88: 	private static CandidateComponentsIndex doLoadIndex(ClassLoader classLoader) {\n   89  		if (shouldIgnoreIndex) {\n   90  			return null;\n   91  		}\n   92  		try {\n   93: 			Enumeration<URL> urls = classLoader.getResources(COMPONENTS_RESOURCE_LOCATION);\n   94  			if (!urls.hasMoreElements()) {\n   95  				return null;\n   ..\n  105  			}\n  106  			int totalCount = result.stream().mapToInt(Properties::size).sum();\n  107: 			return (totalCount > 0 ? new CandidateComponentsIndex(result) : null);\n  108  		}\n  109  		catch (IOException ex) {\n  110  			throw new IllegalArgumentException(\"Unable to load indexes from location [\"\n  111: 					+ COMPONENTS_RESOURCE_LOCATION + \"]\", ex);\n  112  		}\n  113  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\index\\package-info.java:\n   16  \n   17  /**\n   18:  * Support package for reading and managing the components index.\n   19   */\n   20  package org.springframework.context.index;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\Lifecycle.java:\n   23   * Consider implementing {@link SmartLifecycle} for that purpose.</b>\n   24   *\n   25:  * <p>Can be implemented by both components (typically a Spring bean defined in a\n   26   * Spring context) and containers  (typically a Spring {@link ApplicationContext}\n   27:  * itself). Containers will propagate start/stop signals to all components that\n   28   * apply within each container, e.g. for a stop/restart scenario at runtime.\n   29   *\n   ..\n   32   * will typically be defined with an\n   33   * {@link org.springframework.jmx.export.assembler.InterfaceBasedMBeanInfoAssembler},\n   34:  * restricting the visibility of activity-controlled components to the Lifecycle\n   35   * interface.\n   36   *\n   37   * <p>Note that the Lifecycle interface is only supported on <b>top-level singleton\n   38:  * beans</b>. On any other component, the Lifecycle interface will remain undetected\n   39   * and hence ignored. Also, note that the extended {@link SmartLifecycle} interface\n   40   * provides integration with the application context's startup and shutdown phases.\n   ..\n   50  \n   51  	/**\n   52: 	 * Start this component.\n   53: 	 * <p>Should not throw an exception if the component is already running.\n   54  	 * <p>In the case of a container, this will propagate the start signal to all\n   55: 	 * components that apply.\n   56  	 * @see SmartLifecycle#isAutoStartup()\n   57  	 */\n   ..\n   59  \n   60  	/**\n   61: 	 * Stop this component, typically in a synchronous fashion, such that the component is\n   62  	 * fully stopped upon return of this method. Consider implementing {@link SmartLifecycle}\n   63  	 * and its {@code stop(Runnable)} variant when asynchronous stop behavior is necessary.\n   ..\n   66  	 * the general destruction callbacks are being propagated; however, on hot refresh during a\n   67  	 * context's lifetime or on aborted refresh attempts, only destroy methods will be called.\n   68: 	 * <p>Should not throw an exception if the component isn't started yet.\n   69: 	 * <p>In the case of a container, this will propagate the stop signal to all components\n   70  	 * that apply.\n   71  	 * @see SmartLifecycle#stop(Runnable)\n   ..\n   75  \n   76  	/**\n   77: 	 * Check whether this component is currently running.\n   78  	 * <p>In the case of a container, this will return {@code true} only if <i>all</i>\n   79: 	 * components that apply are currently running.\n   80: 	 * @return whether the component is currently running\n   81  	 */\n   82  	boolean isRunning();\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\LifecycleProcessor.java:\n   27  \n   28  	/**\n   29: 	 * Notification of context refresh, e.g. for auto-starting components.\n   30  	 */\n   31  	void onRefresh();\n   32  \n   33  	/**\n   34: 	 * Notification of context close phase, e.g. for auto-stopping components.\n   35  	 */\n   36  	void onClose();\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\SmartLifecycle.java:\n   28   *\n   29   * <p>This interface extends {@link Phased}, and the {@link #getPhase()} method's\n   30:  * return value indicates the phase within which this Lifecycle component should\n   31   * be started and stopped. The startup process begins with the <i>lowest</i>\n   32   * phase value and ends with the <i>highest</i> phase value (Integer.MIN_VALUE\n   33   * is the lowest possible, and Integer.MAX_VALUE is the highest possible). The\n   34:  * shutdown process will apply the reverse order. Any components with the\n   35   * same value will be arbitrarily ordered within the same phase.\n   36   *\n   37:  * <p>Example: if component B depends on component A having already started, then\n   38:  * component A should have a lower phase value than component B. During the\n   39:  * shutdown process, component B would be stopped before component A.\n   40   *\n   41   * <p>Any explicit \"depends-on\" relationship will take precedence over\n   ..\n   43   * dependency and always stops before its dependency.\n   44   *\n   45:  * <p>Any Lifecycle components within the context that do not also implement\n   46   * SmartLifecycle will be treated as if they have a phase value of 0. That\n   47   * way a SmartLifecycle implementation may start before those Lifecycle\n   48:  * components if it has a negative phase value, or it may start after\n   49:  * those components if it has a positive phase value.\n   50   *\n   51   * <p>Note that, due to the auto-startup support in SmartLifecycle,\n   ..\n   62  \n   63  	/**\n   64: 	 * Returns {@code true} if this {@code Lifecycle} component should get\n   65  	 * started automatically by the container at the time that the containing\n   66  	 * {@link ApplicationContext} gets refreshed.\n   67: 	 * <p>A value of {@code false} indicates that the component is intended to\n   68  	 * be started through an explicit {@link #start()} call instead, analogous\n   69  	 * to a plain {@link Lifecycle} implementation.\n   ..\n   76  \n   77  	/**\n   78: 	 * Indicates that a Lifecycle component must stop if it is currently running.\n   79  	 * <p>The provided callback is used by the {@link LifecycleProcessor} to support\n   80: 	 * an ordered, and potentially concurrent, shutdown of all components having a\n   81  	 * common shutdown order value. The callback <b>must</b> be executed after\n   82: 	 * the {@code SmartLifecycle} component does indeed stop.\n   83  	 * <p>The {@link LifecycleProcessor} will call <i>only</i> this variant of the\n   84  	 * {@code stop} method; i.e. {@link Lifecycle#stop()} will not be called for\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\support\\EmbeddedValueResolutionSupport.java:\n   21  \n   22  /**\n   23:  * Convenient base class for components with a need for embedded value resolution\n   24   * (i.e. {@link org.springframework.context.EmbeddedValueResolverAware} consumers).\n   25   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\context\\support\\ReloadableResourceBundleMessageSource.java:\n  118  	 * @param fileEncodings Properties with filenames as keys and charset\n  119  	 * names as values. Filenames have to match the basename syntax,\n  120: 	 * with optional locale-specific components: e.g. \"WEB-INF/messages\"\n  121  	 * or \"WEB-INF/messages_en\".\n  122  	 * @see #setBasenames\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\ejb\\access\\AbstractRemoteSlsbInvokerInterceptor.java:\n   46  	private boolean refreshHomeOnConnectFailure = false;\n   47  \n   48: 	private volatile boolean homeAsComponent = false;\n   49  \n   50  \n   ..\n   89  \n   90  	/**\n   91: 	 * Check for EJB3-style home object that serves as EJB component directly.\n   92  	 */\n   93  	@Override\n   94  	protected Method getCreateMethod(Object home) throws EjbAccessException {\n   95: 		if (this.homeAsComponent) {\n   96  			return null;\n   97  		}\n   98  		if (!(home instanceof EJBHome)) {\n   99  			// An EJB3 Session Bean...\n  100: 			this.homeAsComponent = true;\n  101  			return null;\n  102  		}\n  ...\n  214  	 */\n  215  	protected void removeSessionBeanInstance(EJBObject ejb) {\n  216: 		if (ejb != null && !this.homeAsComponent) {\n  217  			try {\n  218  				ejb.remove();\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\ejb\\access\\LocalSlsbInvokerInterceptor.java:\n   50  public class LocalSlsbInvokerInterceptor extends AbstractSlsbInvokerInterceptor {\n   51  \n   52: 	private volatile boolean homeAsComponent = false;\n   53  \n   54  \n   ..\n  103  \n  104  	/**\n  105: 	 * Check for EJB3-style home object that serves as EJB component directly.\n  106  	 */\n  107  	@Override\n  108  	protected Method getCreateMethod(Object home) throws EjbAccessException {\n  109: 		if (this.homeAsComponent) {\n  110  			return null;\n  111  		}\n  112  		if (!(home instanceof EJBLocalHome)) {\n  113  			// An EJB3 Session Bean...\n  114: 			this.homeAsComponent = true;\n  115  			return null;\n  116  		}\n  ...\n  163  	 */\n  164  	protected void removeSessionBeanInstance(EJBLocalObject ejb) {\n  165: 		if (ejb != null && !this.homeAsComponent) {\n  166  			try {\n  167  				ejb.remove();\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\ejb\\access\\LocalStatelessSessionProxyFactoryBean.java:\n   63  	/**\n   64  	 * Set the business interface of the EJB we're proxying.\n   65: 	 * This will normally be a super-interface of the EJB local component interface.\n   66  	 * Using a business methods interface is a best practice when implementing EJBs.\n   67  	 * @param businessInterface set the business interface of the EJB\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\ejb\\access\\package-info.java:\n    7   * and JNDI lookups, and work with business interfaces that could be\n    8   * implemented without using EJB. This provides a valuable decoupling\n    9:  * of client (such as web components) and business objects (which may\n   10   * or may not be EJBs). This gives us the choice of introducing EJB\n   11   * into an application (or removing EJB from an application) without\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\ejb\\access\\SimpleRemoteSlsbInvokerInterceptor.java:\n   48   *\n   49   * <p>This invoker is typically used with an RMI business interface, which serves\n   50:  * as super-interface of the EJB component interface. Alternatively, this invoker\n   51   * can also proxy a remote SLSB with a matching non-RMI business interface, i.e. an\n   52   * interface that mirrors the EJB business methods but does not declare RemoteExceptions.\n   ..\n   89  	 * <p>Alternatively, override {@link #getSessionBeanInstance} and\n   90  	 * {@link #releaseSessionBeanInstance} to change EJB instance creation,\n   91: 	 * for example to hold a single shared EJB component instance.\n   92  	 */\n   93  	@Override\n   ..\n  122  \n  123  	/**\n  124: 	 * Return an EJB component instance to delegate the call to.\n  125  	 * <p>The default implementation delegates to {@link #newSessionBeanInstance}.\n  126: 	 * @return the EJB component instance\n  127  	 * @throws NamingException if thrown by JNDI\n  128  	 * @throws InvocationTargetException if thrown by the create method\n  ...\n  146  	 * Release the given EJB instance.\n  147  	 * <p>The default implementation delegates to {@link #removeSessionBeanInstance}.\n  148: 	 * @param ejb the EJB component instance to release\n  149  	 * @see #removeSessionBeanInstance\n  150  	 */\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\ejb\\access\\SimpleRemoteStatelessSessionProxyFactoryBean.java:\n   44   *\n   45   * <p>This proxy factory is typically used with an RMI business interface, which serves\n   46:  * as super-interface of the EJB component interface. Alternatively, this factory\n   47   * can also proxy a remote SLSB with a matching non-RMI business interface, i.e. an\n   48   * interface that mirrors the EJB business methods but does not declare RemoteExceptions.\n   ..\n   73  	/**\n   74  	 * Set the business interface of the EJB we're proxying.\n   75: 	 * This will normally be a super-interface of the EJB remote component interface.\n   76  	 * Using a business methods interface is a best practice when implementing EJBs.\n   77  	 * <p>You can also specify a matching non-RMI business interface, i.e. an interface\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\ejb\\interceptor\\SpringBeanAutowiringInterceptor.java:\n   61   * <p><b>WARNING: Do not define the same bean as Spring-managed bean and as\n   62   * EJB3 session bean in the same deployment unit.</b> In particular, be\n   63:  * careful when using the {@code <context:component-scan>} feature\n   64   * in combination with the deployment of Spring-based EJB3 session beans:\n   65   * Make sure that the EJB3 session beans are <i>not</i> autodetected as\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\jmx\\access\\MBeanClientInterceptor.java:\n  580  \n  581  	private Object convertDataArrayToTargetArray(Object[] array, Class<?> targetClass) throws NoSuchMethodException {\n  582: 		Class<?> targetType = targetClass.getComponentType();\n  583: 		Method fromMethod = targetType.getMethod(\"from\", array.getClass().getComponentType());\n  584  		Object resultArray = Array.newInstance(targetType, array.length);\n  585  		for (int i = 0; i < array.length; i++) {\n  ...\n  592  			throws NoSuchMethodException {\n  593  \n  594: 		Method fromMethod = elementType.getMethod(\"from\", array.getClass().getComponentType());\n  595  		Collection<Object> resultColl = CollectionFactory.createCollection(collectionType, Array.getLength(array));\n  596  		for (int i = 0; i < array.length; i++) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\jmx\\export\\naming\\SelfNaming.java:\n   21  \n   22  /**\n   23:  * Interface that allows infrastructure components to provide their own\n   24   * {@code ObjectName}s to the {@code MBeanExporter}.\n   25   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\scheduling\\annotation\\EnableAsync.java:\n  134   * the {@code <task:executor>} element does not expose such an attribute. This\n  135   * demonstrates how the JavaConfig-based approach allows for maximum configurability\n  136:  * through direct access to actual componentry.\n  137   *\n  138   * @author Chris Beams\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\scheduling\\annotation\\EnableScheduling.java:\n   70   * }</pre>\n   71   *\n   72:  * Alternatively, if {@code MyTask} were annotated with {@code @Component}, the\n   73   * following configuration would ensure that its {@code @Scheduled} method is\n   74   * invoked at the desired interval:\n   ..\n   77   * &#064;Configuration\n   78   * &#064;EnableScheduling\n   79:  * &#064;ComponentScan(basePackages=\"com.myco.tasks\")\n   80   * public class AppConfig {\n   81   * }</pre>\n   ..\n  186   * {@code task:} namespace {@code scheduled} cannot easily expose such support. This is\n  187   * but one demonstration how the code-based approach allows for maximum configurability\n  188:  * through direct access to actual componentry.<p>\n  189   *\n  190   * @author Chris Beams\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\scheduling\\config\\AnnotationDrivenBeanDefinitionParser.java:\n   22  import org.springframework.beans.factory.config.BeanDefinition;\n   23  import org.springframework.beans.factory.config.BeanDefinitionHolder;\n   24: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   25: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   26  import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n   27  import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n   ..\n   50  		Object source = parserContext.extractSource(element);\n   51  \n   52: 		// Register component for the surrounding <task:annotation-driven> element.\n   53: 		CompositeComponentDefinition compDefinition = new CompositeComponentDefinition(element.getTagName(), source);\n   54: 		parserContext.pushContainingComponent(compDefinition);\n   55  \n   56: 		// Nest the concrete post-processor bean in the surrounding component.\n   57  		BeanDefinitionRegistry registry = parserContext.getRegistry();\n   58  \n   ..\n  102  		}\n  103  \n  104: 		// Finally register the composite component.\n  105: 		parserContext.popAndRegisterContainingComponent();\n  106  \n  107  		return null;\n  ...\n  120  				builder.addPropertyReference(\"exceptionHandler\", exceptionHandler);\n  121  			}\n  122: 			parserContext.registerBeanComponent(new BeanComponentDefinition(builder.getBeanDefinition(),\n  123  					TaskManagementConfigUtils.ASYNC_EXECUTION_ASPECT_BEAN_NAME));\n  124  		}\n  ...\n  131  		parserContext.getRegistry().registerBeanDefinition(beanName, builder.getBeanDefinition());\n  132  		BeanDefinitionHolder holder = new BeanDefinitionHolder(builder.getBeanDefinition(), beanName);\n  133: 		parserContext.registerComponent(new BeanComponentDefinition(holder));\n  134  	}\n  135  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\scheduling\\config\\ScheduledTasksBeanDefinitionParser.java:\n   22  \n   23  import org.springframework.beans.factory.config.RuntimeBeanReference;\n   24: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   25  import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n   26  import org.springframework.beans.factory.support.ManagedList;\n   ..\n  178  		builder.getRawBeanDefinition().setSource(parserContext.extractSource(taskElement));\n  179  		String generatedName = parserContext.getReaderContext().generateBeanName(builder.getRawBeanDefinition());\n  180: 		parserContext.registerBeanComponent(new BeanComponentDefinition(builder.getBeanDefinition(), generatedName));\n  181  		return new RuntimeBeanReference(generatedName);\n  182  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\scheduling\\support\\PeriodicTrigger.java:\n   37   * for the initial delay. Those methods should be used directly whenever\n   38   * possible. The value of this Trigger implementation is that it can be used\n   39:  * within components that rely on the Trigger abstraction. For example, it may\n   40   * be convenient to allow periodic triggers, cron-based triggers, and even\n   41   * custom Trigger implementations to be used interchangeably.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\stereotype\\Component.java:\n   24  \n   25  /**\n   26:  * Indicates that an annotated class is a \"component\".\n   27   * Such classes are considered as candidates for auto-detection\n   28   * when using annotation-based configuration and classpath scanning.\n   29   *\n   30   * <p>Other class-level annotations may be considered as identifying\n   31:  * a component as well, typically a special kind of component:\n   32   * e.g. the {@link Repository @Repository} annotation or AspectJ's\n   33   * {@link org.aspectj.lang.annotation.Aspect @Aspect} annotation.\n   ..\n   44  @Documented\n   45  @Indexed\n   46: public @interface Component {\n   47  \n   48  	/**\n   49: 	 * The value may indicate a suggestion for a logical component name,\n   50: 	 * to be turned into a Spring bean in case of an autodetected component.\n   51: 	 * @return the suggested component name, if any\n   52  	 */\n   53  	String value() default \"\";\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\stereotype\\Controller.java:\n   26   * Indicates that an annotated class is a \"Controller\" (e.g. a web controller).\n   27   *\n   28:  * <p>This annotation serves as a specialization of {@link Component @Component},\n   29   * allowing for implementation classes to be autodetected through classpath scanning.\n   30   * It is typically used in combination with annotated handler methods based on the\n   ..\n   34   * @author Juergen Hoeller\n   35   * @since 2.5\n   36:  * @see Component\n   37   * @see org.springframework.web.bind.annotation.RequestMapping\n   38   * @see org.springframework.context.annotation.ClassPathBeanDefinitionScanner\n   ..\n   41  @Retention(RetentionPolicy.RUNTIME)\n   42  @Documented\n   43: @Component\n   44  public @interface Controller {\n   45  \n   46  	/**\n   47: 	 * The value may indicate a suggestion for a logical component name,\n   48: 	 * to be turned into a Spring bean in case of an autodetected component.\n   49: 	 * @return the suggested component name, if any\n   50  	 */\n   51  	String value() default \"\";\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\stereotype\\Indexed.java:\n   26   * Indicate that the annotated element represents a stereotype for the index.\n   27   * <p>\n   28:  * The {@code CandidateComponentsIndex} is an alternative to classpath\n   29   * scanning that uses a metadata file generated at compilation time. The\n   30:  * index allows retrieving the candidate components (i.e. fully qualified\n   31   * name) based on a stereotype. This annotation instructs the generator to\n   32   * index the element on which the annotated element is present or if it\n   ..\n   34   * fully qualified name of the annotated element.\n   35   * <p>\n   36:  * Consider the default {@link Component} annotation that is meta-annotated\n   37:  * with this annotation. If a component is annotated with {@link Component},\n   38:  * an entry for that component will be added to the index using the\n   39:  * {@code org.springframework.stereotype.Component} stereotype.\n   40   * <p>\n   41   * This annotation is also honored on meta-annotations. Consider this\n   ..\n   52   * </pre>\n   53   * If this annotation is present on an type, it will be indexed with two\n   54:  * stereotypes: {@code org.springframework.stereotype.Component} and\n   55   * {@code com.example.PrivilegedService}. While {@link Service} isn't directly\n   56:  * annotated with {@code Indexed}, it is meta-annotated with {@link Component}.\n   57   * <p>\n   58   * It is also possible to index all implementations of a certain interface or\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\stereotype\\Repository.java:\n   43   *\n   44   * <p>As of Spring 2.5, this annotation also serves as a specialization of\n   45:  * {@link Component @Component}, allowing for implementation classes to be autodetected\n   46   * through classpath scanning.\n   47   *\n   ..\n   49   * @author Juergen Hoeller\n   50   * @since 2.0\n   51:  * @see Component\n   52   * @see Service\n   53   * @see org.springframework.dao.DataAccessException\n   ..\n   57  @Retention(RetentionPolicy.RUNTIME)\n   58  @Documented\n   59: @Component\n   60  public @interface Repository {\n   61  \n   62  	/**\n   63: 	 * The value may indicate a suggestion for a logical component name,\n   64: 	 * to be turned into a Spring bean in case of an autodetected component.\n   65: 	 * @return the suggested component name, if any\n   66  	 */\n   67  	String value() default \"\";\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\stereotype\\Service.java:\n   32   * and individual teams may narrow their semantics and use as appropriate.\n   33   *\n   34:  * <p>This annotation serves as a specialization of {@link Component @Component},\n   35   * allowing for implementation classes to be autodetected through classpath scanning.\n   36   *\n   37   * @author Juergen Hoeller\n   38   * @since 2.5\n   39:  * @see Component\n   40   * @see Repository\n   41   */\n   ..\n   43  @Retention(RetentionPolicy.RUNTIME)\n   44  @Documented\n   45: @Component\n   46  public @interface Service {\n   47  \n   48  	/**\n   49: 	 * The value may indicate a suggestion for a logical component name,\n   50: 	 * to be turned into a Spring bean in case of an autodetected component.\n   51: 	 * @return the suggested component name, if any\n   52  	 */\n   53  	String value() default \"\";\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\java\\org\\springframework\\validation\\beanvalidation\\package-info.java:\n    7   * org.springframework.validation.beanvalidation.LocalValidatorFactoryBean}\n    8   * which defines a shared ValidatorFactory/Validator setup for availability\n    9:  * to other Spring components.\n   10   */\n   11  package org.springframework.validation.beanvalidation;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\resources\\org\\springframework\\context\\config\\spring-context.xsd:\n  100  	continue to use the 3.0 (and older) versions of the spring-context schema in order\n  101  	to preserve system-properties-mode behavior. In this case, the traditional\n  102: 	PropertyPlaceholderConfigurer component will be registered instead of the newer\n  103  	PropertySourcesPlaceholderConfigurer.\n  104  \n  ...\n  212  	</xsd:element>\n  213  \n  214: 	<xsd:element name=\"component-scan\">\n  215  		<xsd:annotation>\n  216  			<xsd:documentation><![CDATA[\n  217: 	Scans the classpath for annotated components that will be auto-registered as\n  218: 	Spring beans. By default, the Spring-provided @Component, @Repository, @Service,\n  219  	@Controller, @RestController, @ControllerAdvice, and @Configuration stereotypes\n  220  	will be detected.\n  ...\n  222  	Note: This tag implies the effects of the 'annotation-config' tag, activating @Required,\n  223  	@Autowired, @PostConstruct, @PreDestroy, @Resource, @PersistenceContext and @PersistenceUnit\n  224: 	annotations in the component classes, which is usually desired for autodetected components\n  225  	(without external configuration). Turn off the 'annotation-config' attribute to deactivate\n  226  	this default behavior, for example in order to use custom BeanPostProcessor definitions\n  ...\n  228  \n  229  	Note: You may use placeholders in package paths, but only resolved against system\n  230: 	properties (analogous to resource paths). A component scan results in new bean definitions\n  231  	being registered; Spring's PropertySourcesPlaceholderConfigurer will apply to those bean\n  232: 	definitions just like to regular bean definitions, but it won't apply to the component\n  233  	scan settings themselves.\n  234  \n  235: 	See javadoc for org.springframework.context.annotation.ComponentScan for information\n  236: 	on code-based alternatives to bootstrapping component-scanning.\n  237  			]]></xsd:documentation>\n  238  		</xsd:annotation>\n  ...\n  243  					<xsd:annotation>\n  244  						<xsd:documentation><![CDATA[\n  245: 	Controls which eligible types to include for component scanning.\n  246  	Note that these filters will be applied in addition to the default filters, if specified.\n  247  	Any type under the specified base packages which matches a given filter will be included,\n  248: 	even if it does not match the default filters (i.e. is not annotated with @Component).\n  249  							]]></xsd:documentation>\n  250  					</xsd:annotation>\n  ...\n  254  					<xsd:annotation>\n  255  						<xsd:documentation><![CDATA[\n  256: 	Controls which eligible types to exclude for component scanning.\n  257  						]]></xsd:documentation>\n  258  					</xsd:annotation>\n  ...\n  263  				<xsd:annotation>\n  264  					<xsd:documentation><![CDATA[\n  265: 	The comma/semicolon/space/tab/linefeed-separated list of packages to scan for annotated components.\n  266  					]]></xsd:documentation>\n  267  				</xsd:annotation>\n  ...\n  270  				<xsd:annotation>\n  271  					<xsd:documentation><![CDATA[\n  272: 	Controls the class files eligible for component detection. Defaults to \"**/*.class\", the recommended value.\n  273  	Consider use of the include-filter and exclude-filter elements for a more fine-grained approach.\n  274  					]]></xsd:documentation>\n  ...\n  279  				<xsd:annotation>\n  280  					<xsd:documentation><![CDATA[\n  281: 	Indicates whether automatic detection of classes annotated with @Component, @Repository, @Service,\n  282  	or @Controller should be enabled. Default is \"true\".\n  283  					]]></xsd:documentation>\n  ...\n  295  				<xsd:annotation>\n  296  					<xsd:documentation><![CDATA[\n  297: 	The fully-qualified class name of the BeanNameGenerator to be used for naming detected components.\n  298  					]]></xsd:documentation>\n  299  					<xsd:appinfo>\n  ...\n  309  					<xsd:documentation><![CDATA[\n  310  	The fully-qualified class name of the ScopeMetadataResolver to be used for resolving the scope of\n  311: 	detected components.\n  312  					]]></xsd:documentation>\n  313  					<xsd:appinfo>\n  ...\n  322  				<xsd:annotation>\n  323  					<xsd:documentation><![CDATA[\n  324: 	Indicates whether proxies should be generated for detected components, which may be necessary\n  325  	when using scopes in a proxy-style fashion. Default is to generate no such proxies.\n  326  					]]></xsd:documentation>\n  ...\n  516      Controls the type of filtering to apply to the expression.\n  517  \n  518:     \"annotation\" indicates an annotation to be present at the type level in target components;\n  519:     \"assignable\" indicates a class (or interface) that the target components are assignable to (extend/implement);\n  520:     \"aspectj\" indicates an AspectJ type pattern expression to be matched by the target components;\n  521:     \"regex\" indicates a regex pattern to be matched by the target components' class names;\n  522      \"custom\" indicates a custom implementation of the org.springframework.core.type.TypeFilter interface.\n  523  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\main\\resources\\org\\springframework\\ejb\\config\\spring-jee.xsd:\n   14  	<xsd:annotation>\n   15  		<xsd:documentation><![CDATA[\n   16: 	Defines configuration elements for access to traditional Java EE components\n   17  	such as JNDI resources and EJB session beans.\n   18  		]]></xsd:documentation>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\groovy\\org\\springframework\\context\\groovy\\GroovyBeanDefinitionReaderTests.groovy:\n   25  import org.springframework.context.support.GenericApplicationContext\n   26  import org.springframework.context.support.GenericGroovyApplicationContext\n   27: import org.springframework.stereotype.Component\n   28  \n   29  import static groovy.test.GroovyAssert.*\n   ..\n  113  \n  114  	@Test\n  115: 	void contextComponentScanSpringTag() {\n  116  		def appCtx = new GenericApplicationContext()\n  117  		def reader = new GroovyBeanDefinitionReader(appCtx)\n  ...\n  120  			xmlns context:\"http://www.springframework.org/schema/context\"\n  121  \n  122: 			context.'component-scan'( 'base-package' :\" org.springframework.context.groovy\" )\n  123  		}\n  124  \n  ...\n 1033  }\n 1034  \n 1035: @Component(value = \"person\")\n 1036  public class AdvisedPerson {\n 1037  	int age;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\example\\profilescan\\DevComponent.java:\n   23  \n   24  import org.springframework.context.annotation.Profile;\n   25: import org.springframework.stereotype.Component;\n   26  \n   27  @Retention(RetentionPolicy.RUNTIME)\n   28  @Target(ElementType.TYPE)\n   29: @Profile(DevComponent.PROFILE_NAME)\n   30: @Component\n   31: public @interface DevComponent {\n   32  \n   33  	public static final String PROFILE_NAME = \"dev\";\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\example\\profilescan\\ProfileAnnotatedComponent.java:\n    2  \n    3  import org.springframework.context.annotation.Profile;\n    4: import org.springframework.stereotype.Component;\n    5  \n    6: @Profile(ProfileAnnotatedComponent.PROFILE_NAME)\n    7: @Component(ProfileAnnotatedComponent.BEAN_NAME)\n    8: public class ProfileAnnotatedComponent {\n    9  \n   10: 	public static final String BEAN_NAME = \"profileAnnotatedComponent\";\n   11  	public static final String PROFILE_NAME = \"test\";\n   12  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\example\\profilescan\\ProfileMetaAnnotatedComponent.java:\n   18  \n   19  \n   20: @DevComponent(ProfileMetaAnnotatedComponent.BEAN_NAME)\n   21: public class ProfileMetaAnnotatedComponent {\n   22  \n   23: 	public static final String BEAN_NAME = \"profileMetaAnnotatedComponent\";\n   24  \n   25  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\example\\scannable\\_package.java:\n   21   * Marker class for example.scannable package.\n   22   *\n   23:  * @see org.springframework.context.annotation.ComponentScan#basePackageClasses()\n   24   */\n   25  public class _package { }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\example\\scannable\\CustomAspectStereotype.java:\n   22  import java.lang.annotation.Target;\n   23  \n   24: import org.springframework.stereotype.Component;\n   25  \n   26  /**\n   ..\n   29  @Target(ElementType.TYPE)\n   30  @Retention(RetentionPolicy.RUNTIME)\n   31: @Component\n   32  public @interface CustomAspectStereotype {\n   33  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\example\\scannable\\CustomComponent.java:\n   30  @Inherited\n   31  @CustomAnnotations.SpecialAnnotation\n   32: public @interface CustomComponent {\n   33  \n   34  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\example\\scannable\\DefaultNamedComponent.java:\n   22   */\n   23  @CustomStereotype\n   24: public class DefaultNamedComponent {\n   25  \n   26  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\example\\scannable\\FooServiceImpl.java:\n   42   * @author Juergen Hoeller\n   43   */\n   44: @Service @Lazy @DependsOn(\"myNamedComponent\")\n   45  public class FooServiceImpl implements FooService {\n   46  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\example\\scannable\\MessageBean.java:\n   20   * @author Mark Fisher\n   21   */\n   22: @CustomComponent\n   23  @CustomAnnotations.SpecialAnnotation\n   24  public class MessageBean {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\example\\scannable\\NamedComponent.java:\n   18  \n   19  import org.springframework.context.annotation.Lazy;\n   20: import org.springframework.stereotype.Component;\n   21  \n   22  /**\n   23   * @author Mark Fisher\n   24   */\n   25: @Component(\"myNamedComponent\") @Lazy\n   26: public class NamedComponent {\n   27  \n   28  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\example\\scannable_implicitbasepackage\\ComponentScanAnnotatedConfigWithImplicitBasePackage.java:\n   18  \n   19  import org.springframework.context.annotation.Bean;\n   20: import org.springframework.context.annotation.ComponentScan;\n   21  import org.springframework.context.annotation.Configuration;\n   22  \n   ..\n   25   */\n   26  @Configuration\n   27: @ComponentScan\n   28: public class ComponentScanAnnotatedConfigWithImplicitBasePackage {\n   29  \n   30  	@Bean  // override of scanned class\n   31: 	public ConfigurableComponent configurableComponent() {\n   32: 		return new ConfigurableComponent(true);\n   33  	}\n   34  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\example\\scannable_implicitbasepackage\\ConfigurableComponent.java:\n   17  package example.scannable_implicitbasepackage;\n   18  \n   19: import org.springframework.stereotype.Component;\n   20  \n   21  /**\n   22   * @author Juergen Hoeller\n   23   */\n   24: @Component\n   25: public class ConfigurableComponent {\n   26  \n   27  	private final boolean flag;\n   28  \n   29: 	public ConfigurableComponent() {\n   30  		this(false);\n   31  	}\n   32  \n   33: 	public ConfigurableComponent(boolean flag) {\n   34  		this.flag = flag;\n   35  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\example\\scannable_implicitbasepackage\\ScannedComponent.java:\n   17  package example.scannable_implicitbasepackage;\n   18  \n   19: import org.springframework.stereotype.Component;\n   20  \n   21  /**\n   22   * @author Phillip Webb\n   23   */\n   24: @Component\n   25: public class ScannedComponent {\n   26  \n   27  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\example\\scannable_scoped\\CustomScopeAnnotationBean.java:\n   18  \n   19  import org.springframework.beans.factory.config.BeanDefinition;\n   20: import org.springframework.stereotype.Component;\n   21  \n   22: @Component\n   23  @MyScope(BeanDefinition.SCOPE_PROTOTYPE)\n   24  public class CustomScopeAnnotationBean {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\aop\\framework\\ClassWithComplexConstructor.java:\n   19  import org.springframework.aop.support.AopUtils;\n   20  import org.springframework.beans.factory.annotation.Autowired;\n   21: import org.springframework.stereotype.Component;\n   22  import org.springframework.util.Assert;\n   23  \n   ..\n   25   * @author Oliver Gierke\n   26   */\n   27: @Component\n   28  public class ClassWithComplexConstructor {\n   29  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\aop\\framework\\Dependency.java:\n   17  package org.springframework.aop.framework;\n   18  \n   19: import org.springframework.stereotype.Component;\n   20  \n   21: @Component class Dependency {\n   22  \n   23  	private int value = 0;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\beans\\factory\\annotation\\BridgeMethodAutowiringTests.java:\n   23  \n   24  import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n   25: import org.springframework.stereotype.Component;\n   26  \n   27  import static org.junit.Assert.*;\n   ..\n   60  \n   61  \n   62: 	@Component(\"userObject\")\n   63  	public static class Foo {\n   64  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\AnnotationBeanNameGeneratorTests.java:\n   22  import java.lang.annotation.Target;\n   23  \n   24: import example.scannable.DefaultNamedComponent;\n   25  import org.junit.Test;\n   26  \n   ..\n   29  import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n   30  import org.springframework.beans.factory.support.SimpleBeanDefinitionRegistry;\n   31: import org.springframework.stereotype.Component;\n   32  import org.springframework.stereotype.Controller;\n   33  import org.springframework.stereotype.Service;\n   ..\n   51  \n   52  	@Test\n   53: 	public void generateBeanNameWithNamedComponent() {\n   54  		BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry();\n   55: 		AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(ComponentWithName.class);\n   56  		String beanName = this.beanNameGenerator.generateBeanName(bd, registry);\n   57  		assertNotNull(\"The generated beanName must *never* be null.\", beanName);\n   ..\n   61  \n   62  	@Test\n   63: 	public void generateBeanNameWithDefaultNamedComponent() {\n   64  		BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry();\n   65: 		AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(DefaultNamedComponent.class);\n   66  		String beanName = this.beanNameGenerator.generateBeanName(bd, registry);\n   67  		assertNotNull(\"The generated beanName must *never* be null.\", beanName);\n   ..\n   71  \n   72  	@Test\n   73: 	public void generateBeanNameWithNamedComponentWhereTheNameIsBlank() {\n   74  		BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry();\n   75: 		AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(ComponentWithBlankName.class);\n   76  		String beanName = this.beanNameGenerator.generateBeanName(bd, registry);\n   77  		assertNotNull(\"The generated beanName must *never* be null.\", beanName);\n   ..\n   82  \n   83  	@Test\n   84: 	public void generateBeanNameWithAnonymousComponentYieldsGeneratedBeanName() {\n   85  		BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry();\n   86: 		AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(AnonymousComponent.class);\n   87  		String beanName = this.beanNameGenerator.generateBeanName(bd, registry);\n   88  		assertNotNull(\"The generated beanName must *never* be null.\", beanName);\n   ..\n   93  \n   94  	@Test\n   95: 	public void generateBeanNameFromMetaComponentWithStringValue() {\n   96  		BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry();\n   97: 		AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(ComponentFromStringMeta.class);\n   98  		String beanName = this.beanNameGenerator.generateBeanName(bd, registry);\n   99  		assertEquals(\"henry\", beanName);\n  ...\n  101  \n  102  	@Test\n  103: 	public void generateBeanNameFromMetaComponentWithNonStringValue() {\n  104  		BeanDefinitionRegistry registry = new SimpleBeanDefinitionRegistry();\n  105: 		AnnotatedBeanDefinition bd = new AnnotatedGenericBeanDefinition(ComponentFromNonStringMeta.class);\n  106  		String beanName = this.beanNameGenerator.generateBeanName(bd, registry);\n  107: 		assertEquals(\"annotationBeanNameGeneratorTests.ComponentFromNonStringMeta\", beanName);\n  108  	}\n  109  \n  ...\n  148  \n  149  \n  150: 	@Component(\"walden\")\n  151: 	private static class ComponentWithName {\n  152  	}\n  153  \n  154: 	@Component(\" \")\n  155: 	private static class ComponentWithBlankName {\n  156  	}\n  157  \n  158: 	@Component\n  159: 	private static class AnonymousComponent {\n  160  	}\n  161  \n  162  	@Service(\"henry\")\n  163: 	private static class ComponentFromStringMeta {\n  164  	}\n  165  \n  166  	@Retention(RetentionPolicy.RUNTIME)\n  167  	@Target(ElementType.TYPE)\n  168: 	@Component\n  169: 	public @interface NonStringMetaComponent {\n  170  \n  171  		long value();\n  172  	}\n  173  \n  174: 	@NonStringMetaComponent(123)\n  175: 	private static class ComponentFromNonStringMeta {\n  176  	}\n  177  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\AnnotationConfigApplicationContextTests.java:\n   27  import org.springframework.beans.factory.config.BeanPostProcessor;\n   28  import org.springframework.context.ApplicationContext;\n   29: import org.springframework.context.annotation6.ComponentForScanning;\n   30  import org.springframework.context.annotation6.ConfigForScanning;\n   31  import org.springframework.context.annotation6.Jsr330NamedForScanning;\n   ..\n   55  		context.getBean(uncapitalize(ConfigForScanning.class.getSimpleName()));\n   56  		context.getBean(\"testBean\"); // contributed by ConfigForScanning\n   57: 		context.getBean(uncapitalize(ComponentForScanning.class.getSimpleName()));\n   58  		context.getBean(uncapitalize(Jsr330NamedForScanning.class.getSimpleName()));\n   59  		Map<String, Object> beans = context.getBeansWithAnnotation(Configuration.class);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\ClassPathBeanDefinitionScannerTests.java:\n   17  package org.springframework.context.annotation;\n   18  \n   19: import example.scannable.CustomComponent;\n   20  import example.scannable.FooService;\n   21  import example.scannable.FooServiceImpl;\n   ..\n   36  import org.springframework.core.type.filter.AnnotationTypeFilter;\n   37  import org.springframework.core.type.filter.AssignableTypeFilter;\n   38: import org.springframework.stereotype.Component;\n   39  import org.springframework.tests.sample.beans.TestBean;\n   40  \n   ..\n   60  		assertTrue(context.containsBean(\"fooServiceImpl\"));\n   61  		assertTrue(context.containsBean(\"stubFooDao\"));\n   62: 		assertTrue(context.containsBean(\"myNamedComponent\"));\n   63  		assertTrue(context.containsBean(\"myNamedDao\"));\n   64  		assertTrue(context.containsBean(\"thoreau\"));\n   ..\n   71  		context.refresh();\n   72  		FooServiceImpl service = context.getBean(\"fooServiceImpl\", FooServiceImpl.class);\n   73: 		assertTrue(context.getDefaultListableBeanFactory().containsSingleton(\"myNamedComponent\"));\n   74  		assertEquals(\"bar\", service.foo(1));\n   75  		assertTrue(context.isPrototype(\"thoreau\"));\n   ..\n   85  		assertTrue(context.containsBean(\"fooServiceImpl\"));\n   86  		assertTrue(context.containsBean(\"stubFooDao\"));\n   87: 		assertTrue(context.containsBean(\"myNamedComponent\"));\n   88  		assertTrue(context.containsBean(\"myNamedDao\"));\n   89  		assertTrue(context.containsBean(\"otherFooDao\"));\n   ..\n  106  		assertTrue(context.containsBean(\"fooServiceImpl\"));\n  107  		assertTrue(context.containsBean(\"stubFooDao\"));\n  108: 		assertTrue(context.containsBean(\"myNamedComponent\"));\n  109  		assertTrue(context.containsBean(\"myNamedDao\"));\n  110  		assertTrue(context.containsBean(\"thoreau\"));\n  ...\n  121  		assertTrue(context.containsBean(\"fooServiceImpl\"));\n  122  		assertTrue(context.containsBean(\"stubFooDao\"));\n  123: 		assertTrue(context.containsBean(\"myNamedComponent\"));\n  124  		assertTrue(context.containsBean(\"myNamedDao\"));\n  125  	}\n  ...\n  165  		assertTrue(context.containsBean(\"fooServiceImpl\"));\n  166  		assertTrue(context.containsBean(\"stubFooDao\"));\n  167: 		assertTrue(context.containsBean(\"myNamedComponent\"));\n  168  		assertTrue(context.containsBean(\"myNamedDao\"));\n  169  	}\n  ...\n  184  		assertTrue(context.containsBean(\"fooServiceImpl\"));\n  185  		assertTrue(context.containsBean(\"stubFooDao\"));\n  186: 		assertTrue(context.containsBean(\"myNamedComponent\"));\n  187  		assertTrue(context.containsBean(\"myNamedDao\"));\n  188  	}\n  ...\n  219  		GenericApplicationContext context = new GenericApplicationContext();\n  220  		ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(context, false);\n  221: 		scanner.addIncludeFilter(new AnnotationTypeFilter(CustomComponent.class));\n  222  		int beanCount = scanner.scan(BASE_PACKAGE);\n  223  		assertEquals(7, beanCount);\n  ...\n  234  		GenericApplicationContext context = new GenericApplicationContext();\n  235  		ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(context, false);\n  236: 		scanner.addIncludeFilter(new AnnotationTypeFilter(CustomComponent.class));\n  237  		int beanCount = scanner.scan(BASE_PACKAGE);\n  238  		assertEquals(7, beanCount);\n  ...\n  241  		assertFalse(context.containsBean(\"fooServiceImpl\"));\n  242  		assertFalse(context.containsBean(\"stubFooDao\"));\n  243: 		assertFalse(context.containsBean(\"myNamedComponent\"));\n  244  		assertFalse(context.containsBean(\"myNamedDao\"));\n  245  		assertTrue(context.containsBean(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));\n  ...\n  254  		GenericApplicationContext context = new GenericApplicationContext();\n  255  		ClassPathBeanDefinitionScanner scanner = new ClassPathBeanDefinitionScanner(context, true);\n  256: 		scanner.addIncludeFilter(new AnnotationTypeFilter(CustomComponent.class));\n  257  		int beanCount = scanner.scan(BASE_PACKAGE);\n  258  		assertEquals(13, beanCount);\n  ...\n  261  		assertTrue(context.containsBean(\"fooServiceImpl\"));\n  262  		assertTrue(context.containsBean(\"stubFooDao\"));\n  263: 		assertTrue(context.containsBean(\"myNamedComponent\"));\n  264  		assertTrue(context.containsBean(\"myNamedDao\"));\n  265  		assertTrue(context.containsBean(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));\n  ...\n  280  		assertTrue(context.containsBean(\"fooServiceImpl\"));\n  281  		assertTrue(context.containsBean(\"stubFooDao\"));\n  282: 		assertTrue(context.containsBean(\"myNamedComponent\"));\n  283  		assertTrue(context.containsBean(\"myNamedDao\"));\n  284  		assertTrue(context.containsBean(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));\n  ...\n  298  		assertTrue(context.containsBean(\"serviceInvocationCounter\"));\n  299  		assertTrue(context.containsBean(\"stubFooDao\"));\n  300: 		assertTrue(context.containsBean(\"myNamedComponent\"));\n  301  		assertTrue(context.containsBean(\"myNamedDao\"));\n  302  		assertTrue(context.containsBean(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));\n  ...\n  318  		assertTrue(context.containsBean(\"serviceInvocationCounter\"));\n  319  		assertTrue(context.containsBean(\"stubFooDao\"));\n  320: 		assertTrue(context.containsBean(\"myNamedComponent\"));\n  321  		assertTrue(context.containsBean(\"myNamedDao\"));\n  322  		assertFalse(context.containsBean(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));\n  ...\n  336  		assertFalse(context.containsBean(\"serviceInvocationCounter\"));\n  337  		assertTrue(context.containsBean(\"stubFooDao\"));\n  338: 		assertTrue(context.containsBean(\"myNamedComponent\"));\n  339  		assertTrue(context.containsBean(\"myNamedDao\"));\n  340  		assertTrue(context.containsBean(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));\n  ...\n  356  		assertTrue(context.containsBean(\"serviceInvocationCounter\"));\n  357  		assertTrue(context.containsBean(\"stubFooDao\"));\n  358: 		assertTrue(context.containsBean(\"myNamedComponent\"));\n  359  		assertTrue(context.containsBean(\"myNamedDao\"));\n  360  		assertTrue(context.containsBean(AnnotationConfigUtils.AUTOWIRED_ANNOTATION_PROCESSOR_BEAN_NAME));\n  ...\n  479  \n  480  \n  481: 	@Component(\"toBeIgnored\")\n  482  	public class NonStaticInnerClass {\n  483  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\ClassPathFactoryBeanDefinitionScannerTests.java:\n   25  import org.springframework.beans.factory.support.RootBeanDefinition;\n   26  import org.springframework.context.annotation4.DependencyBean;\n   27: import org.springframework.context.annotation4.FactoryMethodComponent;\n   28  import org.springframework.context.support.AbstractApplicationContext;\n   29  import org.springframework.context.support.GenericApplicationContext;\n   ..\n   40  public class ClassPathFactoryBeanDefinitionScannerTests {\n   41  \n   42: 	private static final String BASE_PACKAGE = FactoryMethodComponent.class.getPackage().getName();\n   43  \n   44  \n   ..\n   54  		context.refresh();\n   55  \n   56: 		FactoryMethodComponent fmc = context.getBean(\"factoryMethodComponent\", FactoryMethodComponent.class);\n   57  		assertFalse(fmc.getClass().getName().contains(ClassUtils.CGLIB_CLASS_SEPARATOR));\n   58  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\ClassPathScanningCandidateComponentProviderTests.java:\n   22  import java.util.regex.Pattern;\n   23  \n   24: import example.profilescan.DevComponent;\n   25: import example.profilescan.ProfileAnnotatedComponent;\n   26: import example.profilescan.ProfileMetaAnnotatedComponent;\n   27  import example.scannable.AutowiredQualifierFooService;\n   28  import example.scannable.CustomStereotype;\n   29: import example.scannable.DefaultNamedComponent;\n   30  import example.scannable.FooDao;\n   31  import example.scannable.FooService;\n   32  import example.scannable.FooServiceImpl;\n   33  import example.scannable.MessageBean;\n   34: import example.scannable.NamedComponent;\n   35  import example.scannable.NamedStubDao;\n   36  import example.scannable.ScopedProxyTestBean;\n   ..\n   42  import org.springframework.beans.factory.annotation.AnnotatedGenericBeanDefinition;\n   43  import org.springframework.beans.factory.config.BeanDefinition;\n   44: import org.springframework.context.index.CandidateComponentsTestClassLoader;\n   45  import org.springframework.core.env.ConfigurableEnvironment;\n   46  import org.springframework.core.env.StandardEnvironment;\n   ..\n   50  import org.springframework.core.type.filter.AssignableTypeFilter;\n   51  import org.springframework.core.type.filter.RegexPatternTypeFilter;\n   52: import org.springframework.stereotype.Component;\n   53  import org.springframework.stereotype.Controller;\n   54  import org.springframework.stereotype.Repository;\n   ..\n   64   * @author Stephane Nicoll\n   65   */\n   66: public class ClassPathScanningCandidateComponentProviderTests {\n   67  \n   68  	private static final String TEST_BASE_PACKAGE = \"example.scannable\";\n   ..\n   70  	private static final String TEST_DEFAULT_PROFILE_NAME = \"testDefault\";\n   71  \n   72: 	private static final ClassLoader TEST_BASE_CLASSLOADER = CandidateComponentsTestClassLoader.index(\n   73: 			ClassPathScanningCandidateComponentProviderTests.class.getClassLoader(),\n   74: 			new ClassPathResource(\"spring.components\", NamedComponent.class));\n   75  \n   76  \n   77  	@Test\n   78  	public void defaultsWithScan() {\n   79: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(true);\n   80  		provider.setResourceLoader(new DefaultResourceLoader(\n   81: 				CandidateComponentsTestClassLoader.disableIndex(getClass().getClassLoader())));\n   82  		testDefault(provider, ScannedGenericBeanDefinition.class);\n   83  	}\n   ..\n   85  	@Test\n   86  	public void defaultsWithIndex() {\n   87: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(true);\n   88  		provider.setResourceLoader(new DefaultResourceLoader(TEST_BASE_CLASSLOADER));\n   89  		testDefault(provider, AnnotatedGenericBeanDefinition.class);\n   90  	}\n   91  \n   92: 	private void testDefault(ClassPathScanningCandidateComponentProvider provider,\n   93  			Class<? extends BeanDefinition> expectedBeanDefinitionType) {\n   94: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_BASE_PACKAGE);\n   95: 		assertTrue(containsBeanClass(candidates, DefaultNamedComponent.class));\n   96: 		assertTrue(containsBeanClass(candidates, NamedComponent.class));\n   97  		assertTrue(containsBeanClass(candidates, FooServiceImpl.class));\n   98  		assertTrue(containsBeanClass(candidates, StubFooDao.class));\n   ..\n  105  	@Test\n  106  	public void bogusPackageWithScan() {\n  107: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(true);\n  108  		provider.setResourceLoader(new DefaultResourceLoader(\n  109: 				CandidateComponentsTestClassLoader.disableIndex(getClass().getClassLoader())));\n  110: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(\"bogus\");\n  111  		assertEquals(0, candidates.size());\n  112  	}\n  ...\n  114  	@Test\n  115  	public void bogusPackageWithIndex() {\n  116: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(true);\n  117  		provider.setResourceLoader(new DefaultResourceLoader(TEST_BASE_CLASSLOADER));\n  118: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(\"bogus\");\n  119  		assertEquals(0, candidates.size());\n  120  	}\n  ...\n  122  	@Test\n  123  	public void customFiltersFollowedByResetUseIndex() {\n  124: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  125  		provider.setResourceLoader(new DefaultResourceLoader(TEST_BASE_CLASSLOADER));\n  126: 		provider.addIncludeFilter(new AnnotationTypeFilter(Component.class));\n  127  		provider.resetFilters(true);\n  128: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_BASE_PACKAGE);\n  129  		assertBeanDefinitionType(candidates, AnnotatedGenericBeanDefinition.class);\n  130  	}\n  ...\n  132  	@Test\n  133  	public void customAnnotationTypeIncludeFilterWithScan() {\n  134: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  135  		provider.setResourceLoader(new DefaultResourceLoader(\n  136: 				CandidateComponentsTestClassLoader.disableIndex(getClass().getClassLoader())));\n  137  		testCustomAnnotationTypeIncludeFilter(provider, ScannedGenericBeanDefinition.class);\n  138  	}\n  ...\n  140  	@Test\n  141  	public void customAnnotationTypeIncludeFilterWithIndex() {\n  142: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  143  		provider.setResourceLoader(new DefaultResourceLoader(TEST_BASE_CLASSLOADER));\n  144  		testCustomAnnotationTypeIncludeFilter(provider, AnnotatedGenericBeanDefinition.class);\n  145  	}\n  146  \n  147: 	private void testCustomAnnotationTypeIncludeFilter(ClassPathScanningCandidateComponentProvider provider,\n  148  			Class<? extends BeanDefinition> expectedBeanDefinitionType) {\n  149: 		provider.addIncludeFilter(new AnnotationTypeFilter(Component.class));\n  150  		testDefault(provider, expectedBeanDefinitionType);\n  151  	}\n  ...\n  153  	@Test\n  154  	public void customAssignableTypeIncludeFilterWithScan() {\n  155: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  156  		provider.setResourceLoader(new DefaultResourceLoader(\n  157: 				CandidateComponentsTestClassLoader.disableIndex(getClass().getClassLoader())));\n  158  		testCustomAssignableTypeIncludeFilter(provider, ScannedGenericBeanDefinition.class);\n  159  	}\n  ...\n  161  	@Test\n  162  	public void customAssignableTypeIncludeFilterWithIndex() {\n  163: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  164  		provider.setResourceLoader(new DefaultResourceLoader(TEST_BASE_CLASSLOADER));\n  165  		testCustomAssignableTypeIncludeFilter(provider, AnnotatedGenericBeanDefinition.class);\n  166  	}\n  167  \n  168: 	private void testCustomAssignableTypeIncludeFilter(ClassPathScanningCandidateComponentProvider provider,\n  169  			Class<? extends BeanDefinition> expectedBeanDefinitionType) {\n  170  		provider.addIncludeFilter(new AssignableTypeFilter(FooService.class));\n  171: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_BASE_PACKAGE);\n  172  		// Interfaces/Abstract class are filtered out automatically.\n  173  		assertTrue(containsBeanClass(candidates, AutowiredQualifierFooService.class));\n  ...\n  180  	@Test\n  181  	public void customSupportedIncludeAndExcludedFilterWithScan() {\n  182: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  183  		provider.setResourceLoader(new DefaultResourceLoader(\n  184: 				CandidateComponentsTestClassLoader.disableIndex(getClass().getClassLoader())));\n  185  		testCustomSupportedIncludeAndExcludeFilter(provider, ScannedGenericBeanDefinition.class);\n  186  	}\n  ...\n  188  	@Test\n  189  	public void customSupportedIncludeAndExcludeFilterWithIndex() {\n  190: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  191  		provider.setResourceLoader(new DefaultResourceLoader(TEST_BASE_CLASSLOADER));\n  192  		testCustomSupportedIncludeAndExcludeFilter(provider, AnnotatedGenericBeanDefinition.class);\n  193  	}\n  194  \n  195: 	private void testCustomSupportedIncludeAndExcludeFilter(ClassPathScanningCandidateComponentProvider provider,\n  196  			Class<? extends BeanDefinition> expectedBeanDefinitionType) {\n  197: 		provider.addIncludeFilter(new AnnotationTypeFilter(Component.class));\n  198  		provider.addExcludeFilter(new AnnotationTypeFilter(Service.class));\n  199  		provider.addExcludeFilter(new AnnotationTypeFilter(Repository.class));\n  200: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_BASE_PACKAGE);\n  201: 		assertTrue(containsBeanClass(candidates, NamedComponent.class));\n  202  		assertTrue(containsBeanClass(candidates, ServiceInvocationCounter.class));\n  203  		assertEquals(2, candidates.size());\n  ...\n  207  	@Test\n  208  	public void customSupportIncludeFilterWithNonIndexedTypeUseScan() {\n  209: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  210  		provider.setResourceLoader(new DefaultResourceLoader(TEST_BASE_CLASSLOADER));\n  211  		// This annotation type is not directly annotated with Indexed so we can use\n  212  		// the index to find candidates\n  213  		provider.addIncludeFilter(new AnnotationTypeFilter(CustomStereotype.class));\n  214: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_BASE_PACKAGE);\n  215: 		assertTrue(containsBeanClass(candidates, DefaultNamedComponent.class));\n  216  		assertEquals(1, candidates.size());\n  217  		assertBeanDefinitionType(candidates, ScannedGenericBeanDefinition.class);\n  ...\n  220  	@Test\n  221  	public void customNotSupportedIncludeFilterUseScan() {\n  222: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  223  		provider.setResourceLoader(new DefaultResourceLoader(TEST_BASE_CLASSLOADER));\n  224  		provider.addIncludeFilter(new AssignableTypeFilter(FooDao.class));\n  225: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_BASE_PACKAGE);\n  226  		assertTrue(containsBeanClass(candidates, StubFooDao.class));\n  227  		assertEquals(1, candidates.size());\n  ...\n  231  	@Test\n  232  	public void excludeFilterWithScan() {\n  233: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(true);\n  234  		provider.setResourceLoader(new DefaultResourceLoader(\n  235: 				CandidateComponentsTestClassLoader.disableIndex(getClass().getClassLoader())));\n  236  		provider.addExcludeFilter(new RegexPatternTypeFilter(Pattern.compile(TEST_BASE_PACKAGE + \".*Named.*\")));\n  237  		testExclude(provider, ScannedGenericBeanDefinition.class);\n  ...\n  240  	@Test\n  241  	public void excludeFilterWithIndex() {\n  242: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(true);\n  243  		provider.setResourceLoader(new DefaultResourceLoader(TEST_BASE_CLASSLOADER));\n  244  		provider.addExcludeFilter(new RegexPatternTypeFilter(Pattern.compile(TEST_BASE_PACKAGE + \".*Named.*\")));\n  ...\n  246  	}\n  247  \n  248: 	private void testExclude(ClassPathScanningCandidateComponentProvider provider,\n  249  			Class<? extends BeanDefinition> expectedBeanDefinitionType) {\n  250: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_BASE_PACKAGE);\n  251  		assertTrue(containsBeanClass(candidates, FooServiceImpl.class));\n  252  		assertTrue(containsBeanClass(candidates, StubFooDao.class));\n  ...\n  258  	@Test\n  259  	public void testWithNoFilters() {\n  260: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  261: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_BASE_PACKAGE);\n  262  		assertEquals(0, candidates.size());\n  263  	}\n  264  \n  265  	@Test\n  266: 	public void testWithComponentAnnotationOnly() {\n  267: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  268: 		provider.addIncludeFilter(new AnnotationTypeFilter(Component.class));\n  269  		provider.addExcludeFilter(new AnnotationTypeFilter(Repository.class));\n  270  		provider.addExcludeFilter(new AnnotationTypeFilter(Service.class));\n  271  		provider.addExcludeFilter(new AnnotationTypeFilter(Controller.class));\n  272: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_BASE_PACKAGE);\n  273  		assertEquals(2, candidates.size());\n  274: 		assertTrue(containsBeanClass(candidates, NamedComponent.class));\n  275  		assertTrue(containsBeanClass(candidates, ServiceInvocationCounter.class));\n  276  		assertFalse(containsBeanClass(candidates, FooServiceImpl.class));\n  ...\n  281  	@Test\n  282  	public void testWithAspectAnnotationOnly() throws Exception {\n  283: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  284  		provider.addIncludeFilter(new AnnotationTypeFilter(Aspect.class));\n  285: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_BASE_PACKAGE);\n  286  		assertEquals(1, candidates.size());\n  287  		assertTrue(containsBeanClass(candidates, ServiceInvocationCounter.class));\n  ...\n  290  	@Test\n  291  	public void testWithInterfaceType() {\n  292: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  293  		provider.addIncludeFilter(new AssignableTypeFilter(FooDao.class));\n  294: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_BASE_PACKAGE);\n  295  		assertEquals(1, candidates.size());\n  296  		assertTrue(containsBeanClass(candidates, StubFooDao.class));\n  ...\n  299  	@Test\n  300  	public void testWithClassType() {\n  301: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  302  		provider.addIncludeFilter(new AssignableTypeFilter(MessageBean.class));\n  303: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_BASE_PACKAGE);\n  304  		assertEquals(1, candidates.size());\n  305  		assertTrue(containsBeanClass(candidates, MessageBean.class));\n  ...\n  308  	@Test\n  309  	public void testWithMultipleMatchingFilters() {\n  310: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  311: 		provider.addIncludeFilter(new AnnotationTypeFilter(Component.class));\n  312  		provider.addIncludeFilter(new AssignableTypeFilter(FooServiceImpl.class));\n  313: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_BASE_PACKAGE);\n  314  		assertEquals(6, candidates.size());\n  315: 		assertTrue(containsBeanClass(candidates, NamedComponent.class));\n  316  		assertTrue(containsBeanClass(candidates, ServiceInvocationCounter.class));\n  317  		assertTrue(containsBeanClass(candidates, FooServiceImpl.class));\n  ...\n  320  	@Test\n  321  	public void testExcludeTakesPrecedence() {\n  322: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(false);\n  323: 		provider.addIncludeFilter(new AnnotationTypeFilter(Component.class));\n  324  		provider.addIncludeFilter(new AssignableTypeFilter(FooServiceImpl.class));\n  325  		provider.addExcludeFilter(new AssignableTypeFilter(FooService.class));\n  326: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_BASE_PACKAGE);\n  327  		assertEquals(5, candidates.size());\n  328: 		assertTrue(containsBeanClass(candidates, NamedComponent.class));\n  329  		assertTrue(containsBeanClass(candidates, ServiceInvocationCounter.class));\n  330  		assertFalse(containsBeanClass(candidates, FooServiceImpl.class));\n  ...\n  333  	@Test\n  334  	public void testWithNullEnvironment() {\n  335: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(true);\n  336: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_PROFILE_PACKAGE);\n  337: 		assertThat(containsBeanClass(candidates, ProfileAnnotatedComponent.class), is(false));\n  338  	}\n  339  \n  340  	@Test\n  341  	public void testWithInactiveProfile() {\n  342: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(true);\n  343  		ConfigurableEnvironment env = new StandardEnvironment();\n  344  		env.setActiveProfiles(\"other\");\n  345  		provider.setEnvironment(env);\n  346: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_PROFILE_PACKAGE);\n  347: 		assertThat(containsBeanClass(candidates, ProfileAnnotatedComponent.class), is(false));\n  348  	}\n  349  \n  350  	@Test\n  351  	public void testWithActiveProfile() {\n  352: 		ClassPathScanningCandidateComponentProvider provider = new ClassPathScanningCandidateComponentProvider(true);\n  353  		ConfigurableEnvironment env = new StandardEnvironment();\n  354: 		env.setActiveProfiles(ProfileAnnotatedComponent.PROFILE_NAME);\n  355  		provider.setEnvironment(env);\n  356: 		Set<BeanDefinition> candidates = provider.findCandidateComponents(TEST_PROFILE_PACKAGE);\n  357: 		assertThat(containsBeanClass(candidates, ProfileAnnotatedComponent.class), is(true));\n  358  	}\n  359  \n  ...\n  361  	public void testIntegrationWithAnnotationConfigApplicationContext_noProfile() {\n  362  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  363: 		ctx.register(ProfileAnnotatedComponent.class);\n  364  		ctx.refresh();\n  365: 		assertThat(ctx.containsBean(ProfileAnnotatedComponent.BEAN_NAME), is(false));\n  366  	}\n  367  \n  ...\n  369  	public void testIntegrationWithAnnotationConfigApplicationContext_validProfile() {\n  370  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  371: 		ctx.getEnvironment().setActiveProfiles(ProfileAnnotatedComponent.PROFILE_NAME);\n  372: 		ctx.register(ProfileAnnotatedComponent.class);\n  373  		ctx.refresh();\n  374: 		assertThat(ctx.containsBean(ProfileAnnotatedComponent.BEAN_NAME), is(true));\n  375  	}\n  376  \n  ...\n  378  	public void testIntegrationWithAnnotationConfigApplicationContext_validMetaAnnotatedProfile() {\n  379  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  380: 		ctx.getEnvironment().setActiveProfiles(DevComponent.PROFILE_NAME);\n  381: 		ctx.register(ProfileMetaAnnotatedComponent.class);\n  382  		ctx.refresh();\n  383: 		assertThat(ctx.containsBean(ProfileMetaAnnotatedComponent.BEAN_NAME), is(true));\n  384  	}\n  385  \n  ...\n  388  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  389  		ctx.getEnvironment().setActiveProfiles(\"other\");\n  390: 		ctx.register(ProfileAnnotatedComponent.class);\n  391  		ctx.refresh();\n  392: 		assertThat(ctx.containsBean(ProfileAnnotatedComponent.BEAN_NAME), is(false));\n  393  	}\n  394  \n  ...\n  397  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  398  		ctx.getEnvironment().setActiveProfiles(\"other\");\n  399: 		ctx.register(ProfileMetaAnnotatedComponent.class);\n  400  		ctx.refresh();\n  401: 		assertThat(ctx.containsBean(ProfileMetaAnnotatedComponent.BEAN_NAME), is(false));\n  402  	}\n  403  \n  ...\n  407  		ctx.getEnvironment().setDefaultProfiles(TEST_DEFAULT_PROFILE_NAME);\n  408  		// no active profiles are set\n  409: 		ctx.register(DefaultProfileAnnotatedComponent.class);\n  410  		ctx.refresh();\n  411: 		assertThat(ctx.containsBean(DefaultProfileAnnotatedComponent.BEAN_NAME), is(true));\n  412  	}\n  413  \n  414  	@Test\n  415  	public void testIntegrationWithAnnotationConfigApplicationContext_defaultAndDevProfile() {\n  416: 		Class<?> beanClass = DefaultAndDevProfileAnnotatedComponent.class;\n  417: 		String beanName = DefaultAndDevProfileAnnotatedComponent.BEAN_NAME;\n  418  		{\n  419  			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  ...\n  444  	@Test\n  445  	public void testIntegrationWithAnnotationConfigApplicationContext_metaProfile() {\n  446: 		Class<?> beanClass = MetaProfileAnnotatedComponent.class;\n  447: 		String beanName = MetaProfileAnnotatedComponent.BEAN_NAME;\n  448  		{\n  449  			AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  ...\n  490  \n  491  	@Profile(TEST_DEFAULT_PROFILE_NAME)\n  492: 	@Component(DefaultProfileAnnotatedComponent.BEAN_NAME)\n  493: 	private static class DefaultProfileAnnotatedComponent {\n  494: 		static final String BEAN_NAME = \"defaultProfileAnnotatedComponent\";\n  495  	}\n  496  \n  497  	@Profile({TEST_DEFAULT_PROFILE_NAME, \"dev\"})\n  498: 	@Component(DefaultAndDevProfileAnnotatedComponent.BEAN_NAME)\n  499: 	private static class DefaultAndDevProfileAnnotatedComponent {\n  500: 		static final String BEAN_NAME = \"defaultAndDevProfileAnnotatedComponent\";\n  501  	}\n  502  \n  503  	@DefaultProfile @DevProfile\n  504: 	@Component(MetaProfileAnnotatedComponent.BEAN_NAME)\n  505: 	private static class MetaProfileAnnotatedComponent {\n  506: 		static final String BEAN_NAME = \"metaProfileAnnotatedComponent\";\n  507  	}\n  508  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\componentscan\\cycle\\left\\LeftConfig.java:\n   15   */\n   16  \n   17: package org.springframework.context.annotation.componentscan.cycle.left;\n   18  \n   19: import org.springframework.context.annotation.ComponentScan;\n   20  import org.springframework.context.annotation.Configuration;\n   21  \n   22  @Configuration\n   23: @ComponentScan(\"org.springframework.context.annotation.componentscan.cycle.right\")\n   24  public class LeftConfig {\n   25  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\componentscan\\cycle\\right\\RightConfig.java:\n   15   */\n   16  \n   17: package org.springframework.context.annotation.componentscan.cycle.right;\n   18  \n   19: import org.springframework.context.annotation.ComponentScan;\n   20  import org.springframework.context.annotation.Configuration;\n   21  \n   22  @Configuration\n   23: @ComponentScan(\"org.springframework.context.annotation.componentscan.cycle.left\")\n   24  public class RightConfig {\n   25  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\componentscan\\importing\\ImportingConfig.java:\n   15   */\n   16  \n   17: package org.springframework.context.annotation.componentscan.importing;\n   18  \n   19: import org.springframework.context.annotation.ComponentScanAndImportAnnotationInteractionTests;\n   20  import org.springframework.context.annotation.Configuration;\n   21  import org.springframework.context.annotation.Import;\n   22  \n   23  @Configuration\n   24: @Import(ComponentScanAndImportAnnotationInteractionTests.ImportedConfig.class)\n   25  public class ImportingConfig {\n   26  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\componentscan\\level1\\Level1Config.java:\n   15   */\n   16  \n   17: package org.springframework.context.annotation.componentscan.level1;\n   18  \n   19  import org.springframework.context.annotation.Bean;\n   20: import org.springframework.context.annotation.ComponentScan;\n   21  import org.springframework.context.annotation.Configuration;\n   22  import org.springframework.tests.sample.beans.TestBean;\n   23  \n   24  @Configuration\n   25: @ComponentScan(\"org.springframework.context.annotation.componentscan.level2\")\n   26  public class Level1Config {\n   27  	@Bean\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\componentscan\\level2\\Level2Config.java:\n   15   */\n   16  \n   17: package org.springframework.context.annotation.componentscan.level2;\n   18  \n   19  import org.springframework.context.annotation.Bean;\n   20: import org.springframework.context.annotation.ComponentScan;\n   21  import org.springframework.context.annotation.Configuration;\n   22  import org.springframework.tests.sample.beans.TestBean;\n   23  \n   24  @Configuration\n   25: @ComponentScan(\"org.springframework.context.annotation.componentscan.level3\")\n   26  public class Level2Config {\n   27  	@Bean\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\componentscan\\level3\\Level3Component.java:\n   15   */\n   16  \n   17: package org.springframework.context.annotation.componentscan.level3;\n   18  \n   19: import org.springframework.stereotype.Component;\n   20  \n   21: @Component\n   22: public class Level3Component {\n   23  \n   24  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\componentscan\\simple\\ClassWithNestedComponents.java:\n   15   */\n   16  \n   17: package org.springframework.context.annotation.componentscan.simple;\n   18  \n   19: import org.springframework.stereotype.Component;\n   20  \n   21: public class ClassWithNestedComponents {\n   22  \n   23: 	@Component\n   24: 	public static class NestedComponent extends ClassWithNestedComponents {\n   25  	}\n   26  \n   27: 	@Component\n   28: 	public static class OtherNestedComponent extends ClassWithNestedComponents {\n   29  	}\n   30  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\componentscan\\simple\\SimpleComponent.java:\n   15   */\n   16  \n   17: package org.springframework.context.annotation.componentscan.simple;\n   18  \n   19  import org.springframework.context.annotation.Bean;\n   20: import org.springframework.stereotype.Component;\n   21  \n   22: @Component\n   23: public class SimpleComponent {\n   24  \n   25  	@Bean\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\ComponentScanAndImportAnnotationInteractionTests.java:\n   20  \n   21  import org.springframework.beans.factory.support.RootBeanDefinition;\n   22: import org.springframework.context.annotation.componentscan.importing.ImportingConfig;\n   23: import org.springframework.context.annotation.componentscan.simple.SimpleComponent;\n   24  \n   25  /**\n   26:  * Tests covering overlapping use of @ComponentScan and @Import annotations.\n   27   *\n   28   * @author Chris Beams\n   29   * @since 3.1\n   30   */\n   31: public class ComponentScanAndImportAnnotationInteractionTests {\n   32  \n   33  	@Test\n   34: 	public void componentScanOverlapsWithImport() {\n   35  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n   36  		ctx.register(Config1.class);\n   37  		ctx.register(Config2.class);\n   38: 		ctx.refresh(); // no conflicts found trying to register SimpleComponent\n   39: 		ctx.getBean(SimpleComponent.class); // succeeds -> there is only one bean of type SimpleComponent\n   40  	}\n   41  \n   42  	@Test\n   43: 	public void componentScanOverlapsWithImportUsingAsm() {\n   44  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n   45  		ctx.registerBeanDefinition(\"config1\", new RootBeanDefinition(Config1.class.getName()));\n   46  		ctx.registerBeanDefinition(\"config2\", new RootBeanDefinition(Config2.class.getName()));\n   47: 		ctx.refresh(); // no conflicts found trying to register SimpleComponent\n   48: 		ctx.getBean(SimpleComponent.class); // succeeds -> there is only one bean of type SimpleComponent\n   49  	}\n   50  \n   51  	@Test\n   52: 	public void componentScanViaImport() {\n   53  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n   54  		ctx.register(Config3.class);\n   55  		ctx.refresh();\n   56: 		ctx.getBean(SimpleComponent.class);\n   57  	}\n   58  \n   59  	@Test\n   60: 	public void componentScanViaImportUsingAsm() {\n   61  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n   62  		ctx.registerBeanDefinition(\"config\", new RootBeanDefinition(Config3.class.getName()));\n   63  		ctx.refresh();\n   64: 		ctx.getBean(SimpleComponent.class);\n   65  	}\n   66  \n   67  	@Test\n   68: 	public void componentScanViaImportUsingScan() {\n   69  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n   70: 		ctx.scan(\"org.springframework.context.annotation.componentscan.importing\");\n   71  		ctx.refresh();\n   72: 		ctx.getBean(SimpleComponent.class);\n   73  	}\n   74  \n   75  	@Test\n   76: 	public void circularImportViaComponentScan() {\n   77  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n   78  		ctx.registerBeanDefinition(\"config\", new RootBeanDefinition(ImportingConfig.class.getName()));\n   79  		ctx.refresh();\n   80: 		ctx.getBean(SimpleComponent.class);\n   81  	}\n   82  \n   83  \n   84: 	@ComponentScan(\"org.springframework.context.annotation.componentscan.simple\")\n   85  	static final class Config1 {\n   86  	}\n   87  \n   88  \n   89: 	@Import(org.springframework.context.annotation.componentscan.simple.SimpleComponent.class)\n   90  	static final class Config2 {\n   91  	}\n   ..\n   97  \n   98  \n   99: 	@ComponentScan(\"org.springframework.context.annotation.componentscan.simple\")\n  100: 	@ComponentScan(\"org.springframework.context.annotation.componentscan.importing\")\n  101  	public static final class ImportedConfig {\n  102  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\ComponentScanAnnotationIntegrationTests.java:\n   24  import java.util.HashSet;\n   25  \n   26: import example.scannable.CustomComponent;\n   27  import example.scannable.CustomStereotype;\n   28: import example.scannable.DefaultNamedComponent;\n   29  import example.scannable.FooService;\n   30  import example.scannable.MessageBean;\n   31  import example.scannable.ScopedProxyTestBean;\n   32: import example.scannable_implicitbasepackage.ComponentScanAnnotatedConfigWithImplicitBasePackage;\n   33: import example.scannable_implicitbasepackage.ConfigurableComponent;\n   34  import example.scannable_scoped.CustomScopeAnnotationBean;\n   35  import example.scannable_scoped.MyScope;\n   ..\n   48  import org.springframework.context.EnvironmentAware;\n   49  import org.springframework.context.ResourceLoaderAware;\n   50: import org.springframework.context.annotation.ComponentScan.Filter;\n   51: import org.springframework.context.annotation.ComponentScanParserTests.KustomAnnotationAutowiredBean;\n   52: import org.springframework.context.annotation.componentscan.simple.ClassWithNestedComponents;\n   53: import org.springframework.context.annotation.componentscan.simple.SimpleComponent;\n   54  import org.springframework.context.support.GenericApplicationContext;\n   55  import org.springframework.core.env.ConfigurableEnvironment;\n   ..\n   67  \n   68  /**\n   69:  * Integration tests for processing ComponentScan-annotated Configuration classes.\n   70   *\n   71   * @author Chris Beams\n   ..\n   75   */\n   76  @SuppressWarnings(\"resource\")\n   77: public class ComponentScanAnnotationIntegrationTests {\n   78  \n   79  	@Test\n   ..\n   89  	public void viaContextRegistration() {\n   90  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n   91: 		ctx.register(ComponentScanAnnotatedConfig.class);\n   92  		ctx.refresh();\n   93: 		ctx.getBean(ComponentScanAnnotatedConfig.class);\n   94  		ctx.getBean(TestBean.class);\n   95: 		assertThat(\"config class bean not found\", ctx.containsBeanDefinition(\"componentScanAnnotatedConfig\"), is(true));\n   96: 		assertThat(\"@ComponentScan annotated @Configuration class registered directly against \" +\n   97: 				\"AnnotationConfigApplicationContext did not trigger component scanning as expected\",\n   98  				ctx.containsBean(\"fooServiceImpl\"), is(true));\n   99  	}\n  ...\n  102  	public void viaContextRegistration_WithValueAttribute() {\n  103  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  104: 		ctx.register(ComponentScanAnnotatedConfig_WithValueAttribute.class);\n  105  		ctx.refresh();\n  106: 		ctx.getBean(ComponentScanAnnotatedConfig_WithValueAttribute.class);\n  107  		ctx.getBean(TestBean.class);\n  108: 		assertThat(\"config class bean not found\", ctx.containsBeanDefinition(\"componentScanAnnotatedConfig_WithValueAttribute\"), is(true));\n  109: 		assertThat(\"@ComponentScan annotated @Configuration class registered directly against \" +\n  110: 				\"AnnotationConfigApplicationContext did not trigger component scanning as expected\",\n  111  				ctx.containsBean(\"fooServiceImpl\"), is(true));\n  112  	}\n  ...\n  115  	public void viaContextRegistration_FromPackageOfConfigClass() {\n  116  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  117: 		ctx.register(ComponentScanAnnotatedConfigWithImplicitBasePackage.class);\n  118  		ctx.refresh();\n  119: 		ctx.getBean(ComponentScanAnnotatedConfigWithImplicitBasePackage.class);\n  120: 		assertThat(\"config class bean not found\", ctx.containsBeanDefinition(\"componentScanAnnotatedConfigWithImplicitBasePackage\"), is(true));\n  121: 		assertThat(\"@ComponentScan annotated @Configuration class registered directly against \" +\n  122: 				\"AnnotationConfigApplicationContext did not trigger component scanning as expected\",\n  123: 				ctx.containsBean(\"scannedComponent\"), is(true));\n  124: 		assertThat(\"@Bean method overrides scanned class\", ctx.getBean(ConfigurableComponent.class).isFlag(), is(true));\n  125  	}\n  126  \n  ...\n  131  		ctx.refresh();\n  132  		ctx.getBean(ComposedAnnotationConfig.class);\n  133: 		ctx.getBean(SimpleComponent.class);\n  134: 		ctx.getBean(ClassWithNestedComponents.NestedComponent.class);\n  135: 		ctx.getBean(ClassWithNestedComponents.OtherNestedComponent.class);\n  136  		assertThat(\"config class bean not found\",\n  137: 				ctx.containsBeanDefinition(\"componentScanAnnotationIntegrationTests.ComposedAnnotationConfig\"), is(true));\n  138: 		assertThat(\"@ComponentScan annotated @Configuration class registered directly against \" +\n  139: 						\"AnnotationConfigApplicationContext did not trigger component scanning as expected\",\n  140: 				ctx.containsBean(\"simpleComponent\"), is(true));\n  141  	}\n  142  \n  ...\n  144  	public void viaBeanRegistration() {\n  145  		DefaultListableBeanFactory bf = new DefaultListableBeanFactory();\n  146: 		bf.registerBeanDefinition(\"componentScanAnnotatedConfig\",\n  147: 				genericBeanDefinition(ComponentScanAnnotatedConfig.class).getBeanDefinition());\n  148  		bf.registerBeanDefinition(\"configurationClassPostProcessor\",\n  149  				genericBeanDefinition(ConfigurationClassPostProcessor.class).getBeanDefinition());\n  150  		GenericApplicationContext ctx = new GenericApplicationContext(bf);\n  151  		ctx.refresh();\n  152: 		ctx.getBean(ComponentScanAnnotatedConfig.class);\n  153  		ctx.getBean(TestBean.class);\n  154: 		assertThat(\"config class bean not found\", ctx.containsBeanDefinition(\"componentScanAnnotatedConfig\"), is(true));\n  155: 		assertThat(\"@ComponentScan annotated @Configuration class registered \" +\n  156: 				\"as bean definition did not trigger component scanning as expected\",\n  157  				ctx.containsBean(\"fooServiceImpl\"), is(true));\n  158  	}\n  ...\n  161  	public void withCustomBeanNameGenerator() {\n  162  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  163: 		ctx.register(ComponentScanWithBeanNameGenerator.class);\n  164  		ctx.refresh();\n  165  		assertThat(ctx.containsBean(\"custom_fooServiceImpl\"), is(true));\n  ...\n  169  	@Test\n  170  	public void withScopeResolver() {\n  171: 		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ComponentScanWithScopeResolver.class);\n  172  		// custom scope annotation makes the bean prototype scoped. subsequent calls\n  173  		// to getBean should return distinct instances.\n  174  		assertThat(ctx.getBean(CustomScopeAnnotationBean.class), not(sameInstance(ctx.getBean(CustomScopeAnnotationBean.class))));\n  175: 		assertThat(ctx.containsBean(\"scannedComponent\"), is(false));\n  176  	}\n  177  \n  178  	@Test\n  179: 	public void multiComponentScan() {\n  180: 		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(MultiComponentScan.class);\n  181  		assertThat(ctx.getBean(CustomScopeAnnotationBean.class), not(sameInstance(ctx.getBean(CustomScopeAnnotationBean.class))));\n  182: 		assertThat(ctx.containsBean(\"scannedComponent\"), is(true));\n  183  	}\n  184  \n  185  	@Test\n  186  	public void withCustomTypeFilter() {\n  187: 		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ComponentScanWithCustomTypeFilter.class);\n  188: 		assertFalse(ctx.getDefaultListableBeanFactory().containsSingleton(\"componentScanParserTests.KustomAnnotationAutowiredBean\"));\n  189: 		KustomAnnotationAutowiredBean testBean = ctx.getBean(\"componentScanParserTests.KustomAnnotationAutowiredBean\", KustomAnnotationAutowiredBean.class);\n  190  		assertThat(testBean.getDependency(), notNullValue());\n  191  	}\n  ...\n  193  	@Test\n  194  	public void withAwareTypeFilter() {\n  195: 		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext(ComponentScanWithAwareTypeFilter.class);\n  196  		assertTrue(ctx.getEnvironment().acceptsProfiles(\"the-filter-ran\"));\n  197  	}\n  ...\n  200  	public void withScopedProxy() throws IOException, ClassNotFoundException {\n  201  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  202: 		ctx.register(ComponentScanWithScopedProxy.class);\n  203  		ctx.getBeanFactory().registerScope(\"myScope\", new SimpleMapScope());\n  204  		ctx.refresh();\n  ...\n  217  	public void withScopedProxyThroughRegex() throws IOException, ClassNotFoundException {\n  218  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  219: 		ctx.register(ComponentScanWithScopedProxyThroughRegex.class);\n  220  		ctx.getBeanFactory().registerScope(\"myScope\", new SimpleMapScope());\n  221  		ctx.refresh();\n  ...\n  229  	public void withScopedProxyThroughAspectJPattern() throws IOException, ClassNotFoundException {\n  230  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  231: 		ctx.register(ComponentScanWithScopedProxyThroughAspectJPattern.class);\n  232  		ctx.getBeanFactory().registerScope(\"myScope\", new SimpleMapScope());\n  233  		ctx.refresh();\n  ...\n  241  	public void withMultipleAnnotationIncludeFilters1() throws IOException, ClassNotFoundException {\n  242  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  243: 		ctx.register(ComponentScanWithMultipleAnnotationIncludeFilters1.class);\n  244  		ctx.refresh();\n  245: 		ctx.getBean(DefaultNamedComponent.class); // @CustomStereotype-annotated\n  246: 		ctx.getBean(MessageBean.class);           // @CustomComponent-annotated\n  247  	}\n  248  \n  ...\n  250  	public void withMultipleAnnotationIncludeFilters2() throws IOException, ClassNotFoundException {\n  251  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  252: 		ctx.register(ComponentScanWithMultipleAnnotationIncludeFilters2.class);\n  253  		ctx.refresh();\n  254: 		ctx.getBean(DefaultNamedComponent.class); // @CustomStereotype-annotated\n  255: 		ctx.getBean(MessageBean.class);           // @CustomComponent-annotated\n  256  	}\n  257  \n  ...\n  259  	public void withBasePackagesAndValueAlias() {\n  260  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n  261: 		ctx.register(ComponentScanWithBasePackagesAndValueAlias.class);\n  262  		ctx.refresh();\n  263  		assertThat(ctx.containsBean(\"fooServiceImpl\"), is(true));\n  ...\n  266  \n  267  	@Configuration\n  268: 	@ComponentScan\n  269  	@Retention(RetentionPolicy.RUNTIME)\n  270  	@Target(ElementType.TYPE)\n  ...\n  274  	}\n  275  \n  276: 	@ComposedConfiguration(basePackages = \"org.springframework.context.annotation.componentscan.simple\")\n  277  	public static class ComposedAnnotationConfig {\n  278  	}\n  ...\n  323  \n  324  @Configuration\n  325: @ComponentScan(basePackageClasses = example.scannable._package.class)\n  326: class ComponentScanAnnotatedConfig {\n  327  \n  328  	@Bean\n  ...\n  333  \n  334  @Configuration\n  335: @ComponentScan(\"example.scannable\")\n  336: class ComponentScanAnnotatedConfig_WithValueAttribute {\n  337  \n  338  	@Bean\n  ...\n  343  \n  344  @Configuration\n  345: @ComponentScan\n  346: class ComponentScanWithNoPackagesConfig {\n  347  }\n  348  \n  349  @Configuration\n  350: @ComponentScan(basePackages = \"example.scannable\", nameGenerator = MyBeanNameGenerator.class)\n  351: class ComponentScanWithBeanNameGenerator {\n  352  }\n  353  \n  ...\n  361  \n  362  @Configuration\n  363: @ComponentScan(basePackages = \"example.scannable_scoped\", scopeResolver = MyScopeMetadataResolver.class)\n  364: class ComponentScanWithScopeResolver {\n  365  }\n  366  \n  367  @Configuration\n  368: @ComponentScan(basePackages = \"example.scannable_scoped\", scopeResolver = MyScopeMetadataResolver.class)\n  369: @ComponentScan(basePackages = \"example.scannable_implicitbasepackage\")\n  370: class MultiComponentScan {\n  371  }\n  372  \n  ...\n  379  \n  380  @Configuration\n  381: @ComponentScan(\n  382  		basePackages = \"org.springframework.context.annotation\",\n  383  		useDefaultFilters = false,\n  384: 		includeFilters = @Filter(type = FilterType.CUSTOM, classes = ComponentScanParserTests.CustomTypeFilter.class),\n  385  		// exclude this class from scanning since it's in the scanned package\n  386: 		excludeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = ComponentScanWithCustomTypeFilter.class),\n  387  		lazyInit = true)\n  388: class ComponentScanWithCustomTypeFilter {\n  389  \n  390  	@Bean\n  ...\n  392  	public static CustomAutowireConfigurer customAutowireConfigurer() {\n  393  		CustomAutowireConfigurer cac = new CustomAutowireConfigurer();\n  394: 		cac.setCustomQualifierTypes(new HashSet() {{ add(ComponentScanParserTests.CustomAnnotation.class); }});\n  395  		return cac;\n  396  	}\n  397  \n  398: 	public ComponentScanParserTests.KustomAnnotationAutowiredBean testBean() {\n  399: 		return new ComponentScanParserTests.KustomAnnotationAutowiredBean();\n  400  	}\n  401  }\n  402  \n  403  @Configuration\n  404: @ComponentScan(\n  405  		basePackages = \"org.springframework.context.annotation\",\n  406  		useDefaultFilters = false,\n  407: 		includeFilters = @Filter(type = FilterType.CUSTOM, classes = ComponentScanAnnotationIntegrationTests.AwareTypeFilter.class),\n  408  		lazyInit = true)\n  409: class ComponentScanWithAwareTypeFilter {}\n  410  \n  411  @Configuration\n  412: @ComponentScan(basePackages = \"example.scannable\",\n  413  		scopedProxy = ScopedProxyMode.INTERFACES,\n  414  		useDefaultFilters = false,\n  415  		includeFilters = @Filter(type = FilterType.ASSIGNABLE_TYPE, classes = ScopedProxyTestBean.class))\n  416: class ComponentScanWithScopedProxy {}\n  417  \n  418  @Configuration\n  419: @ComponentScan(basePackages = \"example.scannable\",\n  420  		scopedProxy = ScopedProxyMode.INTERFACES,\n  421  		useDefaultFilters = false,\n  422  		includeFilters = @Filter(type=FilterType.REGEX, pattern = \"((?:[a-z.]+))ScopedProxyTestBean\"))\n  423: class ComponentScanWithScopedProxyThroughRegex {}\n  424  \n  425  @Configuration\n  426: @ComponentScan(basePackages = \"example.scannable\",\n  427  		scopedProxy = ScopedProxyMode.INTERFACES,\n  428  		useDefaultFilters = false,\n  429  		includeFilters = @Filter(type=FilterType.ASPECTJ, pattern = \"*..ScopedProxyTestBean\"))\n  430: class ComponentScanWithScopedProxyThroughAspectJPattern {}\n  431  \n  432  @Configuration\n  433: @ComponentScan(basePackages = \"example.scannable\",\n  434  		useDefaultFilters = false,\n  435  		includeFilters = {\n  436  			@Filter(CustomStereotype.class),\n  437: 			@Filter(CustomComponent.class)\n  438  		}\n  439  	)\n  440: class ComponentScanWithMultipleAnnotationIncludeFilters1 {}\n  441  \n  442  @Configuration\n  443: @ComponentScan(basePackages = \"example.scannable\",\n  444  		useDefaultFilters = false,\n  445: 		includeFilters = @Filter({CustomStereotype.class, CustomComponent.class})\n  446  	)\n  447: class ComponentScanWithMultipleAnnotationIncludeFilters2 {}\n  448  \n  449  @Configuration\n  450: @ComponentScan(\n  451  		value = \"example.scannable\",\n  452  		basePackages = \"example.scannable\",\n  453  		basePackageClasses = example.scannable._package.class)\n  454: class ComponentScanWithBasePackagesAndValueAlias {}\n  455  \n  456  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\ComponentScanAnnotationRecursionTests.java:\n   19  import org.junit.Test;\n   20  \n   21: import org.springframework.context.annotation.componentscan.cycle.left.LeftConfig;\n   22: import org.springframework.context.annotation.componentscan.level1.Level1Config;\n   23: import org.springframework.context.annotation.componentscan.level2.Level2Config;\n   24: import org.springframework.context.annotation.componentscan.level3.Level3Component;\n   25  \n   26  import static org.hamcrest.CoreMatchers.*;\n   ..\n   28  \n   29  /**\n   30:  * Tests ensuring that configuration classes marked with @ComponentScan\n   31   * may be processed recursively\n   32   *\n   ..\n   34   * @since 3.1\n   35   */\n   36: public class ComponentScanAnnotationRecursionTests {\n   37  \n   38  	@Test\n   ..\n   45  		ctx.getBean(Level1Config.class);\n   46  		ctx.getBean(Level2Config.class);\n   47: 		ctx.getBean(Level3Component.class);\n   48  \n   49  		// assert that enhancement is working\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\ComponentScanAnnotationTests.java:\n   20  \n   21  import org.springframework.beans.factory.support.DefaultBeanNameGenerator;\n   22: import org.springframework.context.annotation.ComponentScan.Filter;\n   23  import org.springframework.core.type.filter.TypeFilter;\n   24  \n   25  /**\n   26:  * Unit tests for the @ComponentScan annotation.\n   27   *\n   28   * @author Chris Beams\n   29   * @since 3.1\n   30:  * @see ComponentScanAnnotationIntegrationTests\n   31   */\n   32: public class ComponentScanAnnotationTests {\n   33  \n   34  	@Test\n   35  	public void noop() {\n   36: 		// no-op; the @ComponentScan-annotated MyConfig class below simply excercises\n   37  		// available attributes of the annotation.\n   38  	}\n   ..\n   44  \n   45  @Configuration\n   46: @ComponentScan(\n   47  	basePackageClasses = TestBean.class,\n   48  	nameGenerator = DefaultBeanNameGenerator.class,\n   ..\n   62  }\n   63  \n   64: @ComponentScan(basePackageClasses = example.scannable.NamedComponent.class)\n   65  class SimpleConfig {\n   66  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\ComponentScanParserBeanDefinitionDefaultsTests.java:\n   30   * @author Chris Beams\n   31   */\n   32: public class ComponentScanParserBeanDefinitionDefaultsTests {\n   33  \n   34: 	private static final String TEST_BEAN_NAME = \"componentScanParserBeanDefinitionDefaultsTests.DefaultsTestBean\";\n   35  \n   36  	private static final String LOCATION_PREFIX = \"org/springframework/context/annotation/\";\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\ComponentScanParserScopedProxyTests.java:\n   38   * @author Sam Brannen\n   39   */\n   40: public class ComponentScanParserScopedProxyTests {\n   41  \n   42  	@Rule\n   ..\n  107  	public void testInvalidConfigScopedProxy() throws Exception {\n  108  		exception.expect(BeanDefinitionParsingException.class);\n  109: 		exception.expectMessage(containsString(\"Cannot define both 'scope-resolver' and 'scoped-proxy' on <component-scan> tag\"));\n  110  		exception.expectMessage(containsString(\"Offending resource: class path resource [org/springframework/context/annotation/scopedProxyInvalidConfigTests.xml]\"));\n  111  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\ComponentScanParserTests.java:\n   22  import java.lang.annotation.Target;\n   23  \n   24: import example.profilescan.ProfileAnnotatedComponent;\n   25  import example.scannable.AutowiredQualifierFooService;\n   26  import org.junit.Test;\n   ..\n   43   * @author Sam Brannen\n   44   */\n   45: public class ComponentScanParserTests {\n   46  \n   47  	private ClassPathXmlApplicationContext loadContext(String path) {\n   ..\n   93  \n   94  	@Test\n   95: 	public void componentScanWithAutowiredQualifier() {\n   96: 		ClassPathXmlApplicationContext context = loadContext(\"componentScanWithAutowiredQualifierTests.xml\");\n   97  		AutowiredQualifierFooService fooService = (AutowiredQualifierFooService) context.getBean(\"fooService\");\n   98  		assertTrue(fooService.isInitCalled());\n   ..\n  102  \n  103  	@Test\n  104: 	public void customAnnotationUsedForBothComponentScanAndQualifier() {\n  105: 		ClassPathXmlApplicationContext context = loadContext(\"customAnnotationUsedForBothComponentScanAndQualifierTests.xml\");\n  106  		KustomAnnotationAutowiredBean testBean = (KustomAnnotationAutowiredBean) context.getBean(\"testBean\");\n  107  		assertNotNull(testBean.getDependency());\n  ...\n  118  \n  119  	@Test\n  120: 	public void componentScanRespectsProfileAnnotation() {\n  121: 		String xmlLocation = \"org/springframework/context/annotation/componentScanRespectsProfileAnnotationTests.xml\";\n  122  		{ // should exclude the profile-annotated bean if active profiles remains unset\n  123  			GenericXmlApplicationContext context = new GenericXmlApplicationContext();\n  124  			context.load(xmlLocation);\n  125  			context.refresh();\n  126: 			assertThat(context.containsBean(ProfileAnnotatedComponent.BEAN_NAME), is(false));\n  127  			context.close();\n  128  		}\n  129  		{ // should include the profile-annotated bean with active profiles set\n  130  			GenericXmlApplicationContext context = new GenericXmlApplicationContext();\n  131: 			context.getEnvironment().setActiveProfiles(ProfileAnnotatedComponent.PROFILE_NAME);\n  132  			context.load(xmlLocation);\n  133  			context.refresh();\n  134: 			assertThat(context.containsBean(ProfileAnnotatedComponent.BEAN_NAME), is(true));\n  135  			context.close();\n  136  		}\n  ...\n  138  			ConfigurableApplicationContext context = new ClassPathXmlApplicationContext(new String[] { xmlLocation },\n  139  				false);\n  140: 			context.getEnvironment().setActiveProfiles(ProfileAnnotatedComponent.PROFILE_NAME);\n  141  			context.refresh();\n  142: 			assertThat(context.containsBean(ProfileAnnotatedComponent.BEAN_NAME), is(true));\n  143  			context.close();\n  144  		}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\ComponentScanParserWithUserDefinedStrategiesTests.java:\n   29   * @author Mark Fisher\n   30   */\n   31: public class ComponentScanParserWithUserDefinedStrategiesTests {\n   32  \n   33  	@Test\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\configuration\\BeanMethodQualificationTests.java:\n   31  import org.springframework.context.annotation.Scope;\n   32  import org.springframework.context.annotation.ScopedProxyMode;\n   33: import org.springframework.stereotype.Component;\n   34  import org.springframework.tests.sample.beans.NestedTestBean;\n   35  import org.springframework.tests.sample.beans.TestBean;\n   ..\n  151  	}\n  152  \n  153: 	@Component @Lazy\n  154  	static class StandardPojo {\n  155  \n  ...\n  224  	}\n  225  \n  226: 	@Component @Lazy\n  227  	@Retention(RetentionPolicy.RUNTIME)\n  228  	public @interface InterestingPojo {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\configuration\\ConfigurationBeanNameTests.java:\n   26  import org.springframework.context.annotation.Configuration;\n   27  import org.springframework.context.annotation.Import;\n   28: import org.springframework.stereotype.Component;\n   29  \n   30  import static org.hamcrest.CoreMatchers.*;\n   ..\n   33  /**\n   34   * Unit tests ensuring that configuration class bean names as expressed via @Configuration\n   35:  * or @Component 'value' attributes are indeed respected, and that customization of bean\n   36   * naming through a BeanNameGenerator strategy works as expected.\n   37   *\n   ..\n   84  	@Import(C.class)\n   85  	static class A {\n   86: 		@Component(\"nested\")\n   87  		static class B {\n   88  			@Bean public String nestedBean() { return \"\"; }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\configuration\\ConfigurationClassAspectIntegrationTests.java:\n   46   *\n   47   * <p>Currently it is assumed that the user is bootstrapping Configuration class processing via XML (using\n   48:  * annotation-config or component-scan), and thus will also use {@code <aop:aspectj-autoproxy/>} to enable\n   49   * processing of the Aspect annotation.\n   50   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\configuration\\Spr10668Tests.java:\n   41  		AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(\n   42  				ChildConfig.class);\n   43: 		assertNotNull(context.getBean(MyComponent.class));\n   44  		context.close();\n   45  	}\n   ..\n   49  \n   50  		@Autowired(required = false)\n   51: 		MyComponent component;\n   52  \n   53  		public ParentConfig() {\n   ..\n   66  \n   67  		@Bean\n   68: 		public MyComponentImpl myComponent() {\n   69: 			return new MyComponentImpl();\n   70  		}\n   71  \n   72  	}\n   73  \n   74: 	public static interface MyComponent {\n   75  	}\n   76  \n   77: 	public static class MyComponentImpl implements MyComponent {\n   78  	}\n   79  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\configuration\\spr8955\\Spr8955Parent.java:\n   17  package org.springframework.context.annotation.configuration.spr8955;\n   18  \n   19: import org.springframework.stereotype.Component;\n   20  \n   21  /**\n   ..\n   25  abstract class Spr8955Parent {\n   26  \n   27: 	@Component\n   28  	static class Spr8955Child extends Spr8955Parent {\n   29  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\configuration\\spr9031\\scanpackage\\Spr9031Component.java:\n   20  \n   21  @MarkerAnnotation\n   22: public class Spr9031Component {\n   23  \n   24  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\configuration\\spr9031\\Spr9031Tests.java:\n   21  import org.springframework.beans.factory.annotation.Autowired;\n   22  import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n   23: import org.springframework.context.annotation.ComponentScan;\n   24: import org.springframework.context.annotation.ComponentScan.Filter;\n   25  import org.springframework.context.annotation.Configuration;\n   26  import org.springframework.context.annotation.Import;\n   27: import org.springframework.context.annotation.configuration.spr9031.scanpackage.Spr9031Component;\n   28  \n   29  import static org.hamcrest.CoreMatchers.*;\n   ..\n   67  \n   68  	@Configuration\n   69: 	@ComponentScan(\n   70  			basePackages = \"org.springframework.context.annotation.configuration.spr9031.scanpackage\",\n   71  			includeFilters = { @Filter(MarkerAnnotation.class) })\n   ..\n   73  		// fails to wire when LowLevelConfig is processed with ASM because nested @Filter\n   74  		// annotation is not parsed\n   75: 		@Autowired Spr9031Component scanned;\n   76  	}\n   77  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\ConfigurationClassPostProcessorTests.java:\n   42  import org.springframework.beans.factory.support.RootBeanDefinition;\n   43  import org.springframework.context.ApplicationContext;\n   44: import org.springframework.context.annotation.componentscan.simple.SimpleComponent;\n   45  import org.springframework.core.annotation.Order;\n   46  import org.springframework.core.env.StandardEnvironment;\n   47  import org.springframework.core.io.DescriptiveResource;\n   48: import org.springframework.stereotype.Component;\n   49  import org.springframework.tests.sample.beans.ITestBean;\n   50  import org.springframework.tests.sample.beans.TestBean;\n   ..\n  186  \n  187  	@Test\n  188: 	public void postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverridesUsingReflection() {\n  189  		RootBeanDefinition beanDefinition = new RootBeanDefinition(\n  190: 				MetaComponentScanConfigurationWithAttributeOverridesClass.class);\n  191  		assertSupportForComposedAnnotation(beanDefinition);\n  192  	}\n  193  \n  194  	@Test\n  195: 	public void postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverridesUsingAsm() {\n  196  		RootBeanDefinition beanDefinition = new RootBeanDefinition(\n  197: 				MetaComponentScanConfigurationWithAttributeOverridesClass.class.getName());\n  198  		assertSupportForComposedAnnotation(beanDefinition);\n  199  	}\n  200  \n  201  	@Test\n  202: 	public void postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverridesSubclassUsingReflection() {\n  203  		RootBeanDefinition beanDefinition = new RootBeanDefinition(\n  204: 				SubMetaComponentScanConfigurationWithAttributeOverridesClass.class);\n  205  		assertSupportForComposedAnnotation(beanDefinition);\n  206  	}\n  207  \n  208  	@Test\n  209: 	public void postProcessorWorksWithMetaComponentScanConfigurationWithAttributeOverridesSubclassUsingAsm() {\n  210  		RootBeanDefinition beanDefinition = new RootBeanDefinition(\n  211: 				SubMetaComponentScanConfigurationWithAttributeOverridesClass.class.getName());\n  212  		assertSupportForComposedAnnotation(beanDefinition);\n  213  	}\n  ...\n  218  		pp.setEnvironment(new StandardEnvironment());\n  219  		pp.postProcessBeanFactory(beanFactory);\n  220: 		SimpleComponent simpleComponent = beanFactory.getBean(SimpleComponent.class);\n  221: 		assertNotNull(simpleComponent);\n  222  	}\n  223  \n  ...\n  228  		pp.postProcessBeanFactory(beanFactory);\n  229  		try {\n  230: 			beanFactory.getBean(SimpleComponent.class);\n  231  			fail(\"Should have thrown NoSuchBeanDefinitionException\");\n  232  		}\n  ...\n  953  \n  954  	@Configuration\n  955: 	@ComponentScan(basePackages = \"org.springframework.context.annotation.componentscan.simple\")\n  956  	@Retention(RetentionPolicy.RUNTIME)\n  957  	@Target(ElementType.TYPE)\n  ...\n  964  \n  965  	@Configuration\n  966: 	@ComponentScan\n  967  	@Retention(RetentionPolicy.RUNTIME)\n  968  	@Target(ElementType.TYPE)\n  ...\n  971  		String[] basePackages() default {};\n  972  \n  973: 		ComponentScan.Filter[] excludeFilters() default {};\n  974  	}\n  975  \n  976: 	@ComposedConfigurationWithAttributeOverrides(basePackages = \"org.springframework.context.annotation.componentscan.simple\")\n  977  	public static class ComposedConfigurationWithAttributeOverrideForBasePackage {\n  978  	}\n  979  \n  980: 	@ComposedConfigurationWithAttributeOverrides(basePackages = \"org.springframework.context.annotation.componentscan.simple\",\n  981: 			excludeFilters = @ComponentScan.Filter(Component.class))\n  982  	public static class ComposedConfigurationWithAttributeOverrideForExcludeFilter {\n  983  	}\n  ...\n  991  	}\n  992  \n  993: 	@ComposedComposedConfigurationWithAttributeOverrides(basePackages = \"org.springframework.context.annotation.componentscan.simple\")\n  994  	public static class ComposedComposedConfigurationWithAttributeOverridesClass {\n  995  	}\n  996  \n  997: 	@ComponentScan\n  998  	@Retention(RetentionPolicy.RUNTIME)\n  999  	@Target(ElementType.TYPE)\n 1000: 	public @interface MetaComponentScan {\n 1001  	}\n 1002  \n 1003: 	@MetaComponentScan\n 1004  	@Configuration\n 1005  	@Retention(RetentionPolicy.RUNTIME)\n 1006  	@Target(ElementType.TYPE)\n 1007: 	public @interface MetaComponentScanConfigurationWithAttributeOverrides {\n 1008  \n 1009  		String[] basePackages() default {};\n 1010  	}\n 1011  \n 1012: 	@MetaComponentScanConfigurationWithAttributeOverrides(basePackages = \"org.springframework.context.annotation.componentscan.simple\")\n 1013: 	public static class MetaComponentScanConfigurationWithAttributeOverridesClass {\n 1014  	}\n 1015  \n 1016  	@Configuration\n 1017: 	public static class SubMetaComponentScanConfigurationWithAttributeOverridesClass extends\n 1018: 			MetaComponentScanConfigurationWithAttributeOverridesClass {\n 1019  	}\n 1020  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\ConfigurationClassWithConditionTests.java:\n   30  import org.springframework.core.type.AnnotatedTypeMetadata;\n   31  import org.springframework.core.type.AnnotationMetadata;\n   32: import org.springframework.stereotype.Component;\n   33  \n   34  import static org.hamcrest.Matchers.*;\n   ..\n  267  	}\n  268  \n  269: 	@Component\n  270  	@MetaNever\n  271  	static class NonConfigurationClass {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\EnableAspectJAutoProxyTests.java:\n  107  \n  108  \n  109: 	@ComponentScan(\"example.scannable\")\n  110  	@EnableAspectJAutoProxy\n  111  	static class ConfigWithJdkProxy {\n  ...\n  113  \n  114  \n  115: 	@ComponentScan(\"example.scannable\")\n  116  	@EnableAspectJAutoProxy(proxyTargetClass = true)\n  117  	static class ConfigWithCglibProxy {\n  ...\n  119  \n  120  \n  121: 	@ComponentScan(\"example.scannable\")\n  122  	@EnableAspectJAutoProxy(exposeProxy = true)\n  123  	static class ConfigWithExposedProxy {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\NestedConfigurationClassTests.java:\n   19  import org.junit.Test;\n   20  \n   21: import org.springframework.stereotype.Component;\n   22  import org.springframework.tests.sample.beans.TestBean;\n   23  \n   ..\n  252  \n  253  \n  254: 	@Component\n  255  	@Lazy\n  256  	static class L0ConfigLight {\n  ...\n  268  		}\n  269  \n  270: 		@Component\n  271  		static class L1ConfigLight {\n  272  \n  ...\n  281  			}\n  282  \n  283: 			@Component\n  284  			@Lazy\n  285  			protected static class L2ConfigLight {\n  ...\n  351  \n  352  \n  353: 	@Component\n  354  	@Lazy\n  355  	static class L0ConfigEmpty {\n  356  \n  357: 		@Component\n  358  		@Scope(\"prototype\")\n  359  		static class L1ConfigEmpty {\n  360  \n  361: 			@Component\n  362  			@Scope(value = \"prototype\", proxyMode = ScopedProxyMode.TARGET_CLASS)\n  363  			protected static class L2ConfigEmpty {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\PrimitiveBeanLookupAndAutowiringTests.java:\n   65  	public void primitiveAutowiredInjection() {\n   66  		ApplicationContext ctx =\n   67: 				new AnnotationConfigApplicationContext(Config.class, AutowiredComponent.class);\n   68: 		assertThat(ctx.getBean(AutowiredComponent.class).b, equalTo(true));\n   69: 		assertThat(ctx.getBean(AutowiredComponent.class).i, equalTo(42));\n   70  	}\n   71  \n   ..\n   73  	public void primitiveResourceInjection() {\n   74  		ApplicationContext ctx =\n   75: 				new AnnotationConfigApplicationContext(Config.class, ResourceComponent.class);\n   76: 		assertThat(ctx.getBean(ResourceComponent.class).b, equalTo(true));\n   77: 		assertThat(ctx.getBean(ResourceComponent.class).i, equalTo(42));\n   78  	}\n   79  \n   ..\n   93  \n   94  \n   95: 	static class AutowiredComponent {\n   96  		@Autowired boolean b;\n   97  		@Autowired int i;\n   ..\n   99  \n  100  \n  101: 	static class ResourceComponent {\n  102  		@Resource boolean b;\n  103  		@Autowired int i;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\PropertySourceAnnotationTests.java:\n  361  	@Configuration\n  362  	@PropertySource(name=\"p1\", value=\"classpath:org/springframework/context/annotation/p1.properties\")\n  363: 	@ComponentScan(\"org.springframework.context.annotation.spr12111\")\n  364  	static class ConfigWithTestProfileBeans {\n  365  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\role\\ComponentWithoutRole.java:\n   17  package org.springframework.context.annotation.role;\n   18  \n   19: import org.springframework.stereotype.Component;\n   20  \n   21: @Component(\"componentWithoutRole\")\n   22: public class ComponentWithoutRole {\n   23  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\role\\ComponentWithRole.java:\n   20  import org.springframework.context.annotation.Description;\n   21  import org.springframework.context.annotation.Role;\n   22: import org.springframework.stereotype.Component;\n   23  \n   24: @Component(\"componentWithRole\")\n   25  @Role(BeanDefinition.ROLE_INFRASTRUCTURE)\n   26: @Description(\"A Component with a role\")\n   27: public class ComponentWithRole {\n   28  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\RoleAndDescriptionAnnotationTests.java:\n   20  \n   21  import org.springframework.beans.factory.config.BeanDefinition;\n   22: import org.springframework.context.annotation.role.ComponentWithRole;\n   23: import org.springframework.context.annotation.role.ComponentWithoutRole;\n   24  \n   25  import static org.hamcrest.CoreMatchers.*;\n   ..\n   27  \n   28  /**\n   29:  * Tests the use of the @Role and @Description annotation on @Bean methods and @Component classes.\n   30   *\n   31   * @author Chris Beams\n   ..\n   49  \n   50  	@Test\n   51: 	public void onComponentClass() {\n   52  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n   53: 		ctx.register(ComponentWithoutRole.class, ComponentWithRole.class);\n   54  		ctx.refresh();\n   55  		assertThat(\"Expected bean to have ROLE_APPLICATION\",\n   56: 				ctx.getBeanDefinition(\"componentWithoutRole\").getRole(), is(BeanDefinition.ROLE_APPLICATION));\n   57: 		assertThat(ctx.getBeanDefinition(\"componentWithoutRole\").getDescription(), is((Object) null));\n   58  		assertThat(\"Expected bean to have ROLE_INFRASTRUCTURE\",\n   59: 				ctx.getBeanDefinition(\"componentWithRole\").getRole(), is(BeanDefinition.ROLE_INFRASTRUCTURE));\n   60: 		assertThat(ctx.getBeanDefinition(\"componentWithRole\").getDescription(), is(\"A Component with a role\"));\n   61  	}\n   62  \n   63  \n   64  	@Test\n   65: 	public void viaComponentScanning() {\n   66  		AnnotationConfigApplicationContext ctx = new AnnotationConfigApplicationContext();\n   67  		ctx.scan(\"org.springframework.context.annotation.role\");\n   68  		ctx.refresh();\n   69  		assertThat(\"Expected bean to have ROLE_APPLICATION\",\n   70: 				ctx.getBeanDefinition(\"componentWithoutRole\").getRole(), is(BeanDefinition.ROLE_APPLICATION));\n   71: 		assertThat(ctx.getBeanDefinition(\"componentWithoutRole\").getDescription(), is((Object) null));\n   72  		assertThat(\"Expected bean to have ROLE_INFRASTRUCTURE\",\n   73: 				ctx.getBeanDefinition(\"componentWithRole\").getRole(), is(BeanDefinition.ROLE_INFRASTRUCTURE));\n   74: 		assertThat(ctx.getBeanDefinition(\"componentWithRole\").getDescription(), is(\"A Component with a role\"));\n   75  	}\n   76  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\spr10546\\ParentWithComponentScanConfig.java:\n   17  package org.springframework.context.annotation.spr10546;\n   18  \n   19: import org.springframework.context.annotation.ComponentScan;\n   20  import org.springframework.context.annotation.Configuration;\n   21  import org.springframework.context.annotation.spr10546.scanpackage.AEnclosingConfig;\n   ..\n   26   */\n   27  @Configuration\n   28: @ComponentScan(basePackageClasses=AEnclosingConfig.class)\n   29: public class ParentWithComponentScanConfig {\n   30  \n   31  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\spr10546\\Spr10546Tests.java:\n   81  \n   82  	@Test\n   83: 	public void enclosingConfigFirstParentDefinesBeanWithComponentScan() {\n   84: 		assertLoadsMyBean(AEnclosingWithComponentScanConfig.class,AEnclosingWithComponentScanConfig.ChildConfig.class);\n   85  	}\n   86  \n   87  	@Configuration\n   88: 	static class AEnclosingWithComponentScanConfig {\n   89  		@Configuration\n   90: 		public static class ChildConfig extends ParentWithComponentScanConfig {}\n   91  	}\n   92  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\spr12111\\TestProfileBean.java:\n   18  \n   19  import org.springframework.context.annotation.Profile;\n   20: import org.springframework.stereotype.Component;\n   21  \n   22: @Component\n   23  @Profile(\"test\")\n   24  public class TestProfileBean {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\spr12233\\Spr12233Tests.java:\n   21  import org.springframework.beans.factory.annotation.Value;\n   22  import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n   23: import org.springframework.context.annotation.ComponentScan;\n   24  import org.springframework.context.annotation.ConditionContext;\n   25  import org.springframework.context.annotation.Conditional;\n   ..\n   59  	}\n   60  \n   61: 	@Import(ComponentScanningConfiguration.class)\n   62  	static class ImportConfiguration {\n   63  \n   ..\n   65  \n   66  	@Configuration\n   67: 	@ComponentScan\n   68: 	static class ComponentScanningConfiguration {\n   69  \n   70  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\Spr12278Tests.java:\n   45  \n   46  	@Test\n   47: 	public void componentSingleConstructor() {\n   48  		this.context = new AnnotationConfigApplicationContext(BaseConfiguration.class,\n   49: 				SingleConstructorComponent.class);\n   50: 		assertThat(this.context.getBean(SingleConstructorComponent.class).autowiredName, is(\"foo\"));\n   51  	}\n   52  \n   53  	@Test\n   54: 	public void componentTwoConstructorsNoHint() {\n   55  		this.context = new AnnotationConfigApplicationContext(BaseConfiguration.class,\n   56: 				TwoConstructorsComponent.class);\n   57: 		assertThat(this.context.getBean(TwoConstructorsComponent.class).name, is(\"fallback\"));\n   58  	}\n   59  \n   60  	@Test\n   61: 	public void componentTwoSpecificConstructorsNoHint() {\n   62  		thrown.expect(BeanCreationException.class);\n   63  		thrown.expectMessage(NoSuchMethodException.class.getName());\n   64  		new AnnotationConfigApplicationContext(BaseConfiguration.class,\n   65: 				TwoSpecificConstructorsComponent.class);\n   66  	}\n   67  \n   ..\n   76  	}\n   77  \n   78: 	private static class SingleConstructorComponent {\n   79  \n   80  		private final String autowiredName;\n   81  \n   82  		// No @Autowired - implicit wiring\n   83: 		public SingleConstructorComponent(String autowiredName) {\n   84  			this.autowiredName = autowiredName;\n   85  		}\n   ..\n   87  	}\n   88  \n   89: 	private static class TwoConstructorsComponent {\n   90  \n   91  		private final String name;\n   92  \n   93: 		public TwoConstructorsComponent(String name) {\n   94  			this.name = name;\n   95  		}\n   96  \n   97: 		public TwoConstructorsComponent() {\n   98  			this(\"fallback\");\n   99  		}\n  100  	}\n  101  \n  102: 	private static class TwoSpecificConstructorsComponent {\n  103  \n  104  		private final Integer counter;\n  105  \n  106: 		public TwoSpecificConstructorsComponent(Integer counter) {\n  107  			this.counter = counter;\n  108  		}\n  109  \n  110: 		public TwoSpecificConstructorsComponent(String name) {\n  111  			this(Integer.valueOf(name));\n  112  		}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\Spr12636Tests.java:\n   28  import org.springframework.scheduling.annotation.Async;\n   29  import org.springframework.scheduling.annotation.EnableAsync;\n   30: import org.springframework.stereotype.Component;\n   31  \n   32  import static org.junit.Assert.*;\n   ..\n   78  \n   79  \n   80: 	@Component\n   81  	static class UserServiceCollector {\n   82  \n   ..\n   94  	}\n   95  \n   96: 	@Component(\"serviceOne\")\n   97  	@Order(1)\n   98  	static class UserServiceOne implements UserService {\n   ..\n  105  	}\n  106  \n  107: 	@Component(\"serviceTwo\")\n  108  	@Order(2)\n  109  	static class UserServiceTwo implements UserService {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\spr8761\\Spr8761Tests.java:\n   23  \n   24  import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n   25: import org.springframework.stereotype.Component;\n   26  \n   27  import static org.hamcrest.CoreMatchers.*;\n   ..\n   36  \n   37  	/**\n   38: 	 * Prior to the fix for SPR-8761, this test threw because the nested MyComponent\n   39  	 * annotation was being falsely considered as a 'lite' Configuration class candidate.\n   40  	 */\n   ..\n   49  }\n   50  \n   51: @Component\n   52  class WithNestedAnnotation {\n   53  \n   54  	@Retention(RetentionPolicy.RUNTIME)\n   55: 	@Component\n   56: 	public static @interface MyComponent {\n   57  	}\n   58  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation\\spr8808\\Spr8808Tests.java:\n   20  \n   21  import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n   22: import org.springframework.context.annotation.ComponentScan;\n   23  import org.springframework.context.annotation.Configuration;\n   24  \n   25  /**\n   26:  * Tests cornering the bug in which @Configuration classes that @ComponentScan themselves\n   27   * would result in a ConflictingBeanDefinitionException.\n   28   *\n   ..\n   46  \n   47  @Configuration\n   48: @ComponentScan(basePackageClasses=Spr8808Tests.class) // scan *this* package\n   49  class Config {\n   50  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation4\\DependencyBean.java:\n   17  package org.springframework.context.annotation4;\n   18  \n   19: import org.springframework.stereotype.Component;\n   20  \n   21  /**\n   22   * @author Juergen Hoeller\n   23   */\n   24: @Component\n   25  public class DependencyBean {\n   26  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation4\\FactoryMethodComponent.java:\n   23  import org.springframework.context.annotation.Scope;\n   24  import org.springframework.context.annotation.ScopedProxyMode;\n   25: import org.springframework.stereotype.Component;\n   26  import org.springframework.tests.sample.beans.TestBean;\n   27  \n   28  /**\n   29   * Class used to test the functionality of factory method bean definitions\n   30:  * declared inside a Spring component class.\n   31   *\n   32   * @author Mark Pollack\n   33   * @author Juergen Hoeller\n   34   */\n   35: @Component\n   36: public class FactoryMethodComponent {\n   37  \n   38  	private int i;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation4\\SimpleBean.java:\n   21  \n   22  /**\n   23:  * Class to test that @FactoryMethods are detected only when inside a class with an @Component\n   24   * class annotation.\n   25   *\n   ..\n   28  public class SimpleBean {\n   29  \n   30: 	// This should *not* recognized as a bean since it does not reside inside an @Component\n   31  	@Bean\n   32  	public TestBean getPublicInstance() {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\annotation6\\ComponentForScanning.java:\n    1  package org.springframework.context.annotation6;\n    2  \n    3: import org.springframework.stereotype.Component;\n    4  \n    5: @Component\n    6: public class ComponentForScanning {\n    7  }\n    8  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\event\\AnnotationDrivenEventListenerTests.java:\n   59  import org.springframework.scheduling.annotation.Async;\n   60  import org.springframework.scheduling.annotation.EnableAsync;\n   61: import org.springframework.stereotype.Component;\n   62  import org.springframework.util.Assert;\n   63  \n   ..\n  612  \n  613  \n  614: 	@Component\n  615  	static class TestEventListener extends AbstractTestEventListener {\n  616  \n  ...\n  634  \n  635  \n  636: 	@Component\n  637  	static class MetaAnnotationListenerTestBean extends AbstractTestEventListener {\n  638  \n  ...\n  644  \n  645  \n  646: 	@Component\n  647  	static class ContextEventListener extends AbstractTestEventListener {\n  648  \n  ...\n  655  \n  656  \n  657: 	@Component\n  658  	static class InvalidMethodSignatureEventListener {\n  659  \n  ...\n  664  \n  665  \n  666: 	@Component\n  667  	static class ReplyEventListener extends AbstractTestEventListener {\n  668  \n  ...\n  687  \n  688  \n  689: 	@Component\n  690  	static class ExceptionEventListener extends AbstractTestEventListener {\n  691  \n  ...\n  713  \n  714  \n  715: 	@Component\n  716  	static class AsyncEventListener extends AbstractTestEventListener {\n  717  \n  ...\n  751  \n  752  \n  753: 	@Component\n  754  	static class SimpleProxyTestBean extends AbstractIdentifiable implements SimpleService {\n  755  \n  ...\n  776  \n  777  \n  778: 	@Component\n  779  	@Scope(proxyMode = ScopedProxyMode.INTERFACES)\n  780  	static class ScopedProxyTestBean extends AbstractIdentifiable implements SimpleService {\n  ...\n  809  \n  810  \n  811: 	@Component\n  812  	@Scope(proxyMode = ScopedProxyMode.INTERFACES)\n  813  	static class AnnotatedProxyTestBean extends AbstractIdentifiable implements AnnotatedSimpleService {\n  ...\n  823  \n  824  \n  825: 	@Component\n  826  	@Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)\n  827  	static class CglibProxyTestBean extends AbstractTestEventListener {\n  ...\n  834  \n  835  \n  836: 	@Component\n  837  	@Scope(proxyMode = ScopedProxyMode.TARGET_CLASS)\n  838  	static class CglibProxyWithPrivateMethod extends AbstractTestEventListener {\n  ...\n  845  \n  846  \n  847: 	@Component\n  848  	@Scope(scopeName = \"custom\", proxyMode = ScopedProxyMode.TARGET_CLASS)\n  849  	static class CustomScopeTestBean extends AbstractTestEventListener {\n  ...\n  856  \n  857  \n  858: 	@Component\n  859  	static class GenericEventListener extends AbstractTestEventListener {\n  860  \n  ...\n  866  \n  867  \n  868: 	@Component\n  869  	static class ResolvableTypeEventListener extends AbstractTestEventListener {\n  870  \n  ...\n  886  \n  887  \n  888: 	@Component\n  889  	static class ConditionalEventListener extends TestEventListener {\n  890  \n  ...\n  913  \n  914  \n  915: 	@Component\n  916  	static class OrderedTestListener extends TestEventListener {\n  917  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\event\\test\\EventCollector.java:\n   21  import java.util.Map;\n   22  \n   23: import org.springframework.stereotype.Component;\n   24  import org.springframework.util.LinkedMultiValueMap;\n   25  import org.springframework.util.MultiValueMap;\n   ..\n   33   * @author Juergen Hoeller\n   34   */\n   35: @Component\n   36  public class EventCollector {\n   37  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\index\\CandidateComponentsIndexLoaderTests.java:\n   30  \n   31  /**\n   32:  * Tests for {@link CandidateComponentsIndexLoader}.\n   33   *\n   34   * @author Stephane Nicoll\n   35   */\n   36: public class CandidateComponentsIndexLoaderTests {\n   37  \n   38  	@Rule\n   ..\n   41  	@Test\n   42  	public void validateIndexIsDisabledByDefault() {\n   43: 		CandidateComponentsIndex index = CandidateComponentsIndexLoader.loadIndex(null);\n   44: 		assertThat(\"No spring.components should be available at the default location\", index, is(nullValue()));\n   45  	}\n   46  \n   47  	@Test\n   48  	public void loadIndexSeveralMatches() {\n   49: 		CandidateComponentsIndex index = CandidateComponentsIndexLoader.loadIndex(\n   50: 				CandidateComponentsTestClassLoader.index(getClass().getClassLoader(),\n   51: 						new ClassPathResource(\"spring.components\", getClass())));\n   52: 		Set<String> components = index.getCandidateTypes(\"org.springframework\", \"foo\");\n   53: 		assertThat(components, containsInAnyOrder(\n   54  				\"org.springframework.context.index.Sample1\",\n   55  				\"org.springframework.context.index.Sample2\"));\n   ..\n   58  	@Test\n   59  	public void loadIndexSingleMatch() {\n   60: 		CandidateComponentsIndex index = CandidateComponentsIndexLoader.loadIndex(\n   61: 				CandidateComponentsTestClassLoader.index(getClass().getClassLoader(),\n   62: 						new ClassPathResource(\"spring.components\", getClass())));\n   63: 		Set<String> components = index.getCandidateTypes(\"org.springframework\", \"biz\");\n   64: 		assertThat(components, containsInAnyOrder(\n   65  				\"org.springframework.context.index.Sample3\"));\n   66  	}\n   ..\n   68  	@Test\n   69  	public void loadIndexNoMatch() {\n   70: 		CandidateComponentsIndex index = CandidateComponentsIndexLoader.loadIndex(\n   71: 				CandidateComponentsTestClassLoader.index(getClass().getClassLoader(),\n   72: 						new ClassPathResource(\"spring.components\", getClass())));\n   73: 		Set<String> components = index.getCandidateTypes(\"org.springframework\", \"none\");\n   74: 		assertThat(components, hasSize(0));\n   75  	}\n   76  \n   77  	@Test\n   78  	public void loadIndexNoPackage() {\n   79: 		CandidateComponentsIndex index = CandidateComponentsIndexLoader.loadIndex(\n   80: 				CandidateComponentsTestClassLoader.index(getClass().getClassLoader(),\n   81: 						new ClassPathResource(\"spring.components\", getClass())));\n   82: 		Set<String> components = index.getCandidateTypes(\"com.example\", \"foo\");\n   83: 		assertThat(components, hasSize(0));\n   84  	}\n   85  \n   86  	@Test\n   87: 	public void loadIndexNoSpringComponentsResource() {\n   88: 		CandidateComponentsIndex index = CandidateComponentsIndexLoader.loadIndex(\n   89: 				CandidateComponentsTestClassLoader.disableIndex(getClass().getClassLoader()));\n   90  		assertThat(index, is(nullValue()));\n   91  	}\n   ..\n   93  	@Test\n   94  	public void loadIndexNoEntry() throws IOException {\n   95: 		CandidateComponentsIndex index = CandidateComponentsIndexLoader.loadIndex(\n   96: 				CandidateComponentsTestClassLoader.index(getClass().getClassLoader(),\n   97: 						new ClassPathResource(\"empty-spring.components\", getClass())));\n   98  		assertThat(index, is(nullValue()));\n   99  	}\n  ...\n  105  		this.thrown.expectMessage(\"Unable to load indexes\");\n  106  		this.thrown.expectCause(is(cause));\n  107: 		CandidateComponentsIndexLoader.loadIndex(new CandidateComponentsTestClassLoader(\n  108  				getClass().getClassLoader(), cause));\n  109  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\index\\CandidateComponentsIndexTests.java:\n   28  \n   29  /**\n   30:  * Tests for {@link CandidateComponentsIndex}.\n   31   *\n   32   * @author Stephane Nicoll\n   33   */\n   34: public class CandidateComponentsIndexTests {\n   35  \n   36  	@Test\n   37  	public void getCandidateTypes() {\n   38: 		CandidateComponentsIndex index = new CandidateComponentsIndex(\n   39  				Collections.singletonList(createSampleProperties()));\n   40  		Set<String> actual = index.getCandidateTypes(\"com.example.service\", \"service\");\n   ..\n   45  	@Test\n   46  	public void getCandidateTypesSubPackage() {\n   47: 		CandidateComponentsIndex index = new CandidateComponentsIndex(\n   48  				Collections.singletonList(createSampleProperties()));\n   49  		Set<String> actual = index.getCandidateTypes(\"com.example.service.sub\", \"service\");\n   ..\n   53  	@Test\n   54  	public void getCandidateTypesSubPackageNoMatch() {\n   55: 		CandidateComponentsIndex index = new CandidateComponentsIndex(\n   56  				Collections.singletonList(createSampleProperties()));\n   57  		Set<String> actual = index.getCandidateTypes(\"com.example.service.none\", \"service\");\n   ..\n   61  	@Test\n   62  	public void getCandidateTypesNoMatch() {\n   63: 		CandidateComponentsIndex index = new CandidateComponentsIndex(\n   64  				Collections.singletonList(createSampleProperties()));\n   65  		Set<String> actual = index.getCandidateTypes(\"com.example.service\", \"entity\");\n   ..\n   69  	@Test\n   70  	public void mergeCandidateStereotypes() {\n   71: 		CandidateComponentsIndex index = new CandidateComponentsIndex(Arrays.asList(\n   72  				createProperties(\"com.example.Foo\", \"service\"),\n   73  				createProperties(\"com.example.Foo\", \"entity\")));\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\index\\CandidateComponentsTestClassLoader.java:\n   28  /**\n   29   * A test {@link ClassLoader} that can be used in testing context to control the\n   30:  * {@code spring.components} resource that should be loaded. Can also simulate a failure\n   31   * by throwing a configurable {@link IOException}.\n   32   *\n   33   * @author Stephane Nicoll\n   34   */\n   35: public class CandidateComponentsTestClassLoader extends ClassLoader {\n   36  \n   37  	/**\n   ..\n   40  	 * @param classLoader the classloader to use for all other operations\n   41  	 * @return a test {@link ClassLoader} that has no index\n   42: 	 * @see CandidateComponentsIndexLoader#COMPONENTS_RESOURCE_LOCATION\n   43  	 */\n   44  	public static ClassLoader disableIndex(ClassLoader classLoader) {\n   45: 		return new CandidateComponentsTestClassLoader(classLoader,\n   46  				Collections.enumeration(Collections.emptyList()));\n   47  	}\n   ..\n   55  	 */\n   56  	public static ClassLoader index(ClassLoader classLoader, Resource... resources) {\n   57: 		return new CandidateComponentsTestClassLoader(classLoader,\n   58  				Collections.enumeration(Stream.of(resources).map(r -> {\n   59  					try {\n   ..\n   71  	private final IOException cause;\n   72  \n   73: 	public CandidateComponentsTestClassLoader(ClassLoader classLoader, Enumeration<URL> resourceUrls) {\n   74  		super(classLoader);\n   75  		this.resourceUrls = resourceUrls;\n   ..\n   77  	}\n   78  \n   79: 	public CandidateComponentsTestClassLoader(ClassLoader parent, IOException cause) {\n   80  		super(parent);\n   81  		this.resourceUrls = null;\n   ..\n   85  	@Override\n   86  	public Enumeration<URL> getResources(String name) throws IOException {\n   87: 		if (CandidateComponentsIndexLoader.COMPONENTS_RESOURCE_LOCATION.equals(name)) {\n   88  			if (this.resourceUrls != null) {\n   89  				return this.resourceUrls;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\context\\support\\EnvironmentSecurityManagerIntegrationTests.java:\n   30  import org.springframework.core.env.AbstractEnvironment;\n   31  import org.springframework.core.env.StandardEnvironmentTests;\n   32: import org.springframework.stereotype.Component;\n   33  \n   34  import static java.lang.String.format;\n   ..\n   95  				// the BeanDefinitionReader won't be able to determine which profiles are\n   96  				// active. We should see an INFO-level message in the console about this\n   97: 				// and as a result, any components marked with a non-default profile will\n   98  				// be ignored.\n   99  				if ((\"getenv.\" + AbstractEnvironment.ACTIVE_PROFILES_PROPERTY_NAME).equals(perm.getName())) {\n  ...\n  113  \n  114  \n  115: 	@Component(\"c1\")\n  116  	@Profile(\"p1\")\n  117  	static class C1 {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\ejb\\config\\JeeNamespaceHandlerEventTests.java:\n   20  import org.junit.Test;\n   21  \n   22: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   23: import org.springframework.beans.factory.parsing.ComponentDefinition;\n   24  import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n   25  import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;\n   ..\n   51  \n   52  	@Test\n   53: 	public void testJndiLookupComponentEventReceived() {\n   54: 		ComponentDefinition component = this.eventListener.getComponentDefinition(\"simple\");\n   55: 		assertTrue(component instanceof BeanComponentDefinition);\n   56  	}\n   57  \n   58  	@Test\n   59: 	public void testLocalSlsbComponentEventReceived() {\n   60: 		ComponentDefinition component = this.eventListener.getComponentDefinition(\"simpleLocalEjb\");\n   61: 		assertTrue(component instanceof BeanComponentDefinition);\n   62  	}\n   63  \n   64  	@Test\n   65: 	public void testRemoteSlsbComponentEventReceived() {\n   66: 		ComponentDefinition component = this.eventListener.getComponentDefinition(\"simpleRemoteEjb\");\n   67: 		assertTrue(component instanceof BeanComponentDefinition);\n   68  	}\n   69  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\jmx\\export\\annotation\\AnnotationLazyInitMBeanTests.java:\n   85  \n   86  	@Test\n   87: 	public void componentScan() throws Exception {\n   88  		ConfigurableApplicationContext ctx =\n   89: 				new ClassPathXmlApplicationContext(\"org/springframework/jmx/export/annotation/componentScan.xml\");\n   90  		try {\n   91  			MBeanServer server = (MBeanServer) ctx.getBean(\"server\");\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\jmx\\export\\annotation\\EnableMBeanExportConfigurationTests.java:\n   28  import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n   29  import org.springframework.context.annotation.Bean;\n   30: import org.springframework.context.annotation.ComponentScan;\n   31  import org.springframework.context.annotation.Configuration;\n   32  import org.springframework.context.annotation.EnableMBeanExport;\n   ..\n  136  \n  137  	@Test\n  138: 	public void testComponentScan() throws Exception {\n  139: 		load(ComponentScanConfiguration.class);\n  140  		MBeanServer server = (MBeanServer) this.ctx.getBean(\"server\");\n  141  		validateMBeanAttribute(server, \"bean:name=testBean4\", null);\n  ...\n  266  \n  267  	@Configuration\n  268: 	@ComponentScan(excludeFilters = @ComponentScan.Filter(value=Configuration.class))\n  269  	@EnableMBeanExport(server = \"server\")\n  270: 	static class ComponentScanConfiguration {\n  271  \n  272  		@Bean\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\scheduling\\annotation\\EnableAsyncTests.java:\n   44  import org.springframework.core.Ordered;\n   45  import org.springframework.scheduling.concurrent.ThreadPoolTaskExecutor;\n   46: import org.springframework.stereotype.Component;\n   47  import org.springframework.util.ReflectionUtils;\n   48  \n   ..\n  248  \n  249  \n  250: 	@Component(\"asyncBean\")\n  251  	static class AsyncBeanWithInterface extends AsyncBean implements Runnable {\n  252  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\scripting\\groovy\\GroovyScriptFactoryTests.java:\n   42  import org.springframework.scripting.ScriptSource;\n   43  import org.springframework.scripting.support.ScriptFactoryPostProcessor;\n   44: import org.springframework.stereotype.Component;\n   45  import org.springframework.tests.sample.beans.TestBean;\n   46  import org.springframework.util.ObjectUtils;\n   ..\n  453  \n  454  		// Check that AnnotationUtils works with concrete proxied script classes\n  455: 		assertNotNull(AnnotationUtils.findAnnotation(messenger.getClass(), Component.class));\n  456  	}\n  457  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\java\\org\\springframework\\validation\\DataBinderTests.java:\n 1737  \n 1738  	@Test\n 1739: 	public void testBindToStringArrayWithComponentEditor() {\n 1740  		TestBean tb = new TestBean();\n 1741  		DataBinder binder = new DataBinder(tb, \"tb\");\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\example\\scannable\\spring.components:\n    1  example.scannable.AutowiredQualifierFooService=example.scannable.FooService\n    2: example.scannable.DefaultNamedComponent=org.springframework.stereotype.Component\n    3: example.scannable.NamedComponent=org.springframework.stereotype.Component\n    4  example.scannable.FooService=example.scannable.FooService\n    5: example.scannable.FooServiceImpl=org.springframework.stereotype.Component,example.scannable.FooService\n    6  example.scannable.ScopedProxyTestBean=example.scannable.FooService\n    7: example.scannable.StubFooDao=org.springframework.stereotype.Component\n    8: example.scannable.NamedStubDao=org.springframework.stereotype.Component\n    9: example.scannable.ServiceInvocationCounter=org.springframework.stereotype.Component\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\aop\\framework\\ObjenesisProxyTests-context.xml:\n    9  		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd\">\n   10  \n   11: 	<context:component-scan base-package=\"org.springframework.aop.framework\" />\n   12  \n   13  	<aop:config>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\access\\ContextSingletonBeanFactoryLocatorTests-context.xml:\n   16  \n   17    <!-- while the following two could be inside another, also on the classpath,\n   18: 	perhaps coming from another component jar -->\n   19    <bean id=\"another.qualified.name\"\n   20        class=\"org.springframework.context.support.ClassPathXmlApplicationContext\">\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\aspectjTypeFilterTests.xml:\n    6  				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    7  \n    8: 	<context:component-scan base-package=\"example.scannable\" use-default-filters=\"false\" annotation-config=\"false\">\n    9          <context:include-filter type=\"aspectj\" expression=\"example.scannable.Stub*\"/>\n   10          <context:include-filter type=\"aspectj\" expression=\"example.scannable.FooService+\"/>\n   11          <context:exclude-filter type=\"aspectj\" expression=\"example..Scoped*Test*\"/>\n   12:     </context:component-scan>\n   13  \n   14  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\aspectjTypeFilterTestsWithPlaceholders.xml:\n    6  				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    7  \n    8: 	<context:component-scan base-package=\"${basePackage}\" use-default-filters=\"false\" annotation-config=\"false\">\n    9          <context:include-filter type=\"aspectj\" expression=\"example.scannable.Stub*\"/>\n   10          <context:include-filter type=\"aspectj\" expression=\"${scanInclude}\"/>\n   11          <context:exclude-filter type=\"aspectj\" expression=\"${scanExclude}\"/>\n   12:     </context:component-scan>\n   13  \n   14  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\componentScanRespectsProfileAnnotationTests.xml:\n    8  				http://www.springframework.org/schema/context/spring-context-3.0.xsd\">\n    9  \n   10: 	<context:component-scan base-package=\"example.profilescan\"/>\n   11  \n   12  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\componentScanWithAutowiredQualifierTests.xml:\n   10  	<bean id=\"fooService\" class=\"example.scannable.AutowiredQualifierFooService\"/>\n   11  \n   12: 	<context:component-scan base-package=\"example.scannable\"/>\n   13  \n   14  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\customAnnotationUsedForBothComponentScanAndQualifierTests.xml:\n    8  				http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    9  \n   10: 	<context:component-scan base-package=\"org.springframework.context.annotation\" use-default-filters=\"false\">\n   11: 		<context:include-filter type=\"annotation\" expression=\"org.springframework.context.annotation.ComponentScanParserTests$CustomAnnotation\"/>\n   12: 	</context:component-scan>\n   13  \n   14  	<bean class=\"org.springframework.beans.factory.annotation.CustomAutowireConfigurer\">\n   15  		<property name=\"customQualifierTypes\">\n   16: 			<value>org.springframework.context.annotation.ComponentScanParserTests$CustomAnnotation</value>\n   17  		</property>\n   18  	</bean>\n   19  \n   20: 	<bean id=\"testBean\" class=\"org.springframework.context.annotation.ComponentScanParserTests$KustomAnnotationAutowiredBean\"/>\n   21  \n   22  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\customNameGeneratorTests.xml:\n    6  				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    7  \n    8: 	<context:component-scan base-package=\"test, example.scannable\"\n    9  	    name-generator=\"org.springframework.context.annotation.TestBeanNameGenerator\"/>\n   10  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\customScopeResolverTests.xml:\n    6  				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    7  \n    8: 	<context:component-scan base-package=\"example.scannable\"\n    9  	    scope-resolver=\"org.springframework.context.annotation.TestScopeMetadataResolver\"/>\n   10  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\customTypeFilterTests.xml:\n    8  				http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    9  \n   10: 	<context:component-scan base-package=\"org.springframework.context.annotation\" use-default-filters=\"false\">\n   11: 		<context:include-filter type=\"custom\" expression=\"org.springframework.context.annotation.ComponentScanParserTests$CustomTypeFilter\"/>\n   12: 	</context:component-scan>\n   13  \n   14  	<bean class=\"org.springframework.beans.factory.annotation.CustomAutowireConfigurer\">\n   15  		<property name=\"customQualifierTypes\">\n   16: 			<value>org.springframework.context.annotation.ComponentScanParserTests$CustomAnnotation</value>\n   17  		</property>\n   18  	</bean>\n   19  \n   20: 	<bean id=\"testBean\" class=\"org.springframework.context.annotation.ComponentScanParserTests$KustomAnnotationAutowiredBean\"/>\n   21  \n   22  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\defaultAutowireByNameTests.xml:\n    7          default-autowire=\"byName\">\n    8  \n    9: 	<context:component-scan base-package=\"org.springframework.context.annotation\"\n   10              use-default-filters=\"false\"\n   11              annotation-config=\"false\">\n   12          <context:include-filter type=\"assignable\"\n   13:                 expression=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$DefaultsTestBean\"/>\n   14:     </context:component-scan>\n   15  \n   16:     <bean class=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$ConstructorDependencyTestBean\">\n   17          <constructor-arg value=\"cd\"/>\n   18      </bean>\n   19  \n   20:     <bean class=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$PropertyDependencyTestBean\">\n   21          <constructor-arg value=\"pd1\"/>\n   22      </bean>\n   23  \n   24      <bean id=\"propertyDependency2\"\n   25:           class=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$PropertyDependencyTestBean\">\n   26          <constructor-arg value=\"pd2\"/>\n   27      </bean>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\defaultAutowireByTypeTests.xml:\n    7          default-autowire=\"byType\">\n    8  \n    9: 	<context:component-scan base-package=\"org.springframework.context.annotation\"\n   10              use-default-filters=\"false\"\n   11              annotation-config=\"false\">\n   12          <context:include-filter type=\"assignable\"\n   13:                 expression=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$DefaultsTestBean\"/>\n   14:     </context:component-scan>\n   15  \n   16:     <bean class=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$ConstructorDependencyTestBean\">\n   17          <constructor-arg value=\"cd\"/>\n   18      </bean>\n   19  \n   20:     <bean class=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$PropertyDependencyTestBean\">\n   21          <constructor-arg value=\"pd1\"/>\n   22      </bean>\n   23  \n   24      <bean id=\"propertyDependency2\"\n   25:           class=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$PropertyDependencyTestBean\">\n   26          <constructor-arg value=\"pd2\"/>\n   27      </bean>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\defaultAutowireConstructorTests.xml:\n    7          default-autowire=\"constructor\">\n    8  \n    9: 	<context:component-scan base-package=\"org.springframework.context.annotation\"\n   10              use-default-filters=\"false\"\n   11              annotation-config=\"false\">\n   12          <context:include-filter type=\"assignable\"\n   13:                 expression=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$DefaultsTestBean\"/>\n   14:     </context:component-scan>\n   15  \n   16:     <bean class=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$ConstructorDependencyTestBean\">\n   17          <constructor-arg value=\"cd\"/>\n   18      </bean>\n   19  \n   20:     <bean class=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$PropertyDependencyTestBean\">\n   21          <constructor-arg value=\"pd1\"/>\n   22      </bean>\n   23  \n   24      <bean id=\"propertyDependency2\"\n   25:           class=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$PropertyDependencyTestBean\">\n   26          <constructor-arg value=\"pd2\"/>\n   27      </bean>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\defaultAutowireNoTests.xml:\n    7          default-autowire=\"no\">\n    8  \n    9: 	<context:component-scan base-package=\"org.springframework.context.annotation\"\n   10              use-default-filters=\"false\"\n   11              annotation-config=\"false\">\n   12          <context:include-filter type=\"assignable\"\n   13:                 expression=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$DefaultsTestBean\"/>\n   14:     </context:component-scan>\n   15  \n   16:     <bean class=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$ConstructorDependencyTestBean\">\n   17          <constructor-arg value=\"cd\"/>\n   18      </bean>\n   19  \n   20:     <bean class=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$PropertyDependencyTestBean\">\n   21          <constructor-arg value=\"pd1\"/>\n   22      </bean>\n   23  \n   24      <bean id=\"propertyDependency2\"\n   25:           class=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$PropertyDependencyTestBean\">\n   26          <constructor-arg value=\"pd2\"/>\n   27      </bean>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\defaultInitAndDestroyMethodsTests.xml:\n    7      default-init-method=\"init\" default-destroy-method=\"destroy\">\n    8  \n    9: 	<context:component-scan base-package=\"org.springframework.context.annotation\"\n   10        use-default-filters=\"false\" annotation-config=\"false\">\n   11      <context:include-filter type=\"assignable\"\n   12:         expression=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$DefaultsTestBean\"/>\n   13:     </context:component-scan>\n   14  \n   15  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\defaultLazyInitFalseTests.xml:\n    7          default-lazy-init=\"false\">\n    8  \n    9: 	<context:component-scan base-package=\"org.springframework.context.annotation\"\n   10              use-default-filters=\"false\"\n   11              annotation-config=\"false\">\n   12          <context:include-filter type=\"assignable\"\n   13:                 expression=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$DefaultsTestBean\"/>\n   14:     </context:component-scan>\n   15  \n   16  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\defaultLazyInitTrueTests.xml:\n    7          default-lazy-init=\"true\">\n    8  \n    9: 	<context:component-scan base-package=\"org.springframework.context.annotation\"\n   10              use-default-filters=\"false\"\n   11              annotation-config=\"false\">\n   12          <context:include-filter type=\"assignable\"\n   13:                 expression=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$DefaultsTestBean\"/>\n   14:     </context:component-scan>\n   15  \n   16  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\defaultNonExistingInitAndDestroyMethodsTests.xml:\n    7      default-init-method=\"myInit\" default-destroy-method=\"myDestroy\">\n    8  \n    9: 	<context:component-scan base-package=\"org.springframework.context.annotation\"\n   10        use-default-filters=\"false\" annotation-config=\"false\">\n   11      <context:include-filter type=\"assignable\"\n   12:         expression=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$DefaultsTestBean\"/>\n   13:     </context:component-scan>\n   14  \n   15  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\defaultWithNoOverridesTests.xml:\n    6  				            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    7  \n    8: 	<context:component-scan base-package=\"org.springframework.context.annotation\"\n    9              use-default-filters=\"false\"\n   10              annotation-config=\"false\">\n   11          <context:include-filter type=\"assignable\"\n   12:                 expression=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$DefaultsTestBean\"/>\n   13:     </context:component-scan>\n   14  \n   15:     <bean class=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$ConstructorDependencyTestBean\">\n   16          <constructor-arg value=\"cd\"/>\n   17      </bean>\n   18  \n   19:     <bean class=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$PropertyDependencyTestBean\">\n   20          <constructor-arg value=\"pd1\"/>\n   21      </bean>\n   22  \n   23      <bean id=\"propertyDependency2\"\n   24:           class=\"org.springframework.context.annotation.ComponentScanParserBeanDefinitionDefaultsTests$PropertyDependencyTestBean\">\n   25          <constructor-arg value=\"pd2\"/>\n   26      </bean>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\doubleScanTests.xml:\n    8  				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    9  \n   10: 	<context:component-scan base-package=\"example.scannable\"/>\n   11  \n   12  	<!-- shouldn't cause a conflict -->\n   13: 	<context:component-scan base-package=\"example.scannable\"/>\n   14  \n   15  	<aop:aspectj-autoproxy/>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\invalidClassNameScopeResolverTests.xml:\n    6  				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    7  \n    8: 	<context:component-scan base-package=\"org.springframework.context.annotation\"\n    9  	    scope-resolver=\"not.a.valid.classname\"/>\n   10  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\invalidConstructorNameGeneratorTests.xml:\n    6  				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    7  \n    8: 	<context:component-scan base-package=\"org.springframework.context.annotation\"\n    9  	    name-generator=\"org.springframework.context.annotation.InvalidConstructorBeanNameGenerator\"/>\n   10  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\matchingResourcePatternTests.xml:\n    6  				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    7  \n    8: 	<context:component-scan base-package=\"example.\"\n    9                              resource-pattern=\"**/scannable/*.class\"\n   10                              use-default-filters=\"false\"\n   11                              annotation-config=\"false\">\n   12          <context:include-filter type=\"aspectj\" expression=\"example.scannable.FooService+\"/>\n   13:     </context:component-scan>\n   14  \n   15  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\nonMatchingResourcePatternTests.xml:\n    6  				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    7  \n    8: 	<context:component-scan base-package=\"org.springframework.\"\n    9                              resource-pattern=\"**/thispackagedoesnotexist/*.class\"\n   10                              use-default-filters=\"false\"\n   11                              annotation-config=\"false\">\n   12          <context:include-filter type=\"aspectj\" expression=\"example.scannable.FooService+\"/>\n   13:     </context:component-scan>\n   14  \n   15  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\scopedProxyDefaultTests.xml:\n    6  				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    7  \n    8: 	<context:component-scan base-package=\"example.scannable\" use-default-filters=\"false\">\n    9  		<context:include-filter type=\"assignable\" expression=\"example.scannable.ScopedProxyTestBean\"/>\n   10: 	</context:component-scan>\n   11  \n   12  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\scopedProxyInterfacesTests.xml:\n    6  				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    7  \n    8: 	<context:component-scan base-package=\"example.scannable\" use-default-filters=\"false\" scoped-proxy=\"interfaces\">\n    9  		<context:include-filter type=\"assignable\" expression=\"example.scannable.ScopedProxyTestBean\"/>\n   10: 	</context:component-scan>\n   11  \n   12  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\scopedProxyInvalidConfigTests.xml:\n    6  				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    7  \n    8: 	<context:component-scan base-package=\"org.springframework.context.annotation\"\n    9  			use-default-filters=\"false\" scoped-proxy=\"interfaces\"\n   10  			scope-resolver=\"org.springframework.context.annotation.TestScopeMetadataResolver\">\n   11  		<context:include-filter type=\"assignable\"\n   12  				expression=\"org.springframework.context.annotation.ScopedProxyTestBean\"/>\n   13: 	</context:component-scan>\n   14  \n   15  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\scopedProxyNoTests.xml:\n    6  				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    7  \n    8: 	<context:component-scan base-package=\"example.scannable\"\n    9  			use-default-filters=\"false\" scoped-proxy=\"no\">\n   10  		<context:include-filter type=\"assignable\" expression=\"example.scannable.ScopedProxyTestBean\"/>\n   11: 	</context:component-scan>\n   12  \n   13  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\scopedProxyTargetClassTests.xml:\n    6  				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    7  \n    8: 	<context:component-scan base-package=\"example.scannable\" use-default-filters=\"false\" scoped-proxy=\"targetClass\">\n    9  		<context:include-filter type=\"assignable\" expression=\"example.scannable.ScopedProxyTestBean\"/>\n   10: 	</context:component-scan>\n   11  \n   12  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\context\\annotation\\simpleScanTests.xml:\n    8  				http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd\">\n    9  \n   10: 	<context:component-scan base-package=\"example.scannable\"/>\n   11  \n   12  	<aop:aspectj-autoproxy/>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\jmx\\export\\annotation\\componentScan.xml:\n    9  	<bean id=\"server\" class=\"org.springframework.jmx.support.MBeanServerFactoryBean\" />\n   10  \n   11: 	<context:component-scan base-package=\"org.springframework.jmx.export.annotation\">\n   12  		<context:exclude-filter type=\"annotation\" expression=\"org.springframework.context.annotation.Configuration\" />\n   13: 	</context:component-scan>\n   14  \n   15  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-context\\src\\test\\resources\\org\\springframework\\scripting\\groovy\\Messenger.groovy:\n    1  package org.springframework.scripting.groovy;\n    2  \n    3: import org.springframework.stereotype.Component;\n    4  \n    5: @Component\n    6  class GroovyMessenger2 extends ConcreteMessenger {\n    7  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\asm\\Type.java:\n  778              } else if (d.isArray()) {\n  779                  sb.append('[');\n  780:                 d = d.getComponentType();\n  781              } else {\n  782                  sb.append('L');\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\AliasRegistry.java:\n   44  	/**\n   45  	 * Determine whether this given name is defines as an alias\n   46: 	 * (as opposed to the name of an actually registered component).\n   47  	 * @param name the name to check\n   48  	 * @return whether the given name is an alias\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\annotation\\AliasFor.java:\n   60   * is used within an annotation hierarchy. Typically you will not need to\n   61   * manually synthesize annotations on your own since Spring will do that for\n   62:  * you transparently when looking up annotations on Spring-managed components.\n   63   *\n   64   * <h3>Implementation Requirements</h3>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\annotation\\AnnotatedElementUtils.java:\n 1282  			Method method = containerType.getDeclaredMethod(AnnotationUtils.VALUE);\n 1283  			Class<?> returnType = method.getReturnType();\n 1284: 			if (!returnType.isArray() || returnType.getComponentType() != annotationType) {\n 1285  				String msg = String.format(\n 1286  					\"Container type [%s] must declare a 'value' attribute for an array of type [%s]\",\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\annotation\\AnnotationAttributes.java:\n  324  	 * <p>If the {@code expectedType} is an array and the value stored\n  325  	 * under the specified {@code attributeName} is a single element of the\n  326: 	 * component type of the expected array type, the single element will be\n  327  	 * wrapped in a single-element array of the appropriate type before\n  328  	 * returning it.\n  ...\n  341  		assertNotException(attributeName, value);\n  342  		if (!expectedType.isInstance(value) && expectedType.isArray() &&\n  343: 				expectedType.getComponentType().isInstance(value)) {\n  344: 			Object array = Array.newInstance(expectedType.getComponentType(), 1);\n  345  			Array.set(array, 0, value);\n  346  			value = array;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\annotation\\AnnotationUtils.java:\n 1515  \n 1516  		Annotation[] synthesized = (Annotation[]) Array.newInstance(\n 1517: 				annotations.getClass().getComponentType(), annotations.length);\n 1518  		for (int i = 0; i < annotations.length; i++) {\n 1519  			synthesized[i] = synthesizeAnnotation(annotations[i], annotatedElement);\n ....\n 1637  			if (Annotation[].class.isAssignableFrom(returnType)) {\n 1638  				Class<? extends Annotation> nestedAnnotationType =\n 1639: 						(Class<? extends Annotation>) returnType.getComponentType();\n 1640  				if (isSynthesizable(nestedAnnotationType)) {\n 1641  					synthesizable = Boolean.TRUE;\n ....\n 2060  			Class<?> aliasedReturnType = this.aliasedAttribute.getReturnType();\n 2061  			if (returnType != aliasedReturnType &&\n 2062: 					(!aliasedReturnType.isArray() || returnType != aliasedReturnType.getComponentType())) {\n 2063  				String msg = String.format(\"Misconfigured aliases: attribute '%s' in annotation [%s] \" +\n 2064  						\"and attribute '%s' in annotation [%s] must declare the same return type.\",\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\annotation\\MapAnnotationAttributeExtractor.java:\n  132  \n  133  				// Single element overriding an array of the same type?\n  134: 				if (requiredReturnType.isArray() && requiredReturnType.getComponentType() == actualReturnType) {\n  135: 					Object array = Array.newInstance(requiredReturnType.getComponentType(), 1);\n  136  					Array.set(array, 0, attributeValue);\n  137  					attributes.put(attributeName, array);\n  ...\n  151  				// Nested array of maps representing an array of annotations?\n  152  				else if (requiredReturnType.isArray() && actualReturnType.isArray() &&\n  153: 						Annotation.class.isAssignableFrom(requiredReturnType.getComponentType()) &&\n  154: 						Map.class.isAssignableFrom(actualReturnType.getComponentType())) {\n  155  					Class<? extends Annotation> nestedAnnotationType =\n  156: 							(Class<? extends Annotation>) requiredReturnType.getComponentType();\n  157  					Map<String, Object>[] maps = (Map<String, Object>[]) attributeValue;\n  158  					attributes.put(attributeName, AnnotationUtils.synthesizeAnnotationArray(maps, nestedAnnotationType));\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\annotation\\Order.java:\n   26  \n   27  /**\n   28:  * {@code @Order} defines the sort order for an annotated component.\n   29   *\n   30   * <p>The {@link #value} is optional and represents an order value as defined\n   ..\n   37   *\n   38   * <p><b>NOTE</b>: Annotation-based ordering is supported for specific kinds\n   39:  * of components only &mdash; for example, for annotation-based AspectJ\n   40   * aspects. Ordering strategies within the Spring container, on the other\n   41   * hand, are typically based on the {@link Ordered} interface in order to\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\annotation\\SynthesizedAnnotationInvocationHandler.java:\n  116  \n  117  	/**\n  118: 	 * Clone the provided array, ensuring that original component type is\n  119  	 * retained.\n  120  	 * @param array the array to clone\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\BridgeMethodResolver.java:\n  179  			Class<?> candidateParameter = candidateParameters[i];\n  180  			if (candidateParameter.isArray()) {\n  181: 				// An array type: compare the component type.\n  182: 				if (!candidateParameter.getComponentType().equals(genericParameter.getComponentType().resolve(Object.class))) {\n  183  					return false;\n  184  				}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\Conventions.java:\n   69  	 * {@code com.myapp.MyProduct} becomes {@code myProduct};\n   70  	 * {@code com.myapp.UKProduct} becomes {@code UKProduct}.\n   71: 	 * <p>For arrays, we use the pluralized version of the array component type.\n   72  	 * For {@code Collection}s we attempt to 'peek ahead' in the\n   73: 	 * {@code Collection} to determine the component type and\n   74: 	 * return the pluralized version of that component type.\n   75  	 * @param value the value to generate a variable name for\n   76  	 * @return the generated variable name\n   ..\n   82  \n   83  		if (value.getClass().isArray()) {\n   84: 			valueClass = value.getClass().getComponentType();\n   85  			pluralize = true;\n   86  		}\n   ..\n  114  \n  115  		if (parameter.getParameterType().isArray()) {\n  116: 			valueClass = parameter.getParameterType().getComponentType();\n  117  			pluralize = true;\n  118  		}\n  ...\n  180  \n  181  		if (resolvedType.isArray()) {\n  182: 			valueClass = resolvedType.getComponentType();\n  183  			pluralize = true;\n  184  		}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\convert\\support\\ArrayToCollectionConverter.java:\n   32   * <p>First, creates a new Collection of the requested target type.\n   33   * Then adds each array element to the target collection.\n   34:  * Will perform an element conversion from the source component type\n   35   * to the collection's parameterized type if necessary.\n   36   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\convert\\support\\CollectionToArrayConverter.java:\n   32   * size of the source Collection. Then sets each collection element into the array.\n   33   * Will perform an element conversion from the collection's parameterized type to the\n   34:  * array's component type if necessary.\n   35   *\n   36   * @author Keith Donald\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\convert\\support\\GenericConversionService.java:\n  568  			while (i < hierarchy.size()) {\n  569  				Class<?> candidate = hierarchy.get(i);\n  570: 				candidate = (array ? candidate.getComponentType() : ClassUtils.resolvePrimitiveIfNecessary(candidate));\n  571  				Class<?> superclass = candidate.getSuperclass();\n  572  				if (superclass != null && superclass != Object.class && superclass != Enum.class) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\convert\\support\\ObjectToArrayConverter.java:\n   27  /**\n   28   * Converts an Object to a single-element array containing the Object.\n   29:  * Will convert the Object to the target array's component type if necessary.\n   30   *\n   31   * @author Keith Donald\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\convert\\TypeDescriptor.java:\n  325  \n  326  	/**\n  327: 	 * If this type is an array, returns the array's component type.\n  328: 	 * If this type is a {@code Stream}, returns the stream's component type.\n  329  	 * If this type is a {@link Collection} and it is parameterized, returns the Collection's element type.\n  330  	 * If the Collection is not parameterized, returns {@code null} indicating the element type is not declared.\n  331: 	 * @return the array component type or Collection element type, or {@code null} if this type is a\n  332  	 * Collection but its element type is not parameterized\n  333  	 * @throws IllegalStateException if this type is not a {@code java.util.Collection} or array type\n  ...\n  335  	public TypeDescriptor getElementTypeDescriptor() {\n  336  		if (this.resolvableType.isArray()) {\n  337: 			return new TypeDescriptor(this.resolvableType.getComponentType(), null, this.annotations);\n  338  		}\n  339  		if (Stream.class.isAssignableFrom(this.type)) {\n  ...\n  571  			return null;\n  572  		}\n  573: 		return new TypeDescriptor(ResolvableType.forArrayComponent(elementTypeDescriptor.resolvableType),\n  574  				null, elementTypeDescriptor.getAnnotations());\n  575  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\env\\CommandLinePropertySource.java:\n   84   *\n   85   * <pre class=\"code\">\n   86:  * &#064;Component\n   87:  * public class MyComponent {\n   88   *\n   89   *     &#064;Value(\"my.property:defaultVal\")\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\env\\EnvironmentCapable.java:\n   18  \n   19  /**\n   20:  * Interface indicating a component that contains and exposes an {@link Environment} reference.\n   21   *\n   22   * <p>All Spring application contexts are EnvironmentCapable, and the interface is used primarily\n   ..\n   42  \n   43  	/**\n   44: 	 * Return the {@link Environment} associated with this component.\n   45  	 */\n   46  	Environment getEnvironment();\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\io\\buffer\\NettyDataBuffer.java:\n  173  		CompositeByteBuf composite = new CompositeByteBuf(\n  174  				this.byteBuf.alloc(), this.byteBuf.isDirect(), byteBufs.length + 1);\n  175: 		composite.addComponent(this.byteBuf);\n  176: 		composite.addComponents(byteBufs);\n  177  \n  178  		int writerIndex = this.byteBuf.readableBytes() +\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\io\\support\\PropertiesLoaderSupport.java:\n   29  \n   30  /**\n   31:  * Base class for JavaBean-style components that need to load properties\n   32   * from one or more resources. Supports local properties as well, with\n   33   * configurable overriding.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\ResolvableType.java:\n  110  \n  111  	/**\n  112: 	 * The component type for an array or {@code null} if the type should be deduced.\n  113  	 */\n  114: 	private final ResolvableType componentType;\n  115  \n  116  	/**\n  ...\n  136  		this.typeProvider = typeProvider;\n  137  		this.variableResolver = variableResolver;\n  138: 		this.componentType = null;\n  139  		this.resolved = null;\n  140  		this.hash = calculateHashCode();\n  ...\n  150  		this.typeProvider = typeProvider;\n  151  		this.variableResolver = variableResolver;\n  152: 		this.componentType = null;\n  153  		this.resolved = resolveClass();\n  154  		this.hash = hash;\n  ...\n  160  	 */\n  161  	private ResolvableType(\n  162: 			Type type, TypeProvider typeProvider, VariableResolver variableResolver, ResolvableType componentType) {\n  163  \n  164  		this.type = type;\n  165  		this.typeProvider = typeProvider;\n  166  		this.variableResolver = variableResolver;\n  167: 		this.componentType = componentType;\n  168  		this.resolved = resolveClass();\n  169  		this.hash = null;\n  ...\n  180  		this.typeProvider = null;\n  181  		this.variableResolver = null;\n  182: 		this.componentType = null;\n  183  		this.hash = null;\n  184  	}\n  ...\n  264  		}\n  265  \n  266: 		// Deal with array by delegating to the component type\n  267  		if (isArray()) {\n  268: 			return (other.isArray() && getComponentType().isAssignableFrom(other.getComponentType()));\n  269  		}\n  270  \n  ...\n  350  	/**\n  351  	 * Return {@code true} if this type resolves to a Class that represents an array.\n  352: 	 * @see #getComponentType()\n  353  	 */\n  354  	public boolean isArray() {\n  ...\n  361  \n  362  	/**\n  363: 	 * Return the ResolvableType representing the component type of the array or\n  364  	 * {@link #NONE} if this type does not represent an array.\n  365  	 * @see #isArray()\n  366  	 */\n  367: 	public ResolvableType getComponentType() {\n  368  		if (this == NONE) {\n  369  			return NONE;\n  370  		}\n  371: 		if (this.componentType != null) {\n  372: 			return this.componentType;\n  373  		}\n  374  		if (this.type instanceof Class) {\n  375: 			Class<?> componentType = ((Class<?>) this.type).getComponentType();\n  376: 			return forType(componentType, this.variableResolver);\n  377  		}\n  378  		if (this.type instanceof GenericArrayType) {\n  379: 			return forType(((GenericArrayType) this.type).getGenericComponentType(), this.variableResolver);\n  380  		}\n  381: 		return resolveType().getComponentType();\n  382  	}\n  383  \n  ...\n  592  		for (int i = 2; i <= nestingLevel; i++) {\n  593  			if (result.isArray()) {\n  594: 				result = result.getComponentType();\n  595  			}\n  596  			else {\n  ...\n  755  		}\n  756  		if (this.type instanceof GenericArrayType) {\n  757: 			Class<?> resolvedComponent = getComponentType().resolve();\n  758: 			return (resolvedComponent != null ? Array.newInstance(resolvedComponent, 0).getClass() : null);\n  759  		}\n  760  		return resolveType().resolve();\n  ...\n  846  			return false;\n  847  		}\n  848: 		if (!ObjectUtils.nullSafeEquals(this.componentType, otherType.componentType)) {\n  849  			return false;\n  850  		}\n  ...\n  865  			hashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(this.variableResolver.getSource());\n  866  		}\n  867: 		if (this.componentType != null) {\n  868: 			hashCode = 31 * hashCode + ObjectUtils.nullSafeHashCode(this.componentType);\n  869  		}\n  870  		return hashCode;\n  ...\n  895  	public String toString() {\n  896  		if (isArray()) {\n  897: 			return getComponentType() + \"[]\";\n  898  		}\n  899  		if (this.resolved == null) {\n  ...\n 1261  \n 1262  	/**\n 1263: 	 * Return a {@link ResolvableType} as a array of the specified {@code componentType}.\n 1264: 	 * @param componentType the component type\n 1265: 	 * @return a {@link ResolvableType} as an array of the specified component type\n 1266  	 */\n 1267: 	public static ResolvableType forArrayComponent(ResolvableType componentType) {\n 1268: 		Assert.notNull(componentType, \"Component type must not be null\");\n 1269: 		Class<?> arrayClass = Array.newInstance(componentType.resolve(), 0).getClass();\n 1270: 		return new ResolvableType(arrayClass, null, null, componentType);\n 1271  	}\n 1272  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\SerializableTypeWrapper.java:\n   49   * {@link WildcardType}. With the exception of {@link Class} (which is final) calls to\n   50   * methods that return further {@link Type}s (for example\n   51:  * {@link GenericArrayType#getGenericComponentType()}) will be automatically wrapped.\n   52   *\n   53   * @author Phillip Webb\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\style\\DefaultValueStyler.java:\n  132  	private String styleArray(Object[] array) {\n  133  		StringBuilder result = new StringBuilder(array.length * 8 + 16);\n  134: 		result.append(ARRAY + \"<\").append(ClassUtils.getShortName(array.getClass().getComponentType())).append(\">[\");\n  135  		for (int i = 0; i < array.length - 1; i++) {\n  136  			result.append(style(array[i]));\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\core\\task\\support\\ExecutorServiceAdapter.java:\n   28   * and exposes a full {@code java.util.concurrent.ExecutorService} for it.\n   29   *\n   30:  * <p>This is primarily for adapting to client components that communicate via the\n   31   * {@code java.util.concurrent.ExecutorService} API. It can also be used as\n   32   * common ground between a local Spring {@code TaskExecutor} backend and a\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\util\\ClassUtils.java:\n  475  	/**\n  476  	 * Return the qualified name of the given class: usually simply\n  477: 	 * the class name, but component type class name + \"[]\" for arrays.\n  478  	 * @param clazz the class\n  479  	 * @return the qualified name of the class\n  ...\n  491  	/**\n  492  	 * Build a nice qualified name for an array:\n  493: 	 * component type class name + \"[]\".\n  494  	 * @param clazz the array class\n  495  	 * @return a qualified name for the array class\n  ...\n  498  		StringBuilder result = new StringBuilder();\n  499  		while (clazz.isArray()) {\n  500: 			clazz = clazz.getComponentType();\n  501  			result.append(ARRAY_SUFFIX);\n  502  		}\n  ...\n  518  	/**\n  519  	 * Return a descriptive name for the given object's type: usually simply\n  520: 	 * the class name, but component type class name + \"[]\" for arrays,\n  521  	 * and an appended list of implemented interfaces for JDK proxies.\n  522  	 * @param value the value to introspect\n  ...\n  873  	public static boolean isPrimitiveArray(Class<?> clazz) {\n  874  		Assert.notNull(clazz, \"Class must not be null\");\n  875: 		return (clazz.isArray() && clazz.getComponentType().isPrimitive());\n  876  	}\n  877  \n  ...\n  884  	public static boolean isPrimitiveWrapperArray(Class<?> clazz) {\n  885  		Assert.notNull(clazz, \"Class must not be null\");\n  886: 		return (clazz.isArray() && isPrimitiveWrapper(clazz.getComponentType()));\n  887  	}\n  888  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\util\\ObjectUtils.java:\n  239  		throw new IllegalArgumentException(\n  240  				String.format(\"constant [%s] does not exist in enum type %s\",\n  241: 						constant, enumValues.getClass().getComponentType().getName()));\n  242  	}\n  243  \n  ...\n  247  	 * @param array the array to append to (can be {@code null})\n  248  	 * @param obj the object to append\n  249: 	 * @return the new array (of the same component type; never {@code null})\n  250  	 */\n  251  	public static <A, O extends A> A[] addObjectToArray(A[] array, O obj) {\n  252  		Class<?> compType = Object.class;\n  253  		if (array != null) {\n  254: 			compType = array.getClass().getComponentType();\n  255  		}\n  256  		else if (obj != null) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\main\\java\\org\\springframework\\util\\TypeUtils.java:\n   66  			}\n   67  			else if (lhsClass.isArray() && rhsType instanceof GenericArrayType) {\n   68: 				Type rhsComponent = ((GenericArrayType) rhsType).getGenericComponentType();\n   69  \n   70: 				return isAssignable(lhsClass.getComponentType(), rhsComponent);\n   71  			}\n   72  		}\n   ..\n   87  \n   88  		if (lhsType instanceof GenericArrayType) {\n   89: 			Type lhsComponent = ((GenericArrayType) lhsType).getGenericComponentType();\n   90  \n   91  			if (rhsType instanceof Class<?>) {\n   ..\n   93  \n   94  				if (rhsClass.isArray()) {\n   95: 					return isAssignable(lhsComponent, rhsClass.getComponentType());\n   96  				}\n   97  			}\n   98  			else if (rhsType instanceof GenericArrayType) {\n   99: 				Type rhsComponent = ((GenericArrayType) rhsType).getGenericComponentType();\n  100  \n  101: 				return isAssignable(lhsComponent, rhsComponent);\n  102  			}\n  103  		}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\test\\java\\org\\springframework\\core\\annotation\\AnnotatedElementUtilsTests.java:\n   39  import org.springframework.core.annotation.AnnotationUtilsTests.WebController;\n   40  import org.springframework.core.annotation.AnnotationUtilsTests.WebMapping;\n   41: import org.springframework.stereotype.Component;\n   42  import org.springframework.stereotype.Indexed;\n   43  import org.springframework.util.Assert;\n   ..\n   71  	@Test\n   72  	public void getMetaAnnotationTypesOnNonAnnotatedClass() {\n   73: 		assertNull(getMetaAnnotationTypes(NonAnnotatedClass.class, TransactionalComponent.class));\n   74: 		assertNull(getMetaAnnotationTypes(NonAnnotatedClass.class, TransactionalComponent.class.getName()));\n   75  	}\n   76  \n   77  	@Test\n   78  	public void getMetaAnnotationTypesOnClassWithMetaDepth1() {\n   79: 		Set<String> names = getMetaAnnotationTypes(TransactionalComponentClass.class, TransactionalComponent.class);\n   80: 		assertEquals(names(Transactional.class, Component.class, Indexed.class), names);\n   81  \n   82: 		names = getMetaAnnotationTypes(TransactionalComponentClass.class, TransactionalComponent.class.getName());\n   83: 		assertEquals(names(Transactional.class, Component.class, Indexed.class), names);\n   84  	}\n   85  \n   86  	@Test\n   87  	public void getMetaAnnotationTypesOnClassWithMetaDepth2() {\n   88: 		Set<String> names = getMetaAnnotationTypes(ComposedTransactionalComponentClass.class, ComposedTransactionalComponent.class);\n   89: 		assertEquals(names(TransactionalComponent.class, Transactional.class, Component.class, Indexed.class), names);\n   90  \n   91: 		names = getMetaAnnotationTypes(ComposedTransactionalComponentClass.class, ComposedTransactionalComponent.class.getName());\n   92: 		assertEquals(names(TransactionalComponent.class, Transactional.class, Component.class, Indexed.class), names);\n   93  	}\n   94  \n   ..\n  100  	@Test\n  101  	public void hasMetaAnnotationTypesOnClassWithMetaDepth0() {\n  102: 		assertFalse(hasMetaAnnotationTypes(TransactionalComponentClass.class, TransactionalComponent.class.getName()));\n  103  	}\n  104  \n  105  	@Test\n  106  	public void hasMetaAnnotationTypesOnClassWithMetaDepth1() {\n  107: 		assertTrue(hasMetaAnnotationTypes(TransactionalComponentClass.class, TX_NAME));\n  108: 		assertTrue(hasMetaAnnotationTypes(TransactionalComponentClass.class, Component.class.getName()));\n  109  	}\n  110  \n  111  	@Test\n  112  	public void hasMetaAnnotationTypesOnClassWithMetaDepth2() {\n  113: 		assertTrue(hasMetaAnnotationTypes(ComposedTransactionalComponentClass.class, TX_NAME));\n  114: 		assertTrue(hasMetaAnnotationTypes(ComposedTransactionalComponentClass.class, Component.class.getName()));\n  115: 		assertFalse(hasMetaAnnotationTypes(ComposedTransactionalComponentClass.class, ComposedTransactionalComponent.class.getName()));\n  116  	}\n  117  \n  ...\n  123  	@Test\n  124  	public void isAnnotatedOnClassWithMetaDepth0() {\n  125: 		assertTrue(isAnnotated(TransactionalComponentClass.class, TransactionalComponent.class.getName()));\n  126  	}\n  127  \n  ...\n  129  	public void isAnnotatedOnSubclassWithMetaDepth0() {\n  130  		assertFalse(\"isAnnotated() does not search the class hierarchy.\",\n  131: 				isAnnotated(SubTransactionalComponentClass.class, TransactionalComponent.class.getName()));\n  132  	}\n  133  \n  134  	@Test\n  135  	public void isAnnotatedOnClassWithMetaDepth1() {\n  136: 		assertTrue(isAnnotated(TransactionalComponentClass.class, TX_NAME));\n  137: 		assertTrue(isAnnotated(TransactionalComponentClass.class, Component.class.getName()));\n  138  	}\n  139  \n  140  	@Test\n  141  	public void isAnnotatedOnClassWithMetaDepth2() {\n  142: 		assertTrue(isAnnotated(ComposedTransactionalComponentClass.class, TX_NAME));\n  143: 		assertTrue(isAnnotated(ComposedTransactionalComponentClass.class, Component.class.getName()));\n  144: 		assertTrue(isAnnotated(ComposedTransactionalComponentClass.class, ComposedTransactionalComponent.class.getName()));\n  145  	}\n  146  \n  ...\n  579  		// 1) Find and merge AnnotationAttributes from the annotation hierarchy\n  580  		AnnotationAttributes attributes = findMergedAnnotationAttributes(\n  581: 				AliasedTransactionalComponentClass.class, AliasedTransactional.class);\n  582: 		assertNotNull(\"@AliasedTransactional on AliasedTransactionalComponentClass.\", attributes);\n  583  \n  584  		// 2) Synthesize the AnnotationAttributes back into the target annotation\n  585  		AliasedTransactional annotation = AnnotationUtils.synthesizeAnnotation(attributes,\n  586: 				AliasedTransactional.class, AliasedTransactionalComponentClass.class);\n  587  		assertNotNull(annotation);\n  588  \n  ...\n  596  	@Test\n  597  	public void findMergedAnnotationAttributesOnClassWithAttributeAliasInComposedAnnotationAndNestedAnnotationsInTargetAnnotation() {\n  598: 		AnnotationAttributes attributes = assertComponentScanAttributes(TestComponentScanClass.class, \"com.example.app.test\");\n  599  \n  600  		Filter[] excludeFilters = attributes.getAnnotationArray(\"excludeFilters\", Filter.class);\n  ...\n  612  	@Test\n  613  	public void findMergedAnnotationAttributesOnClassWithBothAttributesOfAnAliasPairDeclared() {\n  614: 		assertComponentScanAttributes(ComponentScanWithBasePackagesAndValueAliasClass.class, \"com.example.app.test\");\n  615  	}\n  616  \n  617  	@Test\n  618  	public void findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaConvention() {\n  619: 		assertComponentScanAttributes(ConventionBasedSinglePackageComponentScanClass.class, \"com.example.app.test\");\n  620  	}\n  621  \n  622  	@Test\n  623  	public void findMergedAnnotationAttributesWithSingleElementOverridingAnArrayViaAliasFor() {\n  624: 		assertComponentScanAttributes(AliasForBasedSinglePackageComponentScanClass.class, \"com.example.app.test\");\n  625  	}\n  626  \n  627: 	private AnnotationAttributes assertComponentScanAttributes(Class<?> element, String... expected) {\n  628: 		AnnotationAttributes attributes = findMergedAnnotationAttributes(element, ComponentScan.class);\n  629  \n  630: 		assertNotNull(\"Should find @ComponentScan on \" + element, attributes);\n  631  		assertArrayEquals(\"value: \", expected, attributes.getStringArray(\"value\"));\n  632  		assertArrayEquals(\"basePackages: \", expected, attributes.getStringArray(\"basePackages\"));\n  ...\n  642  	@Test\n  643  	public void findMergedAnnotationWithAttributeAliasesInTargetAnnotation() {\n  644: 		Class<?> element = AliasedTransactionalComponentClass.class;\n  645  		AliasedTransactional annotation = findMergedAnnotation(element, AliasedTransactional.class);\n  646  		assertNotNull(\"@AliasedTransactional on \" + element, annotation);\n  ...\n  803  \n  804  	@Transactional\n  805: 	@Component\n  806  	@Retention(RetentionPolicy.RUNTIME)\n  807: 	@interface TransactionalComponent {\n  808  	}\n  809  \n  810: 	@TransactionalComponent\n  811  	@Retention(RetentionPolicy.RUNTIME)\n  812: 	@interface ComposedTransactionalComponent {\n  813  	}\n  814  \n  815  	@AliasedTransactional(value = \"aliasForQualifier\")\n  816: 	@Component\n  817  	@Retention(RetentionPolicy.RUNTIME)\n  818: 	@interface AliasedTransactionalComponent {\n  819  	}\n  820  \n  ...\n 1011  \n 1012  	/**\n 1013: 	 * Mock of {@code org.springframework.context.annotation.ComponentScan}\n 1014  	 */\n 1015  	@Retention(RetentionPolicy.RUNTIME)\n 1016: 	@interface ComponentScan {\n 1017  \n 1018  		@AliasFor(\"basePackages\")\n ....\n 1032  	}\n 1033  \n 1034: 	@ComponentScan(excludeFilters = {@Filter(pattern = \"*Test\"), @Filter(pattern = \"*Tests\")})\n 1035  	@Retention(RetentionPolicy.RUNTIME)\n 1036: 	@interface TestComponentScan {\n 1037  \n 1038: 		@AliasFor(attribute = \"basePackages\", annotation = ComponentScan.class)\n 1039  		String[] packages();\n 1040  	}\n 1041  \n 1042: 	@ComponentScan\n 1043  	@Retention(RetentionPolicy.RUNTIME)\n 1044: 	@interface ConventionBasedSinglePackageComponentScan {\n 1045  \n 1046  		String basePackages();\n 1047  	}\n 1048  \n 1049: 	@ComponentScan\n 1050  	@Retention(RetentionPolicy.RUNTIME)\n 1051: 	@interface AliasForBasedSinglePackageComponentScan {\n 1052  \n 1053: 		@AliasFor(attribute = \"basePackages\", annotation = ComponentScan.class)\n 1054  		String pkg();\n 1055  	}\n ....\n 1060  	}\n 1061  \n 1062: 	@TransactionalComponent\n 1063: 	static class TransactionalComponentClass {\n 1064  	}\n 1065  \n 1066: 	static class SubTransactionalComponentClass extends TransactionalComponentClass {\n 1067  	}\n 1068  \n 1069: 	@ComposedTransactionalComponent\n 1070: 	static class ComposedTransactionalComponentClass {\n 1071  	}\n 1072  \n 1073: 	@AliasedTransactionalComponent\n 1074: 	static class AliasedTransactionalComponentClass {\n 1075  	}\n 1076  \n ....\n 1249  	}\n 1250  \n 1251: 	@ComponentScan(value = \"com.example.app.test\", basePackages = \"com.example.app.test\")\n 1252: 	static class ComponentScanWithBasePackagesAndValueAliasClass {\n 1253  	}\n 1254  \n 1255: 	@TestComponentScan(packages = \"com.example.app.test\")\n 1256: 	static class TestComponentScanClass {\n 1257  	}\n 1258  \n 1259: 	@ConventionBasedSinglePackageComponentScan(basePackages = \"com.example.app.test\")\n 1260: 	static class ConventionBasedSinglePackageComponentScanClass {\n 1261  	}\n 1262  \n 1263: 	@AliasForBasedSinglePackageComponentScan(pkg = \"com.example.app.test\")\n 1264: 	static class AliasForBasedSinglePackageComponentScanClass {\n 1265  	}\n 1266  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\test\\java\\org\\springframework\\core\\annotation\\AnnotationUtilsTests.java:\n   37  import org.springframework.core.Ordered;\n   38  import org.springframework.core.annotation.subpackage.NonPublicAnnotatedClass;\n   39: import org.springframework.stereotype.Component;\n   40  import org.springframework.util.ClassUtils;\n   41  import org.springframework.util.ReflectionUtils;\n   ..\n  116  	public void findMethodAnnotationWithMetaMetaAnnotationOnLeaf() throws Exception {\n  117  		Method m = Leaf.class.getMethod(\"metaMetaAnnotatedOnLeaf\");\n  118: 		assertNull(m.getAnnotation(Component.class));\n  119: 		assertNull(getAnnotation(m, Component.class));\n  120: 		assertNotNull(findAnnotation(m, Component.class));\n  121  	}\n  122  \n  ...\n  211  	@Test\n  212  	public void findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverAnnotationsOnInterfaces() {\n  213: 		Component component = findAnnotation(ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface.class, Component.class);\n  214: 		assertNotNull(component);\n  215: 		assertEquals(\"meta2\", component.value());\n  216  	}\n  217  \n  ...\n  227  	@Test\n  228  	public void findClassAnnotationFavorsMoreLocallyDeclaredComposedAnnotationsOverInheritedComposedAnnotations() {\n  229: 		Component component = findAnnotation(SubSubClassWithInheritedMetaAnnotation.class, Component.class);\n  230: 		assertNotNull(component);\n  231: 		assertEquals(\"meta2\", component.value());\n  232  	}\n  233  \n  234  	@Test\n  235  	public void findClassAnnotationOnMetaMetaAnnotatedClass() {\n  236: 		Component component = findAnnotation(MetaMetaAnnotatedClass.class, Component.class);\n  237: 		assertNotNull(\"Should find meta-annotation on composed annotation on class\", component);\n  238: 		assertEquals(\"meta2\", component.value());\n  239  	}\n  240  \n  241  	@Test\n  242  	public void findClassAnnotationOnMetaMetaMetaAnnotatedClass() {\n  243: 		Component component = findAnnotation(MetaMetaMetaAnnotatedClass.class, Component.class);\n  244: 		assertNotNull(\"Should find meta-annotation on meta-annotation on composed annotation on class\", component);\n  245: 		assertEquals(\"meta2\", component.value());\n  246  	}\n  247  \n  248  	@Test\n  249  	public void findClassAnnotationOnAnnotatedClassWithMissingTargetMetaAnnotation() {\n  250: 		// TransactionalClass is NOT annotated or meta-annotated with @Component\n  251: 		Component component = findAnnotation(TransactionalClass.class, Component.class);\n  252: 		assertNull(\"Should not find @Component on TransactionalClass\", component);\n  253  	}\n  254  \n  255  	@Test\n  256  	public void findClassAnnotationOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation() {\n  257: 		Component component = findAnnotation(MetaCycleAnnotatedClass.class, Component.class);\n  258: 		assertNull(\"Should not find @Component on MetaCycleAnnotatedClass\", component);\n  259  	}\n  260  \n  ...\n  433  	@Test\n  434  	public void getAnnotationAttributesWithoutAttributeAliases() {\n  435: 		Component component = WebController.class.getAnnotation(Component.class);\n  436: 		assertNotNull(component);\n  437  \n  438: 		AnnotationAttributes attributes = (AnnotationAttributes) getAnnotationAttributes(component);\n  439  		assertNotNull(attributes);\n  440  		assertEquals(\"value attribute: \", \"webController\", attributes.getString(VALUE));\n  441: 		assertEquals(Component.class, attributes.annotationType());\n  442  	}\n  443  \n  444  	@Test\n  445  	public void getAnnotationAttributesWithNestedAnnotations() {\n  446: 		ComponentScan componentScan = ComponentScanClass.class.getAnnotation(ComponentScan.class);\n  447: 		assertNotNull(componentScan);\n  448  \n  449: 		AnnotationAttributes attributes = getAnnotationAttributes(ComponentScanClass.class, componentScan);\n  450  		assertNotNull(attributes);\n  451: 		assertEquals(ComponentScan.class, attributes.annotationType());\n  452  \n  453  		Filter[] filters = attributes.getAnnotationArray(\"excludeFilters\", Filter.class);\n  ...\n  726  	public void getAttributeOverrideNameFromWrongTargetAnnotation() throws Exception {\n  727  		Method attribute = AliasedComposedContextConfig.class.getDeclaredMethod(\"xmlConfigFile\");\n  728: 		assertThat(\"xmlConfigFile is not an alias for @Component.\",\n  729: 			getAttributeOverrideName(attribute, Component.class), is(nullValue()));\n  730  	}\n  731  \n  ...\n  852  	@Test\n  853  	public void synthesizeAnnotationWithoutAttributeAliases() throws Exception {\n  854: 		Component component = WebController.class.getAnnotation(Component.class);\n  855: 		assertNotNull(component);\n  856: 		Component synthesizedComponent = synthesizeAnnotation(component);\n  857: 		assertNotNull(synthesizedComponent);\n  858: 		assertSame(component, synthesizedComponent);\n  859: 		assertEquals(\"value attribute: \", \"webController\", synthesizedComponent.value());\n  860  	}\n  861  \n  ...\n 1154  	@Test\n 1155  	public void synthesizeAnnotationFromMapWithoutAttributeAliases() throws Exception {\n 1156: 		Component component = WebController.class.getAnnotation(Component.class);\n 1157: 		assertNotNull(component);\n 1158  \n 1159  		Map<String, Object> map = Collections.singletonMap(VALUE, \"webController\");\n 1160: 		Component synthesizedComponent = synthesizeAnnotation(map, Component.class, WebController.class);\n 1161: 		assertNotNull(synthesizedComponent);\n 1162  \n 1163: 		assertNotSame(component, synthesizedComponent);\n 1164: 		assertEquals(\"value from component: \", \"webController\", component.value());\n 1165: 		assertEquals(\"value from synthesized component: \", \"webController\", synthesizedComponent.value());\n 1166  	}\n 1167  \n ....\n 1169  	@SuppressWarnings(\"unchecked\")\n 1170  	public void synthesizeAnnotationFromMapWithNestedMap() throws Exception {\n 1171: 		ComponentScanSingleFilter componentScan = ComponentScanSingleFilterClass.class.getAnnotation(ComponentScanSingleFilter.class);\n 1172: 		assertNotNull(componentScan);\n 1173: 		assertEquals(\"value from ComponentScan: \", \"*Foo\", componentScan.value().pattern());\n 1174  \n 1175  		AnnotationAttributes attributes = getAnnotationAttributes(\n 1176: 				ComponentScanSingleFilterClass.class, componentScan, false, true);\n 1177  		assertNotNull(attributes);\n 1178: 		assertEquals(ComponentScanSingleFilter.class, attributes.annotationType());\n 1179  \n 1180  		Map<String, Object> filterMap = (Map<String, Object>) attributes.get(\"value\");\n ....\n 1186  		filterMap.put(\"enigma\", 42);\n 1187  \n 1188: 		ComponentScanSingleFilter synthesizedComponentScan = synthesizeAnnotation(\n 1189: 				attributes, ComponentScanSingleFilter.class, ComponentScanSingleFilterClass.class);\n 1190: 		assertNotNull(synthesizedComponentScan);\n 1191  \n 1192: 		assertNotSame(componentScan, synthesizedComponentScan);\n 1193: 		assertEquals(\"value from synthesized ComponentScan: \", \"newFoo\", synthesizedComponentScan.value().pattern());\n 1194  	}\n 1195  \n ....\n 1197  	@SuppressWarnings(\"unchecked\")\n 1198  	public void synthesizeAnnotationFromMapWithNestedArrayOfMaps() throws Exception {\n 1199: 		ComponentScan componentScan = ComponentScanClass.class.getAnnotation(ComponentScan.class);\n 1200: 		assertNotNull(componentScan);\n 1201  \n 1202: 		AnnotationAttributes attributes = getAnnotationAttributes(ComponentScanClass.class, componentScan, false, true);\n 1203  		assertNotNull(attributes);\n 1204: 		assertEquals(ComponentScan.class, attributes.annotationType());\n 1205  \n 1206  		Map<String, Object>[] filters = (Map[]) attributes.get(\"excludeFilters\");\n ....\n 1216  		filters[1].put(\"enigma\", 42);\n 1217  \n 1218: 		ComponentScan synthesizedComponentScan = synthesizeAnnotation(attributes, ComponentScan.class, ComponentScanClass.class);\n 1219: 		assertNotNull(synthesizedComponentScan);\n 1220  \n 1221: 		assertNotSame(componentScan, synthesizedComponentScan);\n 1222: 		patterns = stream(synthesizedComponentScan.excludeFilters()).map(Filter::pattern).collect(toList());\n 1223  		assertEquals(asList(\"newFoo\", \"newBar\"), patterns);\n 1224  	}\n ....\n 1316  		exception.expectMessage(containsString(\"for attribute 'value'\"));\n 1317  		exception.expectMessage(containsString(\"but a value of type [java.lang.String] is required\"));\n 1318: 		exception.expectMessage(containsString(\"as defined by annotation type [\" + Component.class.getName() + \"]\"));\n 1319  \n 1320: 		synthesizeAnnotation(map, Component.class, null);\n 1321  	}\n 1322  \n ....\n 1324  	public void synthesizeAnnotationFromAnnotationAttributesWithoutAttributeAliases() throws Exception {\n 1325  		// 1) Get an annotation\n 1326: 		Component component = WebController.class.getAnnotation(Component.class);\n 1327: 		assertNotNull(component);\n 1328  \n 1329  		// 2) Convert the annotation into AnnotationAttributes\n 1330: 		AnnotationAttributes attributes = getAnnotationAttributes(WebController.class, component);\n 1331  		assertNotNull(attributes);\n 1332  \n 1333  		// 3) Synthesize the AnnotationAttributes back into an annotation\n 1334: 		Component synthesizedComponent = synthesizeAnnotation(attributes, Component.class, WebController.class);\n 1335: 		assertNotNull(synthesizedComponent);\n 1336  \n 1337  		// 4) Verify that the original and synthesized annotations are equivalent\n 1338: 		assertNotSame(component, synthesizedComponent);\n 1339: 		assertEquals(component, synthesizedComponent);\n 1340: 		assertEquals(\"value from component: \", \"webController\", component.value());\n 1341: 		assertEquals(\"value from synthesized component: \", \"webController\", synthesizedComponent.value());\n 1342  	}\n 1343  \n ....\n 1552  \n 1553  \n 1554: 	@Component(\"meta1\")\n 1555  	@Order\n 1556  	@Retention(RetentionPolicy.RUNTIME)\n ....\n 1559  	}\n 1560  \n 1561: 	@Component(\"meta2\")\n 1562  	@Transactional(readOnly = true)\n 1563  	@Retention(RetentionPolicy.RUNTIME)\n ....\n 1892  	}\n 1893  \n 1894: 	@Component(\"webController\")\n 1895  	static class WebController {\n 1896  \n ....\n 2312  \n 2313  	/**\n 2314: 	 * Mock of {@code org.springframework.context.annotation.ComponentScan}.\n 2315  	 */\n 2316  	@Retention(RetentionPolicy.RUNTIME)\n 2317: 	@interface ComponentScan {\n 2318  		Filter[] excludeFilters() default {};\n 2319  	}\n 2320  \n 2321: 	@ComponentScan(excludeFilters = { @Filter(pattern = \"*Foo\"), @Filter(pattern = \"*Bar\") })\n 2322: 	static class ComponentScanClass {\n 2323  	}\n 2324  \n 2325  	/**\n 2326: 	 * Mock of {@code org.springframework.context.annotation.ComponentScan}.\n 2327  	 */\n 2328  	@Retention(RetentionPolicy.RUNTIME)\n 2329: 	@interface ComponentScanSingleFilter {\n 2330  		Filter value();\n 2331  	}\n 2332  \n 2333: 	@ComponentScanSingleFilter(@Filter(pattern = \"*Foo\"))\n 2334: 	static class ComponentScanSingleFilterClass {\n 2335  	}\n 2336  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\test\\java\\org\\springframework\\core\\annotation\\ComposedRepeatableAnnotationsTests.java:\n   75  \n   76  	@Test\n   77: 	public void getInvalidRepeatableAnnotationContainerWithArrayValueAttributeButWrongComponentType() {\n   78: 		expectContainerWithArrayValueAttributeButWrongComponentType();\n   79  		getMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class,\n   80: 			ContainerWithArrayValueAttributeButWrongComponentType.class);\n   81  	}\n   82  \n   ..\n  140  \n  141  	@Test\n  142: 	public void findInvalidRepeatableAnnotationContainerWithArrayValueAttributeButWrongComponentType() {\n  143: 		expectContainerWithArrayValueAttributeButWrongComponentType();\n  144  		findMergedRepeatableAnnotations(getClass(), InvalidRepeatable.class,\n  145: 			ContainerWithArrayValueAttributeButWrongComponentType.class);\n  146  	}\n  147  \n  ...\n  209  	}\n  210  \n  211: 	private void expectContainerWithArrayValueAttributeButWrongComponentType() {\n  212  		exception.expect(AnnotationConfigurationException.class);\n  213  		exception.expectMessage(startsWith(\"Container type\"));\n  214: 		exception.expectMessage(containsString(ContainerWithArrayValueAttributeButWrongComponentType.class.getName()));\n  215  		exception.expectMessage(containsString(\"must declare a 'value' attribute for an array of type\"));\n  216  		exception.expectMessage(containsString(InvalidRepeatable.class.getName()));\n  ...\n  272  \n  273  	@Retention(RetentionPolicy.RUNTIME)\n  274: 	@interface ContainerWithArrayValueAttributeButWrongComponentType {\n  275  \n  276  		String[] value();\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\test\\java\\org\\springframework\\core\\LocalVariableTableParameterNameDiscovererTests.java:\n   17  package org.springframework.core;\n   18  \n   19: import java.awt.Component;\n   20  import java.io.PrintStream;\n   21  import java.lang.reflect.Constructor;\n   ..\n  208  	public void classesWithoutDebugSymbols() throws Exception {\n  209  		// JDK classes don't have debug information (usually)\n  210: 		Class<Component> clazz = Component.class;\n  211  		String methodName = \"list\";\n  212  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\test\\java\\org\\springframework\\core\\ResolvableTypeTests.java:\n   82  		assertThat(none.asCollection(), equalTo(ResolvableType.NONE));\n   83  		assertThat(none.asMap(), equalTo(ResolvableType.NONE));\n   84: 		assertThat(none.getComponentType(), equalTo(ResolvableType.NONE));\n   85  		assertThat(none.getGeneric(0), equalTo(ResolvableType.NONE));\n   86  		assertThat(none.getGenerics().length, equalTo(0));\n   ..\n  304  \n  305  	@Test\n  306: 	public void getComponentTypeForClassArray() throws Exception {\n  307  		Field field = Fields.class.getField(\"arrayClassType\");\n  308  		ResolvableType type = ResolvableType.forField(field);\n  309  		assertThat(type.isArray(), equalTo(true));\n  310: 		assertThat(type.getComponentType().getType(),\n  311: 				equalTo((Type) ((Class) field.getGenericType()).getComponentType()));\n  312  	}\n  313  \n  314  	@Test\n  315: 	public void getComponentTypeForGenericArrayType() throws Exception {\n  316  		ResolvableType type = ResolvableType.forField(Fields.class.getField(\"genericArrayType\"));\n  317  		assertThat(type.isArray(), equalTo(true));\n  318: 		assertThat(type.getComponentType().getType(),\n  319: 				equalTo(((GenericArrayType) type.getType()).getGenericComponentType()));\n  320  	}\n  321  \n  322  	@Test\n  323: 	public void getComponentTypeForVariableThatResolvesToGenericArray() throws Exception {\n  324  		ResolvableType type = ResolvableType.forClass(ListOfGenericArray.class).asCollection().getGeneric();\n  325  		assertThat(type.isArray(), equalTo(true));\n  326  		assertThat(type.getType(), instanceOf(TypeVariable.class));\n  327: 		assertThat(type.getComponentType().getType().toString(),\n  328  				equalTo(\"java.util.List<java.lang.String>\"));\n  329  	}\n  330  \n  331  	@Test\n  332: 	public void getComponentTypeForNonArray() throws Exception {\n  333  		ResolvableType type = ResolvableType.forClass(String.class);\n  334  		assertThat(type.isArray(), equalTo(false));\n  335: 		assertThat(type.getComponentType(), equalTo(ResolvableType.NONE));\n  336  	}\n  337  \n  ...\n  555  		ResolvableType type = ResolvableType.forField(Fields.class.getField(\"genericArrayType\"));\n  556  		assertThat(type.resolve(), equalTo((Class) List[].class));\n  557: 		assertThat(type.getComponentType().resolve(), equalTo((Class) List.class));\n  558: 		assertThat(type.getComponentType().getGeneric().resolve(), equalTo((Class) String.class));\n  559  	}\n  560  \n  ...\n  563  		ResolvableType type = ResolvableType.forField(Fields.class.getField(\"genericMultiArrayType\"));\n  564  		assertThat(type.resolve(), equalTo((Class) List[][][].class));\n  565: 		assertThat(type.getComponentType().resolve(), equalTo((Class) List[][].class));\n  566  	}\n  567  \n  ...\n 1201  \n 1202  	@Test\n 1203: 	public void forArrayComponent() throws Exception {\n 1204  		ResolvableType elementType = ResolvableType.forField(Fields.class.getField(\"stringList\"));\n 1205: 		ResolvableType type = ResolvableType.forArrayComponent(elementType);\n 1206  		assertThat(type.toString(), equalTo(\"java.util.List<java.lang.String>[]\"));\n 1207  		assertThat(type.resolve(), equalTo((Class) List[].class));\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\test\\java\\org\\springframework\\core\\SerializableTypeWrapperTests.java:\n   99  		assertThat(type.toString(), equalTo(\"java.util.List<java.lang.String>[]\"));\n  100  		assertSerializable(type);\n  101: 		assertSerializable(type.getGenericComponentType());\n  102  	}\n  103  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\test\\java\\org\\springframework\\core\\type\\AnnotationMetadataTests.java:\n   36  import org.springframework.core.type.classreading.MetadataReaderFactory;\n   37  import org.springframework.core.type.classreading.SimpleMetadataReaderFactory;\n   38: import org.springframework.stereotype.Component;\n   39  \n   40  import static org.hamcrest.CoreMatchers.*;\n   ..\n   54  	@Test\n   55  	public void standardAnnotationMetadata() throws Exception {\n   56: 		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class, true);\n   57  		doTestAnnotationInfo(metadata);\n   58  		doTestMethodAnnotationInfo(metadata);\n   ..\n   62  	public void asmAnnotationMetadata() throws Exception {\n   63  		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\n   64: 		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(AnnotatedComponent.class.getName());\n   65  		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();\n   66  		doTestAnnotationInfo(metadata);\n   ..\n   70  	@Test\n   71  	public void standardAnnotationMetadataForSubclass() throws Exception {\n   72: 		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponentSubClass.class, true);\n   73  		doTestSubClassAnnotationInfo(metadata);\n   74  	}\n   ..\n   77  	public void asmAnnotationMetadataForSubclass() throws Exception {\n   78  		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\n   79: 		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(AnnotatedComponentSubClass.class.getName());\n   80  		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();\n   81  		doTestSubClassAnnotationInfo(metadata);\n   ..\n   83  \n   84  	private void doTestSubClassAnnotationInfo(AnnotationMetadata metadata) {\n   85: 		assertThat(metadata.getClassName(), is(AnnotatedComponentSubClass.class.getName()));\n   86  		assertThat(metadata.isInterface(), is(false));\n   87  		assertThat(metadata.isAnnotation(), is(false));\n   ..\n   89  		assertThat(metadata.isConcrete(), is(true));\n   90  		assertThat(metadata.hasSuperClass(), is(true));\n   91: 		assertThat(metadata.getSuperClassName(), is(AnnotatedComponent.class.getName()));\n   92  		assertThat(metadata.getInterfaceNames().length, is(0));\n   93: 		assertThat(metadata.isAnnotated(Component.class.getName()), is(false));\n   94  		assertThat(metadata.isAnnotated(Scope.class.getName()), is(false));\n   95  		assertThat(metadata.isAnnotated(SpecialAttr.class.getName()), is(false));\n   96: 		assertThat(metadata.hasAnnotation(Component.class.getName()), is(false));\n   97  		assertThat(metadata.hasAnnotation(Scope.class.getName()), is(false));\n   98  		assertThat(metadata.hasAnnotation(SpecialAttr.class.getName()), is(false));\n   99  		assertThat(metadata.getAnnotationTypes().size(), is(0));\n  100: 		assertThat(metadata.getAnnotationAttributes(Component.class.getName()), nullValue());\n  101  		assertThat(metadata.getAnnotatedMethods(DirectAnnotation.class.getName()).size(), equalTo(0));\n  102  		assertThat(metadata.isAnnotated(IsAnnotatedAnnotation.class.getName()), equalTo(false));\n  ...\n  134  	@Test\n  135  	public void standardAnnotationMetadataForAnnotation() throws Exception {\n  136: 		AnnotationMetadata metadata = new StandardAnnotationMetadata(Component.class, true);\n  137  		doTestMetadataForAnnotationClass(metadata);\n  138  	}\n  ...\n  141  	public void asmAnnotationMetadataForAnnotation() throws Exception {\n  142  		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\n  143: 		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(Component.class.getName());\n  144  		AnnotationMetadata metadata = metadataReader.getAnnotationMetadata();\n  145  		doTestMetadataForAnnotationClass(metadata);\n  ...\n  147  \n  148  	private void doTestMetadataForAnnotationClass(AnnotationMetadata metadata) {\n  149: 		assertThat(metadata.getClassName(), is(Component.class.getName()));\n  150  		assertThat(metadata.isInterface(), is(true));\n  151  		assertThat(metadata.isAnnotation(), is(true));\n  ...\n  174  	@Test\n  175  	public void standardAnnotationMetadata_nestedAnnotationsAsMap_false() throws Exception {\n  176: 		AnnotationMetadata metadata = new StandardAnnotationMetadata(AnnotatedComponent.class);\n  177  		AnnotationAttributes specialAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(SpecialAttr.class.getName());\n  178  		Annotation[] nestedAnnoArray = (Annotation[]) specialAttrs.get(\"nestedAnnoArray\");\n  ...\n  196  	private void assertMetaAnnotationOverrides(AnnotationMetadata metadata) {\n  197  		AnnotationAttributes attributes = (AnnotationAttributes) metadata.getAnnotationAttributes(\n  198: 				TestComponentScan.class.getName(), false);\n  199  		String[] basePackages = attributes.getStringArray(\"basePackages\");\n  200  		assertThat(\"length of basePackages[]\", basePackages.length, is(1));\n  201: 		assertThat(\"basePackages[0]\", basePackages[0], is(\"org.example.componentscan\"));\n  202  		String[] value = attributes.getStringArray(\"value\");\n  203  		assertThat(\"length of value[]\", value.length, is(0));\n  ...\n  265  \n  266  	private void doTestAnnotationInfo(AnnotationMetadata metadata) {\n  267: 		assertThat(metadata.getClassName(), is(AnnotatedComponent.class.getName()));\n  268  		assertThat(metadata.isInterface(), is(false));\n  269  		assertThat(metadata.isAnnotation(), is(false));\n  ...\n  275  		assertThat(metadata.getInterfaceNames()[0], is(Serializable.class.getName()));\n  276  \n  277: 		assertThat(metadata.hasAnnotation(Component.class.getName()), is(true));\n  278  		assertThat(metadata.hasAnnotation(Scope.class.getName()), is(true));\n  279  		assertThat(metadata.hasAnnotation(SpecialAttr.class.getName()), is(true));\n  280  		assertThat(metadata.getAnnotationTypes().size(), is(6));\n  281: 		assertThat(metadata.getAnnotationTypes().contains(Component.class.getName()), is(true));\n  282  		assertThat(metadata.getAnnotationTypes().contains(Scope.class.getName()), is(true));\n  283  		assertThat(metadata.getAnnotationTypes().contains(SpecialAttr.class.getName()), is(true));\n  284  \n  285: 		AnnotationAttributes compAttrs = (AnnotationAttributes) metadata.getAnnotationAttributes(Component.class.getName());\n  286  		assertThat(compAttrs.size(), is(1));\n  287  		assertThat(compAttrs.getString(\"value\"), is(\"myName\"));\n  ...\n  465  	}\n  466  \n  467: 	@Component(\"myName\")\n  468  	@Scope(\"myScope\")\n  469  	@SpecialAttr(clazz = String.class, state = Thread.State.NEW,\n  ...\n  474  	@MetaMetaAnnotation\n  475  	@EnumSubclasses({SubclassEnum.FOO, SubclassEnum.BAR})\n  476: 	private static class AnnotatedComponent implements Serializable {\n  477  \n  478  		@TestAutowired\n  ...\n  490  \n  491  	@SuppressWarnings(\"serial\")\n  492: 	private static class AnnotatedComponentSubClass extends AnnotatedComponent {\n  493  	}\n  494  \n  495  	@Target(ElementType.TYPE)\n  496  	@Retention(RetentionPolicy.RUNTIME)\n  497: 	@Component\n  498  	public @interface TestConfiguration {\n  499  \n  ...\n  503  	@Retention(RetentionPolicy.RUNTIME)\n  504  	@Target(ElementType.TYPE)\n  505: 	public @interface TestComponentScan {\n  506  \n  507  		String[] value() default {};\n  ...\n  513  \n  514  	@TestConfiguration\n  515: 	@TestComponentScan(basePackages = \"bogus\")\n  516  	@Retention(RetentionPolicy.RUNTIME)\n  517  	@Target(ElementType.TYPE)\n  ...\n  521  	}\n  522  \n  523: 	@ComposedConfigurationWithAttributeOverrides(basePackages = \"org.example.componentscan\")\n  524  	public static class ComposedConfigurationWithAttributeOverridesClass {\n  525  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\test\\java\\org\\springframework\\core\\type\\AnnotationTypeFilterTests.java:\n   25  import org.springframework.core.type.classreading.SimpleMetadataReaderFactory;\n   26  import org.springframework.core.type.filter.AnnotationTypeFilter;\n   27: import org.springframework.stereotype.Component;\n   28  \n   29  import static org.junit.Assert.*;\n   ..\n   39  	public void testDirectAnnotationMatch() throws Exception {\n   40  		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\n   41: 		String classUnderTest = \"org.springframework.core.type.AnnotationTypeFilterTests$SomeComponent\";\n   42  		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest);\n   43  \n   ..\n   50  	public void testInheritedAnnotationFromInterfaceDoesNotMatch() throws Exception {\n   51  		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\n   52: 		String classUnderTest = \"org.springframework.core.type.AnnotationTypeFilterTests$SomeSubClassOfSomeComponentInterface\";\n   53  		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest);\n   54  \n   ..\n   62  	public void testInheritedAnnotationFromBaseClassDoesMatch() throws Exception {\n   63  		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\n   64: 		String classUnderTest = \"org.springframework.core.type.AnnotationTypeFilterTests$SomeSubClassOfSomeComponent\";\n   65  		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest);\n   66  \n   ..\n   88  		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest);\n   89  \n   90: 		AnnotationTypeFilter filter = new AnnotationTypeFilter(Component.class);\n   91  		assertFalse(filter.match(metadataReader, metadataReaderFactory));\n   92  		ClassloadingAssertions.assertClassNotLoaded(classUnderTest);\n   ..\n   97  \n   98  		MetadataReaderFactory metadataReaderFactory = new SimpleMetadataReaderFactory();\n   99: 		String classUnderTest = \"org.springframework.core.type.AnnotationTypeFilterTests$SomeComponentInterface\";\n  100  		MetadataReader metadataReader = metadataReaderFactory.getMetadataReader(classUnderTest);\n  101  \n  ...\n  115  \n  116  	@InheritedAnnotation\n  117: 	private static class SomeComponent {\n  118  	}\n  119  \n  120  \n  121  	@InheritedAnnotation\n  122: 	private static interface SomeComponentInterface {\n  123  	}\n  124  \n  125  \n  126  	@SuppressWarnings(\"unused\")\n  127: 	private static class SomeSubClassOfSomeComponentInterface implements SomeComponentInterface {\n  128  	}\n  129  \n  130  \n  131  	@SuppressWarnings(\"unused\")\n  132: 	private static class SomeSubClassOfSomeComponent extends SomeComponent {\n  133  	}\n  134  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\test\\java\\org\\springframework\\core\\type\\AspectJTypeFilterTests.java:\n   23  import org.springframework.core.type.classreading.SimpleMetadataReaderFactory;\n   24  import org.springframework.core.type.filter.AspectJTypeFilter;\n   25: import org.springframework.stereotype.Component;\n   26  \n   27  import static org.junit.Assert.*;\n   ..\n   86  	@Test\n   87  	public void annotationPatternMatches() throws Exception {\n   88: 		assertMatch(\"org.springframework.core.type.AspectJTypeFilterTests$SomeClassAnnotatedWithComponent\",\n   89: 				\"@org.springframework.stereotype.Component *..*\");\n   90: 		assertMatch(\"org.springframework.core.type.AspectJTypeFilterTests$SomeClassAnnotatedWithComponent\",\n   91  				\"@* *..*\");\n   92: 		assertMatch(\"org.springframework.core.type.AspectJTypeFilterTests$SomeClassAnnotatedWithComponent\",\n   93  				\"@*..* *..*\");\n   94: 		assertMatch(\"org.springframework.core.type.AspectJTypeFilterTests$SomeClassAnnotatedWithComponent\",\n   95: 				\"@*..*Component *..*\");\n   96: 		assertMatch(\"org.springframework.core.type.AspectJTypeFilterTests$SomeClassAnnotatedWithComponent\",\n   97: 				\"@org.springframework.stereotype.Component *..*Component\");\n   98: 		assertMatch(\"org.springframework.core.type.AspectJTypeFilterTests$SomeClassAnnotatedWithComponent\",\n   99: 				\"@org.springframework.stereotype.Component *\");\n  100  	}\n  101  \n  102  	@Test\n  103  	public void annotationPatternNoMathces() throws Exception {\n  104: 		assertNoMatch(\"org.springframework.core.type.AspectJTypeFilterTests$SomeClassAnnotatedWithComponent\",\n  105  				\"@org.springframework.stereotype.Repository *..*\");\n  106  	}\n  ...\n  163  	}\n  164  \n  165: 	@Component\n  166: 	static class SomeClassAnnotatedWithComponent {\n  167  	}\n  168  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\test\\java\\org\\springframework\\core\\type\\CachingMetadataReaderLeakTests.java:\n   51  \n   52  		// the biggest public class in the JDK (>60k)\n   53: 		URL url = getClass().getResource(\"/java/awt/Component.class\");\n   54  		assertThat(url, notNullValue());\n   55  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\test\\java\\org\\springframework\\stereotype\\Component.java:\n   24  \n   25  /**\n   26:  * Indicates that an annotated class is a \"component\".\n   27   * Such classes are considered as candidates for auto-detection\n   28   * when using annotation-based configuration and classpath scanning.\n   29   *\n   30   * <p>Other class-level annotations may be considered as identifying\n   31:  * a component as well, typically a special kind of component:\n   32   * e.g. the {@link Repository @Repository} annotation or AspectJ's\n   33   * {@link org.aspectj.lang.annotation.Aspect @Aspect} annotation.\n   ..\n   44  @Documented\n   45  @Indexed\n   46: public @interface Component {\n   47  \n   48  	/**\n   49: 	 * The value may indicate a suggestion for a logical component name,\n   50: 	 * to be turned into a Spring bean in case of an autodetected component.\n   51: 	 * @return the suggested component name, if any\n   52  	 */\n   53  	public abstract String value() default \"\";\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-core\\src\\test\\java\\org\\springframework\\util\\StringUtilsTests.java:\n  444  		String[] sa = StringUtils.tokenizeToStringArray(\"a,b , ,c\", \",\");\n  445  		assertEquals(3, sa.length);\n  446: 		assertTrue(\"components are correct\",\n  447  				sa[0].equals(\"a\") && sa[1].equals(\"b\") && sa[2].equals(\"c\"));\n  448  	}\n  ...\n  452  		String[] sa = StringUtils.tokenizeToStringArray(\"a,b , ,c\", \",\", true, false);\n  453  		assertEquals(4, sa.length);\n  454: 		assertTrue(\"components are correct\",\n  455  				sa[0].equals(\"a\") && sa[1].equals(\"b\") && sa[2].equals(\"\") && sa[3].equals(\"c\"));\n  456  	}\n  ...\n  460  		String[] sa = StringUtils.tokenizeToStringArray(\"a,b ,c\", \",\", false, true);\n  461  		assertEquals(3, sa.length);\n  462: 		assertTrue(\"components are correct\",\n  463  				sa[0].equals(\"a\") && sa[1].equals(\"b \") && sa[2].equals(\"c\"));\n  464  	}\n  ...\n  560  		String[] sa = StringUtils.commaDelimitedListToStringArray(\"a,,b\");\n  561  		assertEquals(\"a,,b produces array length 3\", 3, sa.length);\n  562: 		assertTrue(\"components are correct\",\n  563  				sa[0].equals(\"a\") && sa[1].equals(\"\") && sa[2].equals(\"b\"));\n  564  \n  ...\n  567  	}\n  568  \n  569: 	private void doTestCommaDelimitedListToStringArrayLegalMatch(String[] components) {\n  570  		StringBuilder sb = new StringBuilder();\n  571: 		for (int i = 0; i < components.length; i++) {\n  572  			if (i != 0) {\n  573  				sb.append(\",\");\n  574  			}\n  575: 			sb.append(components[i]);\n  576  		}\n  577  		String[] sa = StringUtils.commaDelimitedListToStringArray(sb.toString());\n  578  		assertTrue(\"String array isn't null with legal match\", sa != null);\n  579: 		assertEquals(\"String array length is correct with legal match\", components.length, sa.length);\n  580: 		assertTrue(\"Output equals input\", Arrays.equals(sa, components));\n  581  	}\n  582  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\main\\java\\org\\springframework\\expression\\spel\\ast\\CompoundExpression.java:\n   32  public class CompoundExpression extends SpelNodeImpl {\n   33  \n   34: 	public CompoundExpression(int pos,SpelNodeImpl... expressionComponents) {\n   35: 		super(pos, expressionComponents);\n   36: 		if (expressionComponents.length < 2) {\n   37  			throw new IllegalStateException(\"Do not build compound expressions with less than two entries: \" +\n   38: 					expressionComponents.length);\n   39  		}\n   40  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\main\\java\\org\\springframework\\expression\\spel\\ast\\ConstructorReference.java:\n  235  		}\n  236  		String type = (String) intendedArrayType;\n  237: 		Class<?> componentType;\n  238  		TypeCode arrayTypeCode = TypeCode.forName(type);\n  239  		if (arrayTypeCode == TypeCode.OBJECT) {\n  240: 			componentType = state.findType(type);\n  241  		}\n  242  		else {\n  243: 			componentType = arrayTypeCode.getType();\n  244  		}\n  245  		Object newArray;\n  ...\n  257  				TypedValue o = this.dimensions[0].getTypedValue(state);\n  258  				int arraySize = ExpressionUtils.toInt(typeConverter, o);\n  259: 				newArray = Array.newInstance(componentType, arraySize);\n  260  			}\n  261  			else {\n  ...\n  266  					dims[d] = ExpressionUtils.toInt(typeConverter, o);\n  267  				}\n  268: 				newArray = Array.newInstance(componentType, dims);\n  269  			}\n  270  		}\n  ...\n  289  			// Build the array and populate it\n  290  			int arraySize = initializer.getChildCount();\n  291: 			newArray = Array.newInstance(componentType, arraySize);\n  292  			if (arrayTypeCode == TypeCode.OBJECT) {\n  293: 				populateReferenceTypeArray(state, newArray, typeConverter, initializer, componentType);\n  294  			}\n  295  			else if (arrayTypeCode == TypeCode.INT) {\n  ...\n  325  \n  326  	private void populateReferenceTypeArray(ExpressionState state, Object newArray, TypeConverter typeConverter,\n  327: 			InlineList initializer, Class<?> componentType) {\n  328  \n  329: 		TypeDescriptor toTypeDescriptor = TypeDescriptor.valueOf(componentType);\n  330  		Object[] newObjectArray = (Object[]) newArray;\n  331  		for (int i = 0; i < newObjectArray.length; i++) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\main\\java\\org\\springframework\\expression\\spel\\ast\\Elvis.java:\n   75  	@Override\n   76  	public void generateCode(MethodVisitor mv, CodeFlow cf) {\n   77: 		// exit type descriptor can be null if both components are literal expressions\n   78  		computeExitTypeDescriptor();\n   79  		this.children[0].generateCode(mv, cf);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\main\\java\\org\\springframework\\expression\\spel\\ast\\FormatHelper.java:\n   66  			StringBuilder sb = new StringBuilder();\n   67  			int dims = 1;\n   68: 			Class<?> baseClass = clazz.getComponentType();\n   69  			while (baseClass.isArray()) {\n   70: 				baseClass = baseClass.getComponentType();\n   71  				dims++;\n   72  			}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\main\\java\\org\\springframework\\expression\\spel\\ast\\Indexer.java:\n  320  \n  321  	private void setArrayElement(TypeConverter converter, Object ctx, int idx, Object newValue,\n  322: 			Class<?> arrayComponentType) throws EvaluationException {\n  323  \n  324: 		if (arrayComponentType == Double.TYPE) {\n  325  			double[] array = (double[]) ctx;\n  326  			checkAccess(array.length, idx);\n  327  			array[idx] = convertValue(converter, newValue, Double.class);\n  328  		}\n  329: 		else if (arrayComponentType == Float.TYPE) {\n  330  			float[] array = (float[]) ctx;\n  331  			checkAccess(array.length, idx);\n  332  			array[idx] = convertValue(converter, newValue, Float.class);\n  333  		}\n  334: 		else if (arrayComponentType == Long.TYPE) {\n  335  			long[] array = (long[]) ctx;\n  336  			checkAccess(array.length, idx);\n  337  			array[idx] = convertValue(converter, newValue, Long.class);\n  338  		}\n  339: 		else if (arrayComponentType == Integer.TYPE) {\n  340  			int[] array = (int[]) ctx;\n  341  			checkAccess(array.length, idx);\n  342  			array[idx] = convertValue(converter, newValue, Integer.class);\n  343  		}\n  344: 		else if (arrayComponentType == Short.TYPE) {\n  345  			short[] array = (short[]) ctx;\n  346  			checkAccess(array.length, idx);\n  347  			array[idx] = convertValue(converter, newValue, Short.class);\n  348  		}\n  349: 		else if (arrayComponentType == Byte.TYPE) {\n  350  			byte[] array = (byte[]) ctx;\n  351  			checkAccess(array.length, idx);\n  352  			array[idx] = convertValue(converter, newValue, Byte.class);\n  353  		}\n  354: 		else if (arrayComponentType == Character.TYPE) {\n  355  			char[] array = (char[]) ctx;\n  356  			checkAccess(array.length, idx);\n  357  			array[idx] = convertValue(converter, newValue, Character.class);\n  358  		}\n  359: 		else if (arrayComponentType == Boolean.TYPE) {\n  360  			boolean[] array = (boolean[]) ctx;\n  361  			checkAccess(array.length, idx);\n  ...\n  365  			Object[] array = (Object[]) ctx;\n  366  			checkAccess(array.length, idx);\n  367: 			array[idx] = convertValue(converter, newValue, arrayComponentType);\n  368  		}\n  369  	}\n  370  \n  371  	private Object accessArrayElement(Object ctx, int idx) throws SpelEvaluationException {\n  372: 		Class<?> arrayComponentType = ctx.getClass().getComponentType();\n  373: 		if (arrayComponentType == Double.TYPE) {\n  374  			double[] array = (double[]) ctx;\n  375  			checkAccess(array.length, idx);\n  ...\n  377  			return array[idx];\n  378  		}\n  379: 		else if (arrayComponentType == Float.TYPE) {\n  380  			float[] array = (float[]) ctx;\n  381  			checkAccess(array.length, idx);\n  ...\n  383  			return array[idx];\n  384  		}\n  385: 		else if (arrayComponentType == Long.TYPE) {\n  386  			long[] array = (long[]) ctx;\n  387  			checkAccess(array.length, idx);\n  ...\n  389  			return array[idx];\n  390  		}\n  391: 		else if (arrayComponentType == Integer.TYPE) {\n  392  			int[] array = (int[]) ctx;\n  393  			checkAccess(array.length, idx);\n  ...\n  395  			return array[idx];\n  396  		}\n  397: 		else if (arrayComponentType == Short.TYPE) {\n  398  			short[] array = (short[]) ctx;\n  399  			checkAccess(array.length, idx);\n  ...\n  401  			return array[idx];\n  402  		}\n  403: 		else if (arrayComponentType == Byte.TYPE) {\n  404  			byte[] array = (byte[]) ctx;\n  405  			checkAccess(array.length, idx);\n  ...\n  407  			return array[idx];\n  408  		}\n  409: 		else if (arrayComponentType == Character.TYPE) {\n  410  			char[] array = (char[]) ctx;\n  411  			checkAccess(array.length, idx);\n  ...\n  413  			return array[idx];\n  414  		}\n  415: 		else if (arrayComponentType == Boolean.TYPE) {\n  416  			boolean[] array = (boolean[]) ctx;\n  417  			checkAccess(array.length, idx);\n  ...\n  423  			checkAccess(array.length, idx);\n  424  			Object retValue = array[idx];\n  425: 			this.exitTypeDescriptor = CodeFlow.toDescriptor(arrayComponentType);\n  426  			return retValue;\n  427  		}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\main\\java\\org\\springframework\\expression\\spel\\ast\\InlineList.java:\n   48  \n   49  	/**\n   50: 	 * If all the components of the list are constants, or lists that themselves contain constants, then a constant list\n   51  	 * can be built to represent this node. This will speed up later getValue calls and reduce the amount of garbage\n   52  	 * created.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\main\\java\\org\\springframework\\expression\\spel\\ast\\InlineMap.java:\n   45  \n   46  	/**\n   47: 	 * If all the components of the list are constants, or lists/maps that themselves\n   48  	 * contain constants, then a constant list can be built to represent this node.\n   49  	 * This will speed up later getValue calls and reduce the amount of garbage created.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\main\\java\\org\\springframework\\expression\\spel\\ast\\ValueRef.java:\n   36  	/**\n   37  	 * Returns the value this ValueRef points to, it should not require expression\n   38: 	 * component re-evaluation.\n   39  	 * @return the value\n   40  	 */\n   ..\n   42  \n   43  	/**\n   44: 	 * Sets the value this ValueRef points to, it should not require expression component\n   45  	 * re-evaluation.\n   46  	 * @param newValue the new value\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\main\\java\\org\\springframework\\expression\\spel\\CodeFlow.java:\n   40  	/**\n   41  	 * Record the type of what is on top of the bytecode stack (i.e. the type of the\n   42: 	 * output from the previous expression component). New scopes are used to evaluate\n   43  	 * sub-expressions like the expressions for the argument values in a method invocation\n   44  	 * expression.\n   ..\n  444  			while (clazz.isArray()) {\n  445  				sb.append(\"[\");\n  446: 				clazz = clazz.getComponentType();\n  447  			}\n  448  		}\n  ...\n  799  				}\n  800  				else {\n  801: 					return name;  // array has primitive component type\n  802  				}\n  803  			}\n  ...\n  889  	/**\n  890  	 * Determine the appropriate T tag to use for the NEWARRAY bytecode.\n  891: 	 * @param arraytype the array primitive component type\n  892  	 * @return the T tag to use for NEWARRAY\n  893  	 */\n  ...\n  908  \n  909  	/**\n  910: 	 * @return true if the supplied array type has a core component reference type\n  911  	 */\n  912  	public static boolean isReferenceTypeArray(String arraytype) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\main\\java\\org\\springframework\\expression\\spel\\ExpressionState.java:\n   37   * An ExpressionState is for maintaining per-expression-evaluation state, any changes to\n   38   * it are not seen by other expressions but it gives a place to hold local variables and\n   39:  * for component expressions in a compound expression to communicate state. This is in\n   40   * contrast to the EvaluationContext, which is shared amongst expression evaluations, and\n   41   * any changes to it will be seen by other expressions or any code that chooses to ask\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\main\\java\\org\\springframework\\expression\\spel\\SpelMessage.java:\n  235  \n  236  	OPERAND_NOT_INCREMENTABLE(Kind.ERROR, 1066,\n  237: 			\"the expression component ''{0}'' does not support increment\"),\n  238  \n  239  	OPERAND_NOT_DECREMENTABLE(Kind.ERROR, 1067,\n  240: 			\"the expression component ''{0}'' does not support decrement\"),\n  241  \n  242  	NOT_ASSIGNABLE(Kind.ERROR, 1068,\n  243: 			\"the expression component ''{0}'' is not assignable\"),\n  244  \n  245  	MISSING_CHARACTER(Kind.ERROR, 1069,\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\main\\java\\org\\springframework\\expression\\spel\\standard\\SpelCompiler.java:\n  209  	/**\n  210  	 * Request that an attempt is made to compile the specified expression. It may fail if\n  211: 	 * components of the expression are not suitable for compilation or the data types\n  212  	 * involved are not suitable for compilation. Used for testing.\n  213  	 * @return true if the expression was successfully compiled\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\main\\java\\org\\springframework\\expression\\spel\\support\\ReflectionHelper.java:\n  230  	 * Convert a supplied set of arguments into the requested types. If the parameterTypes are related to\n  231  	 * a varargs method then the final entry in the parameterTypes array is going to be an array itself whose\n  232: 	 * component type should be used as the conversion target for extraneous arguments. (For example, if the\n  233  	 * parameterTypes are {Integer, String[]} and the input arguments are {Integer, boolean, float} then both\n  234  	 * the boolean and float must be converted to strings). This method does *not* repackage the arguments\n  ...\n  320  		Class<?> type = possibleArray.getClass();\n  321  		if (!type.isArray() || Array.getLength(possibleArray) == 0 ||\n  322: 				!ClassUtils.isAssignableValue(type.getComponentType(), value)) {\n  323  			return false;\n  324  		}\n  325  		Object arrayValue = Array.get(possibleArray, 0);\n  326: 		return (type.getComponentType().isPrimitive() ? arrayValue.equals(value) : arrayValue == value);\n  327  	}\n  328  \n  ...\n  357  			// Now sort out the final argument, which is the varargs one. Before entering this method,\n  358  			// the arguments should have been converted to the box form of the required type.\n  359: 			Class<?> componentType = requiredParameterTypes[parameterCount - 1].getComponentType();\n  360: 			Object repackagedArgs = Array.newInstance(componentType, arraySize);\n  361  			for (int i = 0; i < arraySize; i++) {\n  362  				Array.set(repackagedArgs, i, args[parameterCount - 1 + i]);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\test\\java\\org\\springframework\\expression\\spel\\AbstractExpressionTests.java:\n  295  		if (value.getClass().isArray()) {\n  296  			StringBuilder sb = new StringBuilder();\n  297: 			if (value.getClass().getComponentType().isPrimitive()) {\n  298: 				Class<?> primitiveType = value.getClass().getComponentType();\n  299  				if (primitiveType == Integer.TYPE) {\n  300  					int[] l = (int[]) value;\n  ...\n  324  				}\n  325  			}\n  326: 			else if (value.getClass().getComponentType().isArray()) {\n  327  				List<Object> l = Arrays.asList((Object[]) value);\n  328  				if (!isNested) {\n  329: 					sb.append(value.getClass().getComponentType().getName());\n  330  				}\n  331  				sb.append(\"[\").append(l.size()).append(\"]{\");\n  ...\n  343  				List<Object> l = Arrays.asList((Object[]) value);\n  344  				if (!isNested) {\n  345: 					sb.append(value.getClass().getComponentType().getName());\n  346  				}\n  347  				sb.append(\"[\").append(l.size()).append(\"]{\");\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\test\\java\\org\\springframework\\expression\\spel\\ExpressionWithConversionTests.java:\n   93  		assertEquals(0,e.getValue(context,Integer.class).intValue());\n   94  		context.setTypeConverter(new TypeConvertorUsingConversionService());\n   95: 		// Assign a List<String> to the List<Integer> field - the component elements should be converted\n   96  		parser.parseExpression(\"listOfInteger\").setValue(context,listOfString);\n   97  		assertEquals(3,e.getValue(context,Integer.class).intValue()); // size now 3\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\test\\java\\org\\springframework\\expression\\spel\\support\\ReflectionHelperTests.java:\n  275  		assertEquals(1, newArray.length);\n  276  		Object firstParam = newArray[0];\n  277: 		assertEquals(String.class,firstParam.getClass().getComponentType());\n  278  		Object[] firstParamArray = (Object[])firstParam;\n  279  		assertEquals(3,firstParamArray.length);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-expression\\src\\test\\java\\org\\springframework\\expression\\spel\\support\\StandardComponentsTests.java:\n   31  import static org.junit.Assert.*;\n   32  \n   33: public class StandardComponentsTests {\n   34  \n   35  	@Test\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-jdbc\\src\\main\\java\\org\\springframework\\jdbc\\datasource\\init\\DataSourceInitializer.java:\n   45  \n   46  	/**\n   47: 	 * The {@link DataSource} for the database to populate when this component\n   48: 	 * is initialized and to clean up when this component is shut down.\n   49  	 * <p>This property is mandatory with no default provided.\n   50  	 * @param dataSource the DataSource\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-jms\\src\\main\\java\\org\\springframework\\jms\\annotation\\EnableJms.java:\n   91   * }</pre>\n   92   *\n   93:  * Alternatively, if {@code MyService} were annotated with {@code @Component}, the\n   94   * following configuration would ensure that its {@code @JmsListener} annotated\n   95   * method is invoked with a matching incoming message:\n   ..\n   98   * &#064;Configuration\n   99   * &#064;EnableJms\n  100:  * &#064;ComponentScan(basePackages=\"com.acme.foo\")\n  101   * public class AppConfig {\n  102   * }</pre>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-jms\\src\\main\\java\\org\\springframework\\jms\\config\\AbstractListenerContainerParser.java:\n   28  import org.springframework.beans.factory.config.BeanDefinition;\n   29  import org.springframework.beans.factory.config.RuntimeBeanReference;\n   30: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   31: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   32  import org.springframework.beans.factory.support.RootBeanDefinition;\n   33  import org.springframework.beans.factory.xml.BeanDefinitionParser;\n   ..\n  104  	@Override\n  105  	public BeanDefinition parse(Element element, ParserContext parserContext) {\n  106: 		CompositeComponentDefinition compositeDef =\n  107: 				new CompositeComponentDefinition(element.getTagName(), parserContext.extractSource(element));\n  108: 		parserContext.pushContainingComponent(compositeDef);\n  109  \n  110  		PropertyValues commonProperties = parseCommonContainerProperties(element, parserContext);\n  ...\n  117  			if (beanDefinition != null) {\n  118  				beanDefinition.setSource(parserContext.extractSource(element));\n  119: 				parserContext.registerBeanComponent(new BeanComponentDefinition(beanDefinition, factoryId));\n  120  			}\n  121  		}\n  ...\n  132  		}\n  133  \n  134: 		parserContext.popAndRegisterContainingComponent();\n  135  		return null;\n  136  	}\n  ...\n  190  \n  191  		// Register the listener and fire event\n  192: 		parserContext.registerBeanComponent(new BeanComponentDefinition(containerDef, containerBeanName));\n  193  	}\n  194  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-jms\\src\\main\\java\\org\\springframework\\jms\\config\\AnnotationDrivenJmsBeanDefinitionParser.java:\n   21  import org.springframework.beans.factory.config.BeanDefinition;\n   22  import org.springframework.beans.factory.config.BeanDefinitionHolder;\n   23: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   24: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   25  import org.springframework.beans.factory.support.BeanDefinitionBuilder;\n   26  import org.springframework.beans.factory.support.BeanDefinitionRegistry;\n   ..\n   41  		Object source = parserContext.extractSource(element);\n   42  \n   43: 		// Register component for the surrounding <jms:annotation-driven> element.\n   44: 		CompositeComponentDefinition compDefinition = new CompositeComponentDefinition(element.getTagName(), source);\n   45: 		parserContext.pushContainingComponent(compDefinition);\n   46  \n   47: 		// Nest the concrete post-processor bean in the surrounding component.\n   48  		BeanDefinitionRegistry registry = parserContext.getRegistry();\n   49  \n   ..\n   78  		}\n   79  \n   80: 		// Finally register the composite component.\n   81: 		parserContext.popAndRegisterContainingComponent();\n   82  \n   83  		return null;\n   ..\n   97  		parserContext.getRegistry().registerBeanDefinition(beanName, builder.getBeanDefinition());\n   98  		BeanDefinitionHolder holder = new BeanDefinitionHolder(builder.getBeanDefinition(), beanName);\n   99: 		parserContext.registerComponent(new BeanComponentDefinition(holder));\n  100  	}\n  101  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-jms\\src\\test\\java\\org\\springframework\\jms\\annotation\\AbstractJmsAnnotationDrivenTests.java:\n   35  import org.springframework.jms.listener.adapter.MessagingMessageListenerAdapter;\n   36  import org.springframework.messaging.handler.annotation.SendTo;\n   37: import org.springframework.stereotype.Component;\n   38  import org.springframework.util.ReflectionUtils;\n   39  import org.springframework.validation.Errors;\n   ..\n  210  \n  211  \n  212: 	@Component\n  213  	static class SampleBean {\n  214  \n  ...\n  223  \n  224  \n  225: 	@Component\n  226  	static class FullBean {\n  227  \n  ...\n  235  \n  236  \n  237: 	@Component\n  238  	static class FullConfigurableBean {\n  239  \n  ...\n  248  \n  249  \n  250: 	@Component\n  251  	static class CustomBean {\n  252  \n  ...\n  265  \n  266  \n  267: 	@Component\n  268  	static class ValidationBean {\n  269  \n  ...\n  274  \n  275  \n  276: 	@Component\n  277  	static class JmsListenerRepeatableBean {\n  278  \n  ...\n  284  \n  285  \n  286: 	@Component\n  287  	static class JmsListenersBean {\n  288  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-jms\\src\\test\\java\\org\\springframework\\jms\\annotation\\EnableJmsTests.java:\n   49  import org.springframework.messaging.handler.annotation.support.MessageHandlerMethodFactory;\n   50  import org.springframework.messaging.handler.annotation.support.MethodArgumentNotValidException;\n   51: import org.springframework.stereotype.Component;\n   52  \n   53  import static org.junit.Assert.*;\n   ..\n  193  \n  194  	@Test\n  195: 	public void lazyComponent() {\n  196  		ConfigurableApplicationContext context = new AnnotationConfigApplicationContext(\n  197  				EnableJmsDefaultContainerFactoryConfig.class, LazyBean.class);\n  ...\n  359  \n  360  \n  361: 	@Component\n  362  	@Lazy\n  363  	static class LazyBean {\n  ...\n  393  \n  394  \n  395: 	@Component\n  396  	static class ComposedJmsListenersBean {\n  397  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-jms\\src\\test\\java\\org\\springframework\\jms\\annotation\\JmsListenerAnnotationBeanPostProcessorTests.java:\n   41  import org.springframework.jms.listener.SimpleMessageListenerContainer;\n   42  import org.springframework.messaging.handler.annotation.SendTo;\n   43: import org.springframework.stereotype.Component;\n   44  import org.springframework.transaction.PlatformTransactionManager;\n   45  import org.springframework.transaction.annotation.EnableTransactionManagement;\n   ..\n  144  \n  145  \n  146: 	@Component\n  147  	static class SimpleMessageListenerTestBean {\n  148  \n  ...\n  153  \n  154  \n  155: 	@Component\n  156  	static class MetaAnnotationTestBean {\n  157  \n  ...\n  209  \n  210  \n  211: 	@Component\n  212  	static class ProxyTestBean implements SimpleService {\n  213  \n  ...\n  221  \n  222  \n  223: 	@Component\n  224  	static class InvalidProxyTestBean implements SimpleService {\n  225  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-jms\\src\\test\\java\\org\\springframework\\jms\\config\\JmsNamespaceHandlerTests.java:\n   32  import org.springframework.beans.DirectFieldAccessor;\n   33  import org.springframework.beans.factory.config.BeanDefinition;\n   34: import org.springframework.beans.factory.parsing.ComponentDefinition;\n   35: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   36  import org.springframework.beans.factory.parsing.EmptyReaderEventListener;\n   37  import org.springframework.beans.factory.parsing.PassThroughSourceExtractor;\n   ..\n  302  \n  303  	@Test\n  304: 	public void testComponentRegistration() {\n  305: 		assertTrue(\"Parser should have registered a component named 'listener1'\",\n  306: 				context.containsComponentDefinition(\"listener1\"));\n  307: 		assertTrue(\"Parser should have registered a component named 'listener2'\",\n  308: 				context.containsComponentDefinition(\"listener2\"));\n  309: 		assertTrue(\"Parser should have registered a component named 'listener3'\",\n  310: 				context.containsComponentDefinition(\"listener3\"));\n  311: 		assertTrue(\"Parser should have registered a component named '\"\n  312  				+ DefaultMessageListenerContainer.class.getName() + \"#0'\",\n  313: 				context.containsComponentDefinition(DefaultMessageListenerContainer.class.getName() + \"#0\"));\n  314: 		assertTrue(\"Parser should have registered a component named '\"\n  315  				+ JmsMessageEndpointManager.class.getName() + \"#0'\",\n  316: 				context.containsComponentDefinition(JmsMessageEndpointManager.class.getName() + \"#0\"));\n  317: 		assertTrue(\"Parser should have registered a component named 'testJmsFactory\",\n  318: 				context.containsComponentDefinition(\"testJmsFactory\"));\n  319: 		assertTrue(\"Parser should have registered a component named 'testJcaFactory\",\n  320: 				context.containsComponentDefinition(\"testJcaFactory\"));\n  321: 		assertTrue(\"Parser should have registered a component named 'testJcaFactory\",\n  322: 				context.containsComponentDefinition(\"onlyJmsFactory\"));\n  323  	}\n  324  \n  325  	@Test\n  326  	public void testSourceExtraction() {\n  327: 		Iterator<ComponentDefinition> iterator = context.getRegisteredComponents();\n  328  		while (iterator.hasNext()) {\n  329: 			ComponentDefinition compDef = iterator.next();\n  330: 			assertNotNull(\"CompositeComponentDefinition '\" + compDef.getName() + \"' has no source attachment\", compDef.getSource());\n  331: 			validateComponentDefinition(compDef);\n  332  		}\n  333  	}\n  334  \n  335  \n  336: 	private void validateComponentDefinition(ComponentDefinition compDef) {\n  337  		BeanDefinition[] beanDefs = compDef.getBeanDefinitions();\n  338  		for (BeanDefinition beanDef : beanDefs) {\n  ...\n  391  	/**\n  392  	 * Internal extension that registers a {@link ReaderEventListener} to store\n  393: 	 * registered {@link ComponentDefinition}s.\n  394  	 */\n  395  	private static class ToolingTestApplicationContext extends ClassPathXmlApplicationContext {\n  396  \n  397: 		private Set<ComponentDefinition> registeredComponents;\n  398  \n  399  		public ToolingTestApplicationContext(String path, Class<?> clazz) {\n  ...\n  403  		@Override\n  404  		protected void initBeanDefinitionReader(XmlBeanDefinitionReader beanDefinitionReader) {\n  405: 			this.registeredComponents = new HashSet<>();\n  406: 			beanDefinitionReader.setEventListener(new StoringReaderEventListener(this.registeredComponents));\n  407  			beanDefinitionReader.setSourceExtractor(new PassThroughSourceExtractor());\n  408  		}\n  409  \n  410: 		public boolean containsComponentDefinition(String name) {\n  411: 			for (ComponentDefinition cd : this.registeredComponents) {\n  412: 				if (cd instanceof CompositeComponentDefinition) {\n  413: 					ComponentDefinition[] innerCds = ((CompositeComponentDefinition) cd).getNestedComponents();\n  414: 					for (ComponentDefinition innerCd : innerCds) {\n  415  						if (innerCd.getName().equals(name)) {\n  416  							return true;\n  ...\n  427  		}\n  428  \n  429: 		public Iterator<ComponentDefinition> getRegisteredComponents() {\n  430: 			return this.registeredComponents.iterator();\n  431  		}\n  432  	}\n  ...\n  435  	private static class StoringReaderEventListener extends EmptyReaderEventListener {\n  436  \n  437: 		protected final Set<ComponentDefinition> registeredComponents;\n  438  \n  439: 		public StoringReaderEventListener(Set<ComponentDefinition> registeredComponents) {\n  440: 			this.registeredComponents = registeredComponents;\n  441  		}\n  442  \n  443  		@Override\n  444: 		public void componentRegistered(ComponentDefinition componentDefinition) {\n  445: 			this.registeredComponents.add(componentDefinition);\n  446  		}\n  447  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-messaging\\src\\main\\java\\org\\springframework\\messaging\\handler\\MessagingAdviceBean.java:\n   24   * handling methods.\n   25   *\n   26:  * <p>Component stereotypes such as\n   27   * {@link org.springframework.stereotype.Controller @Controller} with annotation\n   28   * handler methods often need cross-cutting functionality across all or a subset\n   29:  * of such annotated components. A primary example of this is the need for \"global\"\n   30   * annotated exception handler methods but the concept applies more generally.\n   31   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-messaging\\src\\main\\java\\org\\springframework\\messaging\\simp\\broker\\AbstractBrokerMessageHandler.java:\n  219  	 * may still independently alternate between being on and off depending on the\n  220  	 * concrete sub-class implementation.\n  221: 	 * <p>Application components may implement\n  222  	 * {@code org.springframework.context.ApplicationListener&lt;BrokerAvailabilityEvent&gt;}\n  223  	 * to receive notifications when broker becomes available and unavailable.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-messaging\\src\\main\\java\\org\\springframework\\messaging\\simp\\broker\\BrokerAvailabilityEvent.java:\n   36  	 * @param brokerAvailable {@code true} if the broker is available, {@code}\n   37  	 * false otherwise\n   38: 	 * @param source the component that is acting as the broker, or as a relay\n   39  	 * for an external broker, that has changed availability. Must not be {@code\n   40  	 * null}.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-messaging\\src\\main\\java\\org\\springframework\\messaging\\simp\\config\\AbstractMessageBrokerConfiguration.java:\n   74   * while {@link #brokerChannel()} delivers messages from within the application to the\n   75   * the respective message handlers. {@link #brokerMessagingTemplate()} can be injected\n   76:  * into any application component to send messages.\n   77   *\n   78   * <p>Subclasses are responsible for the part of the configuration that feed messages\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-messaging\\src\\main\\java\\org\\springframework\\messaging\\simp\\stomp\\StompBrokerRelayMessageHandler.java:\n  752  		 * client message is being forwarded, so we simply log the ignored message\n  753  		 * at debug level. For messages from within the application being sent on\n  754: 		 * the \"system\" connection an exception is raised so that components sending\n  755  		 * the message have a chance to handle it -- by default the broker message\n  756  		 * channel is synchronous.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-messaging\\src\\main\\java\\org\\springframework\\messaging\\support\\ImmutableMessageChannelInterceptor.java:\n   24   * on the headers of messages passed through the preSend method.\n   25   *\n   26:  * <p>When configured as the last interceptor in a chain, it allows the component\n   27   * sending the message to leave headers mutable for interceptors to modify prior\n   28   * to the message actually being sent and exposed to concurrent access.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-orm\\src\\main\\java\\org\\springframework\\orm\\hibernate5\\LocalSessionFactoryBean.java:\n  309  	/**\n  310  	 * Specify packages to search for autodetection of your entity classes in the\n  311: 	 * classpath. This is analogous to Spring's component-scan feature\n  312  	 * ({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).\n  313  	 */\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-orm\\src\\main\\java\\org\\springframework\\orm\\jpa\\LocalContainerEntityManagerFactoryBean.java:\n  162  	 * is necessary; all you need to do is to specify base packages to search here.\n  163  	 * <p>Default is none. Specify packages to search for autodetection of your entity\n  164: 	 * classes in the classpath. This is analogous to Spring's component-scan feature\n  165  	 * ({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).\n  166  	 * <p><p>Note: There may be limitations in comparison to regular JPA scanning.</b>\n  ...\n  177  	 * <p><b>NOTE: Only applied if no external PersistenceUnitManager specified.</b>\n  178  	 * @param packagesToScan one or more base packages to search, analogous to\n  179: 	 * Spring's component-scan configuration for regular Spring components\n  180  	 * @see #setPersistenceUnitManager\n  181  	 * @see DefaultPersistenceUnitManager#setPackagesToScan\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-orm\\src\\main\\java\\org\\springframework\\orm\\jpa\\persistenceunit\\DefaultPersistenceUnitManager.java:\n   41  import org.springframework.beans.factory.InitializingBean;\n   42  import org.springframework.context.ResourceLoaderAware;\n   43: import org.springframework.context.index.CandidateComponentsIndex;\n   44: import org.springframework.context.index.CandidateComponentsIndexLoader;\n   45  import org.springframework.context.weaving.LoadTimeWeaverAware;\n   46  import org.springframework.core.io.Resource;\n   ..\n  151  	private ResourcePatternResolver resourcePatternResolver = new PathMatchingResourcePatternResolver();\n  152  \n  153: 	private CandidateComponentsIndex componentsIndex;\n  154  \n  155  	private final Set<String> persistenceUnitInfoNames = new HashSet<>();\n  ...\n  206  	 * is necessary; all you need to do is to specify base packages to search here.\n  207  	 * <p>Default is none. Specify packages to search for autodetection of your entity\n  208: 	 * classes in the classpath. This is analogous to Spring's component-scan feature\n  209  	 * ({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).\n  210  	 * <p>Such package scanning defines a \"default persistence unit\" in Spring, which\n  ...\n  412  	public void setResourceLoader(ResourceLoader resourceLoader) {\n  413  		this.resourcePatternResolver = ResourcePatternUtils.getResourcePatternResolver(resourceLoader);\n  414: 		this.componentsIndex = CandidateComponentsIndexLoader.loadIndex(resourceLoader.getClassLoader());\n  415  	}\n  416  \n  ...\n  517  		if (this.packagesToScan != null) {\n  518  			for (String pkg : this.packagesToScan) {\n  519: 				if (this.componentsIndex != null) {\n  520  					addPackageFromIndex(scannedUnit, pkg);\n  521  				}\n  ...\n  553  		Set<String> candidates = new HashSet<>();\n  554  		for (AnnotationTypeFilter filter : entityTypeFilters) {\n  555: 			candidates.addAll(this.componentsIndex\n  556  					.getCandidateTypes(pkg, filter.getAnnotationType().getName()));\n  557  		}\n  558  		candidates.forEach(scannedUnit::addManagedClassName);\n  559: 		Set<String> managedPackages = this.componentsIndex.getCandidateTypes(pkg, \"package-info\");\n  560  		managedPackages.forEach(scannedUnit::addManagedPackage);\n  561  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-orm\\src\\main\\java\\org\\springframework\\orm\\jpa\\support\\PersistenceAnnotationBeanPostProcessor.java:\n  155   *\n  156   * <p>Note: A default PersistenceAnnotationBeanPostProcessor will be registered\n  157:  * by the \"context:annotation-config\" and \"context:component-scan\" XML tags.\n  158   * Remove or turn off the default annotation configuration there if you intend\n  159   * to specify a custom PersistenceAnnotationBeanPostProcessor bean definition.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-orm\\src\\test\\java\\org\\springframework\\orm\\jpa\\persistenceunit\\DefaultPersistenceUnitManagerTests.java:\n   19  import org.junit.Test;\n   20  \n   21: import org.springframework.context.index.CandidateComponentsTestClassLoader;\n   22  import org.springframework.core.io.ClassPathResource;\n   23  import org.springframework.core.io.DefaultResourceLoader;\n   ..\n   40  		this.manager.setPackagesToScan(\"org.springframework.orm.jpa.domain\");\n   41  		this.manager.setResourceLoader(new DefaultResourceLoader(\n   42: 				CandidateComponentsTestClassLoader.disableIndex(getClass().getClassLoader())));\n   43  		testDefaultDomain();\n   44  	}\n   ..\n   48  		this.manager.setPackagesToScan(\"org.springframework.orm.jpa.domain\");\n   49  		this.manager.setResourceLoader(new DefaultResourceLoader(\n   50: 				CandidateComponentsTestClassLoader.index(getClass().getClassLoader(),\n   51: 						new ClassPathResource(\"spring.components\", Person.class))));\n   52  		testDefaultDomain();\n   53  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-oxm\\src\\main\\java\\org\\springframework\\oxm\\jaxb\\Jaxb2Marshaller.java:\n  226  	/**\n  227  	 * Set the packages to search for classes with JAXB2 annotations in the classpath.\n  228: 	 * This is using a Spring-bases search and therefore analogous to Spring's component-scan\n  229  	 * feature ({@link org.springframework.context.annotation.ClassPathBeanDefinitionScanner}).\n  230  	 * <p>Setting either this property, {@link #setContextPath \"contextPath\"}\n  ...\n  585  				if (typeArgument instanceof Class) {\n  586  					Class<?> classArgument = (Class<?>) typeArgument;\n  587: 					return (((classArgument.isArray() && Byte.TYPE == classArgument.getComponentType())) ||\n  588  							isPrimitiveWrapper(classArgument) || isStandardClass(classArgument) ||\n  589  							supportsInternal(classArgument, false));\n  ...\n  592  					// Only on JDK 6 - see http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=5041784\n  593  					GenericArrayType arrayType = (GenericArrayType) typeArgument;\n  594: 					return (Byte.TYPE == arrayType.getGenericComponentType());\n  595  				}\n  596  			}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-test\\src\\main\\java\\org\\springframework\\mock\\web\\MockServletContext.java:\n   66   *\n   67   * <p>Used for testing the Spring web framework; only rarely necessary for testing\n   68:  * application controllers. As long as application components don't explicitly\n   69   * access the {@code ServletContext}, {@code ClassPathXmlApplicationContext} or\n   70   * {@code FileSystemXmlApplicationContext} can be used to load the context files\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-test\\src\\main\\java\\org\\springframework\\test\\context\\ContextConfiguration.java:\n   56   * <ul>\n   57   * <li>A class annotated with {@link org.springframework.context.annotation.Configuration @Configuration}</li>\n   58:  * <li>A component (i.e., a class annotated with\n   59:  * {@link org.springframework.stereotype.Component @Component},\n   60   * {@link org.springframework.stereotype.Service @Service},\n   61   * {@link org.springframework.stereotype.Repository @Repository}, etc.)</li>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-test\\src\\main\\java\\org\\springframework\\test\\web\\servlet\\htmlunit\\HtmlUnitRequestBuilder.java:\n   52  import org.springframework.util.ObjectUtils;\n   53  import org.springframework.util.StringUtils;\n   54: import org.springframework.web.util.UriComponents;\n   55: import org.springframework.web.util.UriComponentsBuilder;\n   56  \n   57  /**\n   ..\n  107  		String charset = getCharset();\n  108  		String httpMethod = this.webRequest.getHttpMethod().name();\n  109: 		UriComponents uriComponents = uriComponents();\n  110  \n  111  		MockHttpServletRequest request = new HtmlUnitMockHttpServletRequest(\n  112: 				servletContext, httpMethod, uriComponents.getPath());\n  113  		parent(request, this.parentBuilder);\n  114: 		request.setServerName(uriComponents.getHost()); // needs to be first for additional headers\n  115  		authType(request);\n  116  		request.setCharacterEncoding(charset);\n  117  		content(request, charset);\n  118: 		contextPath(request, uriComponents);\n  119  		contentType(request);\n  120  		cookies(request);\n  121  		headers(request);\n  122  		locales(request);\n  123: 		servletPath(uriComponents, request);\n  124: 		params(request, uriComponents);\n  125: 		ports(uriComponents, request);\n  126  		request.setProtocol(\"HTTP/1.1\");\n  127: 		request.setQueryString(uriComponents.getQuery());\n  128: 		request.setScheme(uriComponents.getScheme());\n  129  		request.setPathInfo(null);\n  130  \n  ...\n  238  	}\n  239  \n  240: 	private void contextPath(MockHttpServletRequest request, UriComponents uriComponents) {\n  241  		if (this.contextPath == null) {\n  242: 			List<String> pathSegments = uriComponents.getPathSegments();\n  243  			if (pathSegments.isEmpty()) {\n  244  				request.setContextPath(\"\");\n  ...\n  249  		}\n  250  		else {\n  251: 			Assert.isTrue(uriComponents.getPath().startsWith(this.contextPath),\n  252: 					() -> uriComponents.getPath() + \" should start with contextPath \" + this.contextPath);\n  253  			request.setContextPath(this.contextPath);\n  254  		}\n  ...\n  358  	}\n  359  \n  360: 	private void params(MockHttpServletRequest request, UriComponents uriComponents) {\n  361: 		for (Entry<String, List<String>> entry : uriComponents.getQueryParams().entrySet()) {\n  362  			String name = entry.getKey();\n  363  			String urlDecodedName = urlDecode(name);\n  ...\n  404  	}\n  405  \n  406: 	private void servletPath(UriComponents uriComponents, MockHttpServletRequest request) {\n  407  		if (\"\".equals(request.getPathInfo())) {\n  408  			request.setPathInfo(null);\n  409  		}\n  410: 		servletPath(request, uriComponents.getPath());\n  411  	}\n  412  \n  413: 	private void ports(UriComponents uriComponents, MockHttpServletRequest request) {\n  414: 		int serverPort = uriComponents.getPort();\n  415  		request.setServerPort(serverPort);\n  416  		if (serverPort == -1) {\n  ...\n  424  	}\n  425  \n  426: 	private UriComponents uriComponents() {\n  427  		URL url = this.webRequest.getUrl();\n  428: 		return UriComponentsBuilder.fromUriString(url.toExternalForm()).build();\n  429  	}\n  430  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-test\\src\\main\\java\\org\\springframework\\test\\web\\servlet\\request\\MockHttpServletRequestBuilder.java:\n   58  import org.springframework.web.servlet.FlashMapManager;\n   59  import org.springframework.web.servlet.support.SessionFlashMapManager;\n   60: import org.springframework.web.util.UriComponentsBuilder;\n   61  import org.springframework.web.util.UriUtils;\n   62  \n   ..\n  130  	 */\n  131  	MockHttpServletRequestBuilder(HttpMethod httpMethod, String url, Object... vars) {\n  132: 		this(httpMethod.name(), UriComponentsBuilder.fromUriString(url).buildAndExpand(vars).encode().toUri());\n  133  	}\n  134  \n  ...\n  607  			request.setQueryString(this.url.getRawQuery());\n  608  		}\n  609: 		addRequestParams(request, UriComponentsBuilder.fromUri(this.url).build().getQueryParams());\n  610  \n  611  		for (String name : this.parameters.keySet()) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-test\\src\\main\\java\\org\\springframework\\test\\web\\servlet\\result\\HandlerResultMatchers.java:\n   25  import org.springframework.util.ClassUtils;\n   26  import org.springframework.web.method.HandlerMethod;\n   27: import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;\n   28: import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodInvocationInfo;\n   29  import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\n   30  import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n   ..\n   81  	 * Assert the controller method used to process the request.\n   82  	 * <p>The expected method is specified through a \"mock\" controller method\n   83: 	 * invocation similar to {@link MvcUriComponentsBuilder#fromMethodCall(Object)}.\n   84  	 * <p>For example, given this controller:\n   85  	 * <pre class=\"code\">\n   ..\n   93  	 * }\n   94  	 * </pre>\n   95: 	 * <p>A test that has statically imported {@link MvcUriComponentsBuilder#on}\n   96  	 * can be performed as follows:\n   97  	 * <pre class=\"code\">\n   ..\n  109  				if (!MethodInvocationInfo.class.isInstance(obj)) {\n  110  					fail(String.format(\"The supplied object [%s] is not an instance of %s. \"\n  111: 							+ \"Ensure that you invoke the handler method via MvcUriComponentsBuilder.on().\",\n  112  							obj, MethodInvocationInfo.class.getName()));\n  113  				}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-test\\src\\test\\java\\org\\springframework\\test\\util\\MetaAnnotationUtilsTests.java:\n   28  import org.springframework.core.annotation.AnnotationUtils;\n   29  import org.springframework.core.annotation.Order;\n   30: import org.springframework.stereotype.Component;\n   31  import org.springframework.stereotype.Service;\n   32  import org.springframework.test.context.ContextConfiguration;\n   ..\n   47  public class MetaAnnotationUtilsTests {\n   48  \n   49: 	private void assertAtComponentOnComposedAnnotation(Class<?> rootDeclaringClass, String name,\n   50  			Class<? extends Annotation> composedAnnotationType) {\n   51: 		assertAtComponentOnComposedAnnotation(rootDeclaringClass, rootDeclaringClass, name, composedAnnotationType);\n   52  	}\n   53  \n   54: 	private void assertAtComponentOnComposedAnnotation(Class<?> startClass, Class<?> rootDeclaringClass, String name,\n   55  			Class<? extends Annotation> composedAnnotationType) {\n   56: 		assertAtComponentOnComposedAnnotation(rootDeclaringClass, rootDeclaringClass, composedAnnotationType, name,\n   57  			composedAnnotationType);\n   58  	}\n   59  \n   60: 	private void assertAtComponentOnComposedAnnotation(Class<?> startClass, Class<?> rootDeclaringClass,\n   61  			Class<?> declaringClass, String name, Class<? extends Annotation> composedAnnotationType) {\n   62: 		AnnotationDescriptor<Component> descriptor = findAnnotationDescriptor(startClass, Component.class);\n   63  		assertNotNull(\"AnnotationDescriptor should not be null\", descriptor);\n   64  		assertEquals(\"rootDeclaringClass\", rootDeclaringClass, descriptor.getRootDeclaringClass());\n   65  		assertEquals(\"declaringClass\", declaringClass, descriptor.getDeclaringClass());\n   66: 		assertEquals(\"annotationType\", Component.class, descriptor.getAnnotationType());\n   67: 		assertEquals(\"component name\", name, descriptor.getAnnotation().value());\n   68  		assertNotNull(\"composedAnnotation should not be null\", descriptor.getComposedAnnotation());\n   69  		assertEquals(\"composedAnnotationType\", composedAnnotationType, descriptor.getComposedAnnotationType());\n   70  	}\n   71  \n   72: 	private void assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(Class<?> startClass, String name,\n   73  			Class<? extends Annotation> composedAnnotationType) {\n   74: 		assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(startClass, startClass, name,\n   75  			composedAnnotationType);\n   76  	}\n   77  \n   78: 	private void assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(Class<?> startClass,\n   79  			Class<?> rootDeclaringClass, String name, Class<? extends Annotation> composedAnnotationType) {\n   80: 		assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(startClass, rootDeclaringClass,\n   81  			composedAnnotationType, name, composedAnnotationType);\n   82  	}\n   83  \n   84  	@SuppressWarnings(\"unchecked\")\n   85: 	private void assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(Class<?> startClass,\n   86  			Class<?> rootDeclaringClass, Class<?> declaringClass, String name,\n   87  			Class<? extends Annotation> composedAnnotationType) {\n   88: 		Class<Component> annotationType = Component.class;\n   89  		UntypedAnnotationDescriptor descriptor = findAnnotationDescriptorForTypes(startClass, Service.class,\n   90  			annotationType, Order.class, Transactional.class);\n   ..\n   93  		assertEquals(\"declaringClass\", declaringClass, descriptor.getDeclaringClass());\n   94  		assertEquals(\"annotationType\", annotationType, descriptor.getAnnotationType());\n   95: 		assertEquals(\"component name\", name, ((Component) descriptor.getAnnotation()).value());\n   96  		assertNotNull(\"composedAnnotation should not be null\", descriptor.getComposedAnnotation());\n   97  		assertEquals(\"composedAnnotationType\", composedAnnotationType, descriptor.getComposedAnnotationType());\n   ..\n  169  \n  170  	@Test\n  171: 	public void findAnnotationDescriptorWithMetaComponentAnnotation() throws Exception {\n  172: 		assertAtComponentOnComposedAnnotation(HasMetaComponentAnnotation.class, \"meta1\", Meta1.class);\n  173  	}\n  174  \n  175  	@Test\n  176: 	public void findAnnotationDescriptorWithLocalAndMetaComponentAnnotation() throws Exception {\n  177: 		Class<Component> annotationType = Component.class;\n  178: 		AnnotationDescriptor<Component> descriptor = findAnnotationDescriptor(HasLocalAndMetaComponentAnnotation.class,\n  179  			annotationType);\n  180: 		assertEquals(HasLocalAndMetaComponentAnnotation.class, descriptor.getRootDeclaringClass());\n  181  		assertEquals(annotationType, descriptor.getAnnotationType());\n  182  		assertNull(descriptor.getComposedAnnotation());\n  ...\n  186  	@Test\n  187  	public void findAnnotationDescriptorForInterfaceWithMetaAnnotation() {\n  188: 		assertAtComponentOnComposedAnnotation(InterfaceWithMetaAnnotation.class, \"meta1\", Meta1.class);\n  189  	}\n  190  \n  191  	@Test\n  192  	public void findAnnotationDescriptorForClassWithMetaAnnotatedInterface() {\n  193: 		Component rawAnnotation = AnnotationUtils.findAnnotation(ClassWithMetaAnnotatedInterface.class,\n  194: 			Component.class);\n  195  \n  196: 		AnnotationDescriptor<Component> descriptor;\n  197  \n  198: 		descriptor = findAnnotationDescriptor(ClassWithMetaAnnotatedInterface.class, Component.class);\n  199  		assertNotNull(descriptor);\n  200  		assertEquals(ClassWithMetaAnnotatedInterface.class, descriptor.getRootDeclaringClass());\n  ...\n  222  	@Test\n  223  	public void findAnnotationDescriptorForClassWithLocalMetaAnnotationAndMetaAnnotatedInterface() {\n  224: 		assertAtComponentOnComposedAnnotation(ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface.class, \"meta2\",\n  225  			Meta2.class);\n  226  	}\n  ...\n  228  	@Test\n  229  	public void findAnnotationDescriptorForSubClassWithLocalMetaAnnotationAndMetaAnnotatedInterface() {\n  230: 		assertAtComponentOnComposedAnnotation(SubClassWithLocalMetaAnnotationAndMetaAnnotatedInterface.class,\n  231  			ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface.class, \"meta2\", Meta2.class);\n  232  	}\n  ...\n  238  	public void findAnnotationDescriptorOnMetaMetaAnnotatedClass() {\n  239  		Class<MetaMetaAnnotatedClass> startClass = MetaMetaAnnotatedClass.class;\n  240: 		assertAtComponentOnComposedAnnotation(startClass, startClass, Meta2.class, \"meta2\", MetaMeta.class);\n  241  	}\n  242  \n  ...\n  247  	public void findAnnotationDescriptorOnMetaMetaMetaAnnotatedClass() {\n  248  		Class<MetaMetaMetaAnnotatedClass> startClass = MetaMetaMetaAnnotatedClass.class;\n  249: 		assertAtComponentOnComposedAnnotation(startClass, startClass, Meta2.class, \"meta2\", MetaMetaMeta.class);\n  250  	}\n  251  \n  ...\n  255  	@Test\n  256  	public void findAnnotationDescriptorOnAnnotatedClassWithMissingTargetMetaAnnotation() {\n  257: 		// InheritedAnnotationClass is NOT annotated or meta-annotated with @Component\n  258: 		AnnotationDescriptor<Component> descriptor = findAnnotationDescriptor(InheritedAnnotationClass.class,\n  259: 			Component.class);\n  260: 		assertNull(\"Should not find @Component on InheritedAnnotationClass\", descriptor);\n  261  	}\n  262  \n  ...\n  266  	@Test\n  267  	public void findAnnotationDescriptorOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation() {\n  268: 		AnnotationDescriptor<Component> descriptor = findAnnotationDescriptor(MetaCycleAnnotatedClass.class,\n  269: 			Component.class);\n  270: 		assertNull(\"Should not find @Component on MetaCycleAnnotatedClass\", descriptor);\n  271  	}\n  272  \n  ...\n  276  	@SuppressWarnings(\"unchecked\")\n  277  	public void findAnnotationDescriptorForTypesWithNoAnnotationPresent() throws Exception {\n  278: 		assertNull(findAnnotationDescriptorForTypes(NonAnnotatedInterface.class, Transactional.class, Component.class));\n  279  		assertNull(findAnnotationDescriptorForTypes(NonAnnotatedClass.class, Transactional.class, Order.class));\n  280  	}\n  ...\n  352  	@Test\n  353  	@SuppressWarnings(\"unchecked\")\n  354: 	public void findAnnotationDescriptorForTypesWithLocalAndMetaComponentAnnotation() throws Exception {\n  355: 		Class<Component> annotationType = Component.class;\n  356  		UntypedAnnotationDescriptor descriptor = findAnnotationDescriptorForTypes(\n  357: 			HasLocalAndMetaComponentAnnotation.class, Transactional.class, annotationType, Order.class);\n  358: 		assertEquals(HasLocalAndMetaComponentAnnotation.class, descriptor.getRootDeclaringClass());\n  359  		assertEquals(annotationType, descriptor.getAnnotationType());\n  360  		assertNull(descriptor.getComposedAnnotation());\n  ...\n  363  \n  364  	@Test\n  365: 	public void findAnnotationDescriptorForTypesWithMetaComponentAnnotation() throws Exception {\n  366: 		Class<HasMetaComponentAnnotation> startClass = HasMetaComponentAnnotation.class;\n  367: 		assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(startClass, \"meta1\", Meta1.class);\n  368  	}\n  369  \n  ...\n  409  	public void findAnnotationDescriptorForTypesForInterfaceWithMetaAnnotation() {\n  410  		Class<InterfaceWithMetaAnnotation> startClass = InterfaceWithMetaAnnotation.class;\n  411: 		assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(startClass, \"meta1\", Meta1.class);\n  412  	}\n  413  \n  ...\n  415  	@SuppressWarnings(\"unchecked\")\n  416  	public void findAnnotationDescriptorForTypesForClassWithMetaAnnotatedInterface() {\n  417: 		Component rawAnnotation = AnnotationUtils.findAnnotation(ClassWithMetaAnnotatedInterface.class,\n  418: 			Component.class);\n  419  \n  420  		UntypedAnnotationDescriptor descriptor;\n  421  \n  422  		descriptor = findAnnotationDescriptorForTypes(ClassWithMetaAnnotatedInterface.class, Service.class,\n  423: 			Component.class, Order.class, Transactional.class);\n  424  		assertNotNull(descriptor);\n  425  		assertEquals(ClassWithMetaAnnotatedInterface.class, descriptor.getRootDeclaringClass());\n  ...\n  432  	public void findAnnotationDescriptorForTypesForClassWithLocalMetaAnnotationAndMetaAnnotatedInterface() {\n  433  		Class<ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface> startClass = ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface.class;\n  434: 		assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(startClass, \"meta2\", Meta2.class);\n  435  	}\n  436  \n  437  	@Test\n  438  	public void findAnnotationDescriptorForTypesForSubClassWithLocalMetaAnnotationAndMetaAnnotatedInterface() {\n  439: 		assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(\n  440  			SubClassWithLocalMetaAnnotationAndMetaAnnotatedInterface.class,\n  441  			ClassWithLocalMetaAnnotationAndMetaAnnotatedInterface.class, \"meta2\", Meta2.class);\n  ...\n  448  	public void findAnnotationDescriptorForTypesOnMetaMetaAnnotatedClass() {\n  449  		Class<MetaMetaAnnotatedClass> startClass = MetaMetaAnnotatedClass.class;\n  450: 		assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(startClass, startClass, Meta2.class, \"meta2\",\n  451  			MetaMeta.class);\n  452  	}\n  ...\n  458  	public void findAnnotationDescriptorForTypesOnMetaMetaMetaAnnotatedClass() {\n  459  		Class<MetaMetaMetaAnnotatedClass> startClass = MetaMetaMetaAnnotatedClass.class;\n  460: 		assertAtComponentOnComposedAnnotationForMultipleCandidateTypes(startClass, startClass, Meta2.class, \"meta2\",\n  461  			MetaMetaMeta.class);\n  462  	}\n  ...\n  468  	@SuppressWarnings(\"unchecked\")\n  469  	public void findAnnotationDescriptorForTypesOnAnnotatedClassWithMissingTargetMetaAnnotation() {\n  470: 		// InheritedAnnotationClass is NOT annotated or meta-annotated with @Component,\n  471  		// @Service, or @Order, but it is annotated with @Transactional.\n  472  		UntypedAnnotationDescriptor descriptor = findAnnotationDescriptorForTypes(InheritedAnnotationClass.class,\n  473: 			Service.class, Component.class, Order.class);\n  474: 		assertNull(\"Should not find @Component on InheritedAnnotationClass\", descriptor);\n  475  	}\n  476  \n  ...\n  482  	public void findAnnotationDescriptorForTypesOnMetaCycleAnnotatedClassWithMissingTargetMetaAnnotation() {\n  483  		UntypedAnnotationDescriptor descriptor = findAnnotationDescriptorForTypes(MetaCycleAnnotatedClass.class,\n  484: 			Service.class, Component.class, Order.class);\n  485: 		assertNull(\"Should not find @Component on MetaCycleAnnotatedClass\", descriptor);\n  486  	}\n  487  \n  ...\n  489  	// -------------------------------------------------------------------------\n  490  \n  491: 	@Component(value = \"meta1\")\n  492  	@Order\n  493  	@Retention(RetentionPolicy.RUNTIME)\n  ...\n  497  	}\n  498  \n  499: 	@Component(value = \"meta2\")\n  500  	@Transactional\n  501  	@Retention(RetentionPolicy.RUNTIME)\n  ...\n  559  \n  560  	@Meta1\n  561: 	static class HasMetaComponentAnnotation {\n  562  	}\n  563  \n  564  	@Meta1\n  565: 	@Component(value = \"local\")\n  566  	@Meta2\n  567: 	static class HasLocalAndMetaComponentAnnotation {\n  568  	}\n  569  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-test\\src\\test\\java\\org\\springframework\\test\\util\\ReflectionTestUtilsTests.java:\n   25  import org.springframework.aop.framework.ProxyFactory;\n   26  import org.springframework.aop.support.AopUtils;\n   27: import org.springframework.test.util.subpackage.Component;\n   28  import org.springframework.test.util.subpackage.LegacyEntity;\n   29  import org.springframework.test.util.subpackage.Person;\n   ..\n   47  	private final Person person = new PersonEntity();\n   48  \n   49: 	private final Component component = new Component();\n   50  \n   51  	private final LegacyEntity entity = new LegacyEntity();\n   ..\n  323  	public void invokeMethodWithAutoboxingAndUnboxing() {\n  324  		// IntelliJ IDEA 11 won't accept int assignment here\n  325: 		Integer difference = invokeMethod(component, \"subtract\", 5, 2);\n  326  		assertEquals(\"subtract(5, 2)\", 3, difference.intValue());\n  327  	}\n  ...\n  331  	public void invokeMethodWithPrimitiveVarArgs() {\n  332  		// IntelliJ IDEA 11 won't accept int assignment here\n  333: 		Integer sum = invokeMethod(component, \"add\", 1, 2, 3, 4);\n  334  		assertEquals(\"add(1,2,3,4)\", 10, sum.intValue());\n  335  	}\n  ...\n  338  	public void invokeMethodWithPrimitiveVarArgsAsSingleArgument() {\n  339  		// IntelliJ IDEA 11 won't accept int assignment here\n  340: 		Integer sum = invokeMethod(component, \"add\", new int[] { 1, 2, 3, 4 });\n  341  		assertEquals(\"add(1,2,3,4)\", 10, sum.intValue());\n  342  	}\n  ...\n  344  	@Test\n  345  	public void invokeMethodSimulatingLifecycleEvents() {\n  346: 		assertNull(\"number\", component.getNumber());\n  347: 		assertNull(\"text\", component.getText());\n  348  \n  349  		// Simulate autowiring a configuration method\n  350: 		invokeMethod(component, \"configure\", new Integer(42), \"enigma\");\n  351: 		assertEquals(\"number should have been configured\", new Integer(42), component.getNumber());\n  352: 		assertEquals(\"text should have been configured\", \"enigma\", component.getText());\n  353  \n  354  		// Simulate @PostConstruct life-cycle event\n  355: 		invokeMethod(component, \"init\");\n  356  		// assertions in init() should succeed\n  357  \n  358  		// Simulate @PreDestroy life-cycle event\n  359: 		invokeMethod(component, \"destroy\");\n  360: 		assertNull(\"number\", component.getNumber());\n  361: 		assertNull(\"text\", component.getText());\n  362  	}\n  363  \n  ...\n  366  		exception.expect(IllegalStateException.class);\n  367  		exception.expectMessage(equalTo(\"number must not be null\"));\n  368: 		invokeMethod(component, \"init\");\n  369  	}\n  370  \n  ...\n  373  		exception.expect(IllegalStateException.class);\n  374  		exception.expectMessage(startsWith(\"Method not found\"));\n  375: 		invokeMethod(component, \"subtract\", \"foo\", 2.0);\n  376  	}\n  377  \n  ...\n  380  		exception.expect(IllegalStateException.class);\n  381  		exception.expectMessage(startsWith(\"Method not found\"));\n  382: 		invokeMethod(component, \"configure\", new Integer(42));\n  383  	}\n  384  \n  ...\n  387  		exception.expect(IllegalStateException.class);\n  388  		exception.expectMessage(startsWith(\"Method not found\"));\n  389: 		invokeMethod(component, \"configure\", new Integer(42), \"enigma\", \"baz\", \"quux\");\n  390  	}\n  391  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-test\\src\\test\\java\\org\\springframework\\test\\util\\subpackage\\Component.java:\n   25  \n   26  /**\n   27:  * Simple POJO representing a <em>component</em>; intended for use in\n   28   * unit tests.\n   29   *\n   ..\n   31   * @since 3.1\n   32   */\n   33: public class Component {\n   34  \n   35  	private Integer number;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-test\\src\\test\\java\\org\\springframework\\test\\web\\client\\samples\\MockMvcClientHttpRequestFactoryTests.java:\n   22  \n   23  import org.springframework.beans.factory.annotation.Autowired;\n   24: import org.springframework.context.annotation.ComponentScan;\n   25  import org.springframework.context.annotation.Configuration;\n   26  import org.springframework.stereotype.Controller;\n   ..\n   76  	@EnableWebMvc\n   77  	@Configuration\n   78: 	@ComponentScan(basePackageClasses=MockMvcClientHttpRequestFactoryTests.class)\n   79  	static class MyWebConfig extends WebMvcConfigurerAdapter {\n   80  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-test\\src\\test\\java\\org\\springframework\\test\\web\\servlet\\request\\MockHttpServletRequestBuilderTests.java:\n   45  import org.springframework.web.servlet.FlashMap;\n   46  import org.springframework.web.servlet.support.SessionFlashMapManager;\n   47: import org.springframework.web.util.UriComponentsBuilder;\n   48  \n   49  import static org.junit.Assert.assertArrayEquals;\n   ..\n  518  	public void arbitraryMethod() {\n  519  		String httpMethod = \"REPort\";\n  520: 		URI url = UriComponentsBuilder.fromPath(\"/foo/{bar}\").buildAndExpand(42).toUri();\n  521  		this.builder = new MockHttpServletRequestBuilder(httpMethod, url);\n  522  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-test\\src\\test\\java\\org\\springframework\\test\\web\\servlet\\samples\\spr\\EncodedUriTests.java:\n   30  import org.springframework.context.annotation.Configuration;\n   31  import org.springframework.core.PriorityOrdered;\n   32: import org.springframework.stereotype.Component;\n   33  import org.springframework.stereotype.Controller;\n   34  import org.springframework.test.context.ContextConfiguration;\n   ..\n   46  import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n   47  import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n   48: import org.springframework.web.util.UriComponentsBuilder;\n   49  \n   50  import static org.hamcrest.core.Is.*;\n   ..\n   76  	public void test() throws Exception {\n   77  		String id = \"a/b\";\n   78: 		URI url = UriComponentsBuilder.fromUriString(\"/circuit\").pathSegment(id).build().encode().toUri();\n   79  		ResultActions result = mockMvc.perform(get(url));\n   80  		result.andExpect(status().isOk()).andExpect(model().attribute(\"receivedId\", is(id)));\n   ..\n  112  	}\n  113  \n  114: 	@Component\n  115  	private static class HandlerMappingConfigurer implements BeanPostProcessor, PriorityOrdered {\n  116  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-test\\src\\test\\java\\org\\springframework\\test\\web\\servlet\\samples\\standalone\\resultmatchers\\HandlerAssertionTests.java:\n   27  import org.springframework.web.bind.annotation.RequestMapping;\n   28  import org.springframework.web.bind.annotation.RestController;\n   29: import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;\n   30  \n   31  import static org.hamcrest.Matchers.equalTo;\n   ..\n   36  import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.status;\n   37  import static org.springframework.test.web.servlet.setup.MockMvcBuilders.standaloneSetup;\n   38: import static org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.on;\n   39  \n   40  /**\n   ..\n   61  		exception.expect(AssertionError.class);\n   62  		exception.expectMessage(\"The supplied object [bogus] is not an instance of\");\n   63: 		exception.expectMessage(MvcUriComponentsBuilder.MethodInvocationInfo.class.getName());\n   64: 		exception.expectMessage(\"Ensure that you invoke the handler method via MvcUriComponentsBuilder.on()\");\n   65  \n   66  		this.mockMvc.perform(get(\"/\")).andExpect(handler().methodCall(\"bogus\"));\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-test\\src\\test\\resources\\org\\springframework\\test\\context\\junit4\\orm\\HibernateSessionFlushingTests-context.xml:\n    9  		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc.xsd\">\n   10  \n   11: 	<context:component-scan base-package=\"org.springframework.test.context.junit4.orm\"/>\n   12  \n   13  	<tx:annotation-driven />\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-tx\\src\\main\\java\\org\\springframework\\jca\\context\\SpringContextResourceAdapter.java:\n   59   *\n   60   * <p>The JCA {@link javax.resource.spi.BootstrapContext} may also be\n   61:  * accessed directly, through application components that implement the\n   62   * {@link BootstrapContextAware} interface. When deployed using this\n   63   * ResourceAdapter, the BootstrapContext is guaranteed to be passed on\n   64:  * to such components.\n   65   *\n   66   * <p>This ResourceAdapter is to be defined in a \"META-INF/ra.xml\" file\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-tx\\src\\main\\java\\org\\springframework\\transaction\\annotation\\EnableTransactionManagement.java:\n   79   * In both of the scenarios above, {@code @EnableTransactionManagement} and {@code\n   80   * <tx:annotation-driven/>} are responsible for registering the necessary Spring\n   81:  * components that power annotation-driven transaction management, such as the\n   82   * TransactionInterceptor and the proxy- or AspectJ-based advice that weave the\n   83   * interceptor into the call stack when {@code JdbcFooRepository}'s {@code @Transactional}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-tx\\src\\main\\java\\org\\springframework\\transaction\\config\\AnnotationDrivenBeanDefinitionParser.java:\n   22  import org.springframework.beans.factory.config.BeanDefinition;\n   23  import org.springframework.beans.factory.config.RuntimeBeanReference;\n   24: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   25: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   26  import org.springframework.beans.factory.support.RootBeanDefinition;\n   27  import org.springframework.beans.factory.xml.BeanDefinitionParser;\n   ..\n   79  			def.setFactoryMethodName(\"aspectOf\");\n   80  			registerTransactionManager(element, def);\n   81: 			parserContext.registerBeanComponent(new BeanComponentDefinition(def, txAspectBeanName));\n   82  		}\n   83  	}\n   ..\n   91  		RootBeanDefinition def = new RootBeanDefinition();\n   92  		def.setBeanClass(TransactionalEventListenerFactory.class);\n   93: 		parserContext.registerBeanComponent(new BeanComponentDefinition(def,\n   94  				TransactionManagementConfigUtils.TRANSACTIONAL_EVENT_LISTENER_FACTORY_BEAN_NAME));\n   95  	}\n   ..\n  134  				parserContext.getRegistry().registerBeanDefinition(txAdvisorBeanName, advisorDef);\n  135  \n  136: 				CompositeComponentDefinition compositeDef = new CompositeComponentDefinition(element.getTagName(), eleSource);\n  137: 				compositeDef.addNestedComponent(new BeanComponentDefinition(sourceDef, sourceName));\n  138: 				compositeDef.addNestedComponent(new BeanComponentDefinition(interceptorDef, interceptorName));\n  139: 				compositeDef.addNestedComponent(new BeanComponentDefinition(advisorDef, txAdvisorBeanName));\n  140: 				parserContext.registerComponent(compositeDef);\n  141  			}\n  142  		}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-tx\\src\\test\\java\\org\\springframework\\transaction\\event\\TransactionalEventListenerTests.java:\n   39  import org.springframework.context.event.EventListener;\n   40  import org.springframework.core.annotation.Order;\n   41: import org.springframework.stereotype.Component;\n   42  import org.springframework.tests.transaction.CallCountingTransactionManager;\n   43  import org.springframework.transaction.annotation.EnableTransactionManagement;\n   ..\n  152  \n  153  	@Test\n  154: 	public void afterCommitWithTransactionalComponentListenerProxiedViaDynamicProxy() {\n  155: 		load(TransactionalConfiguration.class, TransactionalComponentTestListener.class);\n  156  		this.transactionTemplate.execute(status -> {\n  157  			getContext().publishEvent(\"SKIP\");\n  ...\n  425  \n  426  \n  427: 	@Component\n  428  	static class ImmediateTestListener extends BaseTransactionalTestListener {\n  429  \n  ...\n  435  \n  436  \n  437: 	@Component\n  438  	static class AfterCompletionTestListener extends BaseTransactionalTestListener {\n  439  \n  ...\n  445  \n  446  \n  447: 	@Component\n  448  	static class AfterCompletionExplicitTestListener extends BaseTransactionalTestListener {\n  449  \n  ...\n  461  \n  462  	@Transactional\n  463: 	@Component\n  464: 	static interface TransactionalComponentTestListenerInterface {\n  465  \n  466  		// Cannot use #data in condition due to dynamic proxy.\n  ...\n  470  \n  471  \n  472: 	static class TransactionalComponentTestListener extends BaseTransactionalTestListener implements\n  473: 			TransactionalComponentTestListenerInterface {\n  474  \n  475  		@Override\n  ...\n  480  \n  481  \n  482: 	@Component\n  483  	static class BeforeCommitTestListener extends BaseTransactionalTestListener {\n  484  \n  ...\n  491  \n  492  \n  493: 	@Component\n  494  	static class FallbackExecutionTestListener extends BaseTransactionalTestListener {\n  495  \n  ...\n  523  \n  524  \n  525: 	@Component\n  526  	static class AfterCommitMetaAnnotationTestListener extends BaseTransactionalTestListener {\n  527  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-tx\\src\\test\\java\\org\\springframework\\transaction\\TxNamespaceHandlerEventTests.java:\n   20  import org.junit.Test;\n   21  \n   22: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   23: import org.springframework.beans.factory.parsing.ComponentDefinition;\n   24  import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n   25  import org.springframework.beans.factory.xml.XmlBeanDefinitionReader;\n   ..\n   49  \n   50  	@Test\n   51: 	public void componentEventReceived() {\n   52: 		ComponentDefinition component = this.eventListener.getComponentDefinition(\"txAdvice\");\n   53: 		assertThat(component, instanceOf(BeanComponentDefinition.class));\n   54  	}\n   55  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-tx\\src\\test\\resources\\org\\springframework\\transaction\\interceptor\\transactionalBeanFactory.xml:\n  107  \n  108  	<!--\n  109: 		The HotSwappableTargetSource is a Type 3 component.\n  110  	-->\n  111  	<bean id=\"swapper\" class=\"org.springframework.aop.target.HotSwappableTargetSource\">\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web-reactive\\src\\main\\java\\org\\springframework\\web\\reactive\\resource\\ResourceUrlProvider.java:\n   39  \n   40  /**\n   41:  * A central component to use to obtain the public URL path that clients should\n   42   * use to access a static resource.\n   43   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web-reactive\\src\\main\\java\\org\\springframework\\web\\reactive\\result\\view\\freemarker\\FreeMarkerConfigurer.java:\n   37   * <p>This bean must be included in the application context of any application\n   38   * using {@link FreeMarkerView}. It exists purely to configure FreeMarker.\n   39:  * It is not meant to be referenced by application components but just internally\n   40   * by {@code FreeMarkerView}. Implements {@link FreeMarkerConfig} to be found by\n   41   * {@code FreeMarkerView} without depending on the bean name the configurer.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web-reactive\\src\\test\\java\\org\\springframework\\web\\reactive\\result\\method\\annotation\\RequestMappingExceptionHandlingIntegrationTests.java:\n   23  import org.springframework.context.ApplicationContext;\n   24  import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n   25: import org.springframework.context.annotation.ComponentScan;\n   26  import org.springframework.context.annotation.Configuration;\n   27  import org.springframework.web.bind.annotation.ExceptionHandler;\n   ..\n   64  \n   65  	@Configuration\n   66: 	@ComponentScan(resourcePattern = \"**/RequestMappingExceptionHandlingIntegrationTests$*.class\")\n   67  	@SuppressWarnings({\"unused\", \"WeakerAccess\"})\n   68  	static class WebConfig extends WebReactiveConfiguration {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web-reactive\\src\\test\\java\\org\\springframework\\web\\reactive\\result\\method\\annotation\\RequestMappingIntegrationTests.java:\n   23  import org.springframework.context.ApplicationContext;\n   24  import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n   25: import org.springframework.context.annotation.ComponentScan;\n   26  import org.springframework.context.annotation.Configuration;\n   27  import org.springframework.web.bind.annotation.GetMapping;\n   ..\n   67  \n   68  	@Configuration\n   69: 	@ComponentScan(resourcePattern = \"**/RequestMappingIntegrationTests$*.class\")\n   70  	@SuppressWarnings({\"unused\", \"WeakerAccess\"})\n   71  	static class WebConfig extends WebReactiveConfiguration {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web-reactive\\src\\test\\java\\org\\springframework\\web\\reactive\\result\\method\\annotation\\RequestMappingMessageConversionIntegrationTests.java:\n   36  import org.springframework.context.ApplicationContext;\n   37  import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n   38: import org.springframework.context.annotation.ComponentScan;\n   39  import org.springframework.context.annotation.Configuration;\n   40  import org.springframework.core.ParameterizedTypeReference;\n   ..\n  371  \n  372  	@Configuration\n  373: 	@ComponentScan(resourcePattern = \"**/RequestMappingMessageConversionIntegrationTests$*.class\")\n  374  	@SuppressWarnings({\"unused\", \"WeakerAccess\"})\n  375  	static class WebConfig extends WebReactiveConfiguration {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web-reactive\\src\\test\\java\\org\\springframework\\web\\reactive\\result\\method\\annotation\\RequestMappingViewResolutionIntegrationTests.java:\n   25  import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n   26  import org.springframework.context.annotation.Bean;\n   27: import org.springframework.context.annotation.ComponentScan;\n   28  import org.springframework.context.annotation.Configuration;\n   29  import org.springframework.http.HttpStatus;\n   ..\n   80  \n   81  	@Configuration\n   82: 	@ComponentScan(resourcePattern = \"**/RequestMappingViewResolutionIntegrationTests$*.class\")\n   83  	@SuppressWarnings({\"unused\", \"WeakerAccess\"})\n   84  	static class WebConfig extends WebReactiveConfiguration {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\http\\client\\HttpComponentsAsyncClientHttpRequest.java:\n   41  \n   42  /**\n   43:  * {@link ClientHttpRequest} implementation that uses Apache HttpComponents HttpClient to\n   44   * execute requests.\n   45   *\n   46:  * <p>Created via the {@link org.springframework.http.client.HttpComponentsClientHttpRequestFactory}.\n   47   *\n   48   * @author Oleg Kalnichevski\n   49   * @author Arjen Poutsma\n   50   * @since 4.0\n   51:  * @see org.springframework.http.client.HttpComponentsClientHttpRequestFactory#createRequest\n   52   */\n   53: final class HttpComponentsAsyncClientHttpRequest extends AbstractBufferingAsyncClientHttpRequest {\n   54  \n   55  	private final HttpAsyncClient httpClient;\n   ..\n   60  \n   61  \n   62: 	HttpComponentsAsyncClientHttpRequest(HttpAsyncClient httpClient, HttpUriRequest httpRequest, HttpContext httpContext) {\n   63  		this.httpClient = httpClient;\n   64  		this.httpRequest = httpRequest;\n   ..\n   85  			throws IOException {\n   86  \n   87: 		HttpComponentsClientHttpRequest.addHeaders(this.httpRequest, headers);\n   88  \n   89  		if (this.httpRequest instanceof HttpEntityEnclosingRequest) {\n   ..\n  119  		@Override\n  120  		public void completed(HttpResponse result) {\n  121: 			this.callbacks.success(new HttpComponentsAsyncClientHttpResponse(result));\n  122  		}\n  123  \n  ...\n  145  		@Override\n  146  		protected ClientHttpResponse adapt(HttpResponse response) {\n  147: 			return new HttpComponentsAsyncClientHttpResponse(response);\n  148  		}\n  149  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\http\\client\\HttpComponentsAsyncClientHttpRequestFactory.java:\n   36  \n   37  /**\n   38:  * Asynchronous extension of the {@link HttpComponentsClientHttpRequestFactory}. Uses\n   39:  * <a href=\"http://hc.apache.org/httpcomponents-asyncclient-dev/\">Apache HttpComponents\n   40   * HttpAsyncClient 4.0</a> to create requests.\n   41   *\n   ..\n   45   * @see HttpAsyncClient\n   46   */\n   47: public class HttpComponentsAsyncClientHttpRequestFactory extends HttpComponentsClientHttpRequestFactory\n   48  		implements AsyncClientHttpRequestFactory, InitializingBean {\n   49  \n   ..\n   52  \n   53  	/**\n   54: 	 * Create a new instance of the {@code HttpComponentsAsyncClientHttpRequestFactory}\n   55  	 * with a default {@link HttpAsyncClient} and {@link HttpClient}.\n   56  	 */\n   57: 	public HttpComponentsAsyncClientHttpRequestFactory() {\n   58  		this(HttpAsyncClients.createSystem());\n   59  	}\n   60  \n   61  	/**\n   62: 	 * Create a new instance of the {@code HttpComponentsAsyncClientHttpRequestFactory}\n   63  	 * with the given {@link HttpAsyncClient} instance and a default {@link HttpClient}.\n   64  	 * @param httpAsyncClient the HttpAsyncClient instance to use for this request factory\n   65  	 */\n   66: 	public HttpComponentsAsyncClientHttpRequestFactory(CloseableHttpAsyncClient httpAsyncClient) {\n   67  		super();\n   68  		Assert.notNull(httpAsyncClient, \"HttpAsyncClient must not be null\");\n   ..\n   71  \n   72  	/**\n   73: 	 * Create a new instance of the {@code HttpComponentsAsyncClientHttpRequestFactory}\n   74  	 * with the given {@link HttpClient} and {@link HttpAsyncClient} instances.\n   75  	 * @param httpClient the HttpClient instance to use for this request factory\n   76  	 * @param httpAsyncClient the HttpAsyncClient instance to use for this request factory\n   77  	 */\n   78: 	public HttpComponentsAsyncClientHttpRequestFactory(\n   79  			CloseableHttpClient httpClient, CloseableHttpAsyncClient httpAsyncClient) {\n   80  \n   ..\n  138  			}\n  139  		}\n  140: 		return new HttpComponentsAsyncClientHttpRequest(asyncClient, httpRequest, context);\n  141  	}\n  142  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\http\\client\\HttpComponentsAsyncClientHttpResponse.java:\n   29  /**\n   30   * {@link ClientHttpResponse} implementation that uses\n   31:  * Apache HttpComponents HttpClient to execute requests.\n   32   *\n   33:  * <p>Created via the {@link HttpComponentsAsyncClientHttpRequest}.\n   34   *\n   35   * @author Oleg Kalnichevski\n   36   * @author Arjen Poutsma\n   37   * @since 4.0\n   38:  * @see HttpComponentsAsyncClientHttpRequest#executeAsync()\n   39   */\n   40: final class HttpComponentsAsyncClientHttpResponse extends AbstractClientHttpResponse {\n   41  \n   42  	private final HttpResponse httpResponse;\n   ..\n   45  \n   46  \n   47: 	HttpComponentsAsyncClientHttpResponse(HttpResponse httpResponse) {\n   48  		this.httpResponse = httpResponse;\n   49  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\http\\client\\HttpComponentsClientHttpRequest.java:\n   37  /**\n   38   * {@link org.springframework.http.client.ClientHttpRequest} implementation that uses\n   39:  * Apache HttpComponents HttpClient to execute requests.\n   40   *\n   41:  * <p>Created via the {@link HttpComponentsClientHttpRequestFactory}.\n   42   *\n   43:  * <p><b>NOTE:</b> Requires Apache HttpComponents 4.3 or higher, as of Spring 4.0.\n   44   *\n   45   * @author Oleg Kalnichevski\n   ..\n   47   * @author Juergen Hoeller\n   48   * @since 3.1\n   49:  * @see HttpComponentsClientHttpRequestFactory#createRequest(URI, HttpMethod)\n   50   */\n   51: final class HttpComponentsClientHttpRequest extends AbstractBufferingClientHttpRequest {\n   52  \n   53  	private final HttpClient httpClient;\n   ..\n   58  \n   59  \n   60: 	HttpComponentsClientHttpRequest(HttpClient httpClient, HttpUriRequest httpRequest, HttpContext httpContext) {\n   61  		this.httpClient = httpClient;\n   62  		this.httpRequest = httpRequest;\n   ..\n   90  		}\n   91  		HttpResponse httpResponse = this.httpClient.execute(this.httpRequest, this.httpContext);\n   92: 		return new HttpComponentsClientHttpResponse(httpResponse);\n   93  	}\n   94  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\http\\client\\HttpComponentsClientHttpRequestFactory.java:\n   43  /**\n   44   * {@link org.springframework.http.client.ClientHttpRequestFactory} implementation that\n   45:  * uses <a href=\"http://hc.apache.org/httpcomponents-client-ga/\">Apache HttpComponents\n   46   * HttpClient</a> to create requests.\n   47   *\n   ..\n   49   * potentially with authentication, HTTP connection pooling, etc.\n   50   *\n   51:  * <p><b>NOTE:</b> Requires Apache HttpComponents 4.3 or higher, as of Spring 4.0.\n   52   *\n   53   * @author Oleg Kalnichevski\n   ..\n   57   * @since 3.1\n   58   */\n   59: public class HttpComponentsClientHttpRequestFactory implements ClientHttpRequestFactory, DisposableBean {\n   60  \n   61  	private HttpClient httpClient;\n   ..\n   67  \n   68  	/**\n   69: 	 * Create a new instance of the {@code HttpComponentsClientHttpRequestFactory}\n   70  	 * with a default {@link HttpClient}.\n   71  	 */\n   72: 	public HttpComponentsClientHttpRequestFactory() {\n   73  		this(HttpClients.createSystem());\n   74  	}\n   75  \n   76  	/**\n   77: 	 * Create a new instance of the {@code HttpComponentsClientHttpRequestFactory}\n   78  	 * with the given {@link HttpClient} instance.\n   79  	 * @param httpClient the HttpClient instance to use for this request factory\n   80  	 */\n   81: 	public HttpComponentsClientHttpRequestFactory(HttpClient httpClient) {\n   82  		Assert.notNull(httpClient, \"HttpClient must not be null\");\n   83  		this.httpClient = httpClient;\n   ..\n  178  \n  179  		if (this.bufferRequestBody) {\n  180: 			return new HttpComponentsClientHttpRequest(client, httpRequest, context);\n  181  		}\n  182  		else {\n  183: 			return new HttpComponentsStreamingClientHttpRequest(client, httpRequest, context);\n  184  		}\n  185  	}\n  ...\n  273  	/**\n  274  	 * Template method that allows for manipulating the {@link HttpUriRequest} before it is\n  275: 	 * returned as part of a {@link HttpComponentsClientHttpRequest}.\n  276  	 * <p>The default implementation is empty.\n  277  	 * @param request the request to process\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\http\\client\\HttpComponentsClientHttpResponse.java:\n   31  /**\n   32   * {@link org.springframework.http.client.ClientHttpResponse} implementation that uses\n   33:  * Apache HttpComponents HttpClient to execute requests.\n   34   *\n   35:  * <p>Created via the {@link HttpComponentsClientHttpRequest}.\n   36   *\n   37:  * <p><b>NOTE:</b> Requires Apache HttpComponents 4.3 or higher, as of Spring 4.0.\n   38   *\n   39   * @author Oleg Kalnichevski\n   40   * @author Arjen Poutsma\n   41   * @since 3.1\n   42:  * @see HttpComponentsClientHttpRequest#execute()\n   43   */\n   44: final class HttpComponentsClientHttpResponse extends AbstractClientHttpResponse {\n   45  \n   46  	private final HttpResponse httpResponse;\n   ..\n   49  \n   50  \n   51: 	HttpComponentsClientHttpResponse(HttpResponse httpResponse) {\n   52  		this.httpResponse = httpResponse;\n   53  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\http\\client\\HttpComponentsStreamingClientHttpRequest.java:\n   37  \n   38  /**\n   39:  * {@link ClientHttpRequest} implementation that uses Apache HttpComponents\n   40   * HttpClient to execute requests.\n   41   *\n   42:  * <p>Created via the {@link HttpComponentsClientHttpRequestFactory}.\n   43   *\n   44   * @author Arjen Poutsma\n   45   * @since 4.0\n   46:  * @see HttpComponentsClientHttpRequestFactory#createRequest(java.net.URI, org.springframework.http.HttpMethod)\n   47   */\n   48: final class HttpComponentsStreamingClientHttpRequest extends AbstractClientHttpRequest implements StreamingHttpOutputMessage {\n   49  \n   50  	private final HttpClient httpClient;\n   ..\n   57  \n   58  \n   59: 	HttpComponentsStreamingClientHttpRequest(HttpClient httpClient, HttpUriRequest httpRequest, HttpContext httpContext) {\n   60  		this.httpClient = httpClient;\n   61  		this.httpRequest = httpRequest;\n   ..\n   87  	@Override\n   88  	protected ClientHttpResponse executeInternal(HttpHeaders headers) throws IOException {\n   89: 		HttpComponentsClientHttpRequest.addHeaders(this.httpRequest, headers);\n   90  \n   91  		if (this.httpRequest instanceof HttpEntityEnclosingRequest && body != null) {\n   ..\n   96  \n   97  		HttpResponse httpResponse = this.httpClient.execute(this.httpRequest, this.httpContext);\n   98: 		return new HttpComponentsClientHttpResponse(httpResponse);\n   99  	}\n  100  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\http\\client\\SimpleClientHttpRequestFactory.java:\n   35   * @since 3.0\n   36   * @see java.net.HttpURLConnection\n   37:  * @see HttpComponentsClientHttpRequestFactory\n   38   */\n   39  public class SimpleClientHttpRequestFactory implements ClientHttpRequestFactory, AsyncClientHttpRequestFactory {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\http\\converter\\xml\\MappingJackson2XmlHttpMessageConverter.java:\n   28   * Implementation of {@link org.springframework.http.converter.HttpMessageConverter HttpMessageConverter}\n   29   * that can read and write XML using <a href=\"https://github.com/FasterXML/jackson-dataformat-xml\">\n   30:  * Jackson 2.x extension component for reading and writing XML encoded data</a>.\n   31   *\n   32   * <p>By default, this converter supports {@code application/xml}, {@code text/xml}, and\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\remoting\\httpinvoker\\HttpComponentsHttpInvokerRequestExecutor.java:\n   48  /**\n   49   * {@link org.springframework.remoting.httpinvoker.HttpInvokerRequestExecutor} implementation that uses\n   50:  * <a href=\"http://hc.apache.org/httpcomponents-client-ga/httpclient/\">Apache HttpComponents HttpClient</a>\n   51   * to execute POST requests.\n   52   *\n   ..\n   55   * Also designed for easy subclassing, providing specific template methods.\n   56   *\n   57:  * <p>As of Spring 4.1, this request executor requires Apache HttpComponents 4.3 or higher.\n   58   *\n   59   * @author Juergen Hoeller\n   ..\n   62   * @see org.springframework.remoting.httpinvoker.SimpleHttpInvokerRequestExecutor\n   63   */\n   64: public class HttpComponentsHttpInvokerRequestExecutor extends AbstractHttpInvokerRequestExecutor {\n   65  \n   66  	private static final int DEFAULT_MAX_TOTAL_CONNECTIONS = 100;\n   ..\n   77  \n   78  	/**\n   79: 	 * Create a new instance of the HttpComponentsHttpInvokerRequestExecutor with a default\n   80  	 * {@link HttpClient} that uses a default {@code org.apache.http.impl.conn.PoolingClientConnectionManager}.\n   81  	 */\n   82: 	public HttpComponentsHttpInvokerRequestExecutor() {\n   83  		this(createDefaultHttpClient(), RequestConfig.custom()\n   84  				.setSocketTimeout(DEFAULT_READ_TIMEOUT_MILLISECONDS).build());\n   ..\n   86  \n   87  	/**\n   88: 	 * Create a new instance of the HttpComponentsClientHttpRequestFactory\n   89  	 * with the given {@link HttpClient} instance.\n   90  	 * @param httpClient the HttpClient instance to use for this request executor\n   91  	 */\n   92: 	public HttpComponentsHttpInvokerRequestExecutor(HttpClient httpClient) {\n   93  		this(httpClient, null);\n   94  	}\n   95  \n   96: 	private HttpComponentsHttpInvokerRequestExecutor(HttpClient httpClient, RequestConfig requestConfig) {\n   97  		this.httpClient = httpClient;\n   98  		this.requestConfig = requestConfig;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\remoting\\httpinvoker\\HttpInvokerClientInterceptor.java:\n  101  	 * remote invocations.\n  102  	 * <p>Default is {@link SimpleHttpInvokerRequestExecutor}. Alternatively,\n  103: 	 * consider using {@link HttpComponentsHttpInvokerRequestExecutor} for more\n  104  	 * sophisticated needs.\n  105  	 * @see SimpleHttpInvokerRequestExecutor\n  106: 	 * @see HttpComponentsHttpInvokerRequestExecutor\n  107  	 */\n  108  	public void setHttpInvokerRequestExecutor(HttpInvokerRequestExecutor httpInvokerRequestExecutor) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\remoting\\httpinvoker\\HttpInvokerRequestExecutor.java:\n   32   * Uses JDK facilities to execute POST requests, without support\n   33   * for HTTP authentication or advanced configuration options.\n   34:  * <li><b>{@code HttpComponentsHttpInvokerRequestExecutor}:</b>\n   35   * Uses Apache's Commons HttpClient to execute POST requests,\n   36   * allowing to use a preconfigured HttpClient instance\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\remoting\\httpinvoker\\SimpleHttpInvokerRequestExecutor.java:\n   37   *\n   38   * <p>Designed for easy subclassing, customizing specific template methods.\n   39:  * However, consider {@code HttpComponentsHttpInvokerRequestExecutor} for\n   40   * more sophisticated needs: The J2SE HttpURLConnection is rather limited\n   41   * in its capabilities.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\bind\\annotation\\ControllerAdvice.java:\n   25  \n   26  import org.springframework.core.annotation.AliasFor;\n   27: import org.springframework.stereotype.Component;\n   28  \n   29  /**\n   30   * Indicates the annotated class assists a \"Controller\".\n   31   *\n   32:  * <p>Serves as a specialization of {@link Component @Component}, allowing for\n   33   * implementation classes to be autodetected through classpath scanning.\n   34   *\n   ..\n   58  @Retention(RetentionPolicy.RUNTIME)\n   59  @Documented\n   60: @Component\n   61  public @interface ControllerAdvice {\n   62  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\bind\\annotation\\RequestMapping.java:\n  147   * attributes that have been indicated by the {@link SessionAttributes @SessionAttributes}\n  148   * annotation at the handler type level).\n  149:  * <li>{@link org.springframework.web.util.UriComponentsBuilder}\n  150   * (Servlet-only, {@literal @MVC 3.1-only})\n  151   * for preparing a URL relative to the current request's host, port, scheme,\n  ...\n  274  	 * When used on both levels, a combined name is derived by concatenation\n  275  	 * with \"#\" as separator.\n  276: 	 * @see org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder\n  277  	 * @see org.springframework.web.servlet.handler.HandlerMethodMappingNamingStrategy\n  278  	 */\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\bind\\annotation\\RestController.java:\n   50  \n   51  	/**\n   52: 	 * The value may indicate a suggestion for a logical component name,\n   53: 	 * to be turned into a Spring bean in case of an autodetected component.\n   54: 	 * @return the suggested component name, if any\n   55  	 * @since 4.0.1\n   56  	 */\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\bind\\WebDataBinder.java:\n  268  				else if (fieldType.isArray()) {\n  269  					// Special handling of array property.\n  270: 					return Array.newInstance(fieldType.getComponentType(), 0);\n  271  				}\n  272  				else if (Collection.class.isAssignableFrom(fieldType)) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\client\\AsyncRestTemplate.java:\n   61   * <p><strong>Note:</strong> by default {@code AsyncRestTemplate} relies on\n   62   * standard JDK facilities to establish HTTP connections. You can switch to use\n   63:  * a different HTTP library such as Apache HttpComponents, Netty, and OkHttp by\n   64   * using a constructor accepting an {@link AsyncClientHttpRequestFactory}.\n   65   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\client\\RestTemplate.java:\n   65   * <p><strong>Note:</strong> by default the RestTemplate relies on standard JDK\n   66   * facilities to establish HTTP connections. You can switch to use a different\n   67:  * HTTP library such as Apache HttpComponents, Netty, and OkHttp through the\n   68   * {@link #setRequestFactory} property.\n   69   *\n   ..\n   97   * variant to provide (or re-use) a previously encoded URI. To prepare such an URI\n   98   * with full control over encoding, consider using\n   99:  * {@link org.springframework.web.util.UriComponentsBuilder}.\n  100   *\n  101   * <p>Internally the template uses {@link HttpMessageConverter} instances to\n  ...\n  197  	 * @param requestFactory HTTP request factory to use\n  198  	 * @see org.springframework.http.client.SimpleClientHttpRequestFactory\n  199: 	 * @see org.springframework.http.client.HttpComponentsClientHttpRequestFactory\n  200  	 */\n  201  	public RestTemplate(ClientHttpRequestFactory requestFactory) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\context\\annotation\\ApplicationScope.java:\n   30  /**\n   31   * {@code @ApplicationScope} is a specialization of {@link Scope @Scope} for a\n   32:  * component whose lifecycle is bound to the current web application.\n   33   *\n   34   * <p>Specifically, {@code @ApplicationScope} is a <em>composed annotation</em> that\n   ..\n   46   * @see org.springframework.web.context.WebApplicationContext#SCOPE_APPLICATION\n   47   * @see org.springframework.web.context.support.ServletContextScope\n   48:  * @see org.springframework.stereotype.Component\n   49   * @see org.springframework.context.annotation.Bean\n   50   */\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\context\\annotation\\RequestScope.java:\n   30  /**\n   31   * {@code @RequestScope} is a specialization of {@link Scope @Scope} for a\n   32:  * component whose lifecycle is bound to the current web request.\n   33   *\n   34   * <p>Specifically, {@code @RequestScope} is a <em>composed annotation</em> that\n   ..\n   46   * @see org.springframework.web.context.WebApplicationContext#SCOPE_REQUEST\n   47   * @see org.springframework.web.context.request.RequestScope\n   48:  * @see org.springframework.stereotype.Component\n   49   * @see org.springframework.context.annotation.Bean\n   50   */\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\context\\annotation\\SessionScope.java:\n   30  /**\n   31   * {@code @SessionScope} is a specialization of {@link Scope @Scope} for a\n   32:  * component whose lifecycle is bound to the current web session.\n   33   *\n   34   * <p>Specifically, {@code @SessionScope} is a <em>composed annotation</em> that\n   ..\n   46   * @see org.springframework.web.context.WebApplicationContext#SCOPE_SESSION\n   47   * @see org.springframework.web.context.request.SessionScope\n   48:  * @see org.springframework.stereotype.Component\n   49   * @see org.springframework.context.annotation.Bean\n   50   */\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\context\\support\\AnnotationConfigWebApplicationContext.java:\n   36   * implementation which accepts annotated classes as input - in particular\n   37   * {@link org.springframework.context.annotation.Configuration @Configuration}-annotated\n   38:  * classes, but also plain {@link org.springframework.stereotype.Component @Component}\n   39   * classes and JSR-330 compliant classes using {@code javax.inject} annotations. Allows\n   40   * for registering classes one by one (specifying class names as config location) as well\n   ..\n   60   * context-param for {@link ContextLoader} and/or \"contextConfigLocation\" init-param for\n   61   * FrameworkServlet.  The param-value may contain both fully-qualified\n   62:  * class names and base packages to scan for components. See {@link #loadBeanDefinitions}\n   63   * for exact details on how these locations are processed.\n   64   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\context\\support\\RequestHandledEvent.java:\n   24   * <p>Supported by Spring's own FrameworkServlet (through a specific\n   25   * ServletRequestHandledEvent subclass), but can also be raised by any\n   26:  * other web component. Used, for example, by Spring's out-of-the-box\n   27   * PerformanceMonitorListener.\n   28   *\n   ..\n   52  	/**\n   53  	 * Create a new RequestHandledEvent with session information.\n   54: 	 * @param source the component that published the event\n   55  	 * @param sessionId the id of the HTTP session, if any\n   56  	 * @param userName the name of the user that was associated with the\n   ..\n   67  	/**\n   68  	 * Create a new RequestHandledEvent with session information.\n   69: 	 * @param source the component that published the event\n   70  	 * @param sessionId the id of the HTTP session, if any\n   71  	 * @param userName the name of the user that was associated with the\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\context\\support\\ServletRequestHandledEvent.java:\n   47  	/**\n   48  	 * Create a new ServletRequestHandledEvent.\n   49: 	 * @param source the component that published the event\n   50  	 * @param requestUrl the URL of the request\n   51  	 * @param clientAddress the IP address that the request came from\n   ..\n   71  	/**\n   72  	 * Create a new ServletRequestHandledEvent.\n   73: 	 * @param source the component that published the event\n   74  	 * @param requestUrl the URL of the request\n   75  	 * @param clientAddress the IP address that the request came from\n   ..\n   96  	/**\n   97  	 * Create a new ServletRequestHandledEvent.\n   98: 	 * @param source the component that published the event\n   99  	 * @param requestUrl the URL of the request\n  100  	 * @param clientAddress the IP address that the request came from\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\cors\\CorsProcessor.java:\n   25   * the response.\n   26   *\n   27:  * <p>This component is not concerned with how a {@code CorsConfiguration} is\n   28   * selected but rather takes follow-up actions such as applying CORS validation\n   29   * checks and either rejecting the response or adding CORS headers to the\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\filter\\ForwardedHeaderFilter.java:\n   34  import org.springframework.util.CollectionUtils;\n   35  import org.springframework.util.LinkedCaseInsensitiveMap;\n   36: import org.springframework.web.util.UriComponents;\n   37: import org.springframework.web.util.UriComponentsBuilder;\n   38  import org.springframework.web.util.UrlPathHelper;\n   39  \n   ..\n  120  \n  121  			HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  122: 			UriComponents uriComponents = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  123: 			int port = uriComponents.getPort();\n  124  \n  125: 			this.scheme = uriComponents.getScheme();\n  126  			this.secure = \"https\".equals(scheme);\n  127: 			this.host = uriComponents.getHost();\n  128  			this.port = (port == -1 ? (this.secure ? 443 : 80) : port);\n  129  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\HttpRequestHandler.java:\n   23  \n   24  /**\n   25:  * Plain handler interface for components that process HTTP requests,\n   26   * analogous to a Servlet. Only declares {@link javax.servlet.ServletException}\n   27   * and {@link java.io.IOException}, to allow for usage within any\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\method\\annotation\\RequestParamMethodArgumentResolver.java:\n   36  import org.springframework.web.bind.annotation.ValueConstants;\n   37  import org.springframework.web.context.request.NativeWebRequest;\n   38: import org.springframework.web.method.support.UriComponentsContributor;\n   39  import org.springframework.web.multipart.MultipartException;\n   40  import org.springframework.web.multipart.MultipartFile;\n   ..\n   43  import org.springframework.web.multipart.support.MissingServletRequestPartException;\n   44  import org.springframework.web.multipart.support.MultipartResolutionDelegate;\n   45: import org.springframework.web.util.UriComponentsBuilder;\n   46  import org.springframework.web.util.WebUtils;\n   47  \n   ..\n   73   */\n   74  public class RequestParamMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver\n   75: 		implements UriComponentsContributor {\n   76  \n   77  	private static final TypeDescriptor STRING_TYPE_DESCRIPTOR = TypeDescriptor.valueOf(String.class);\n   ..\n  199  	@Override\n  200  	public void contributeMethodArgument(MethodParameter parameter, Object value,\n  201: 			UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) {\n  202  \n  203  		Class<?> paramType = parameter.getNestedParameterType();\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\method\\support\\CompositeUriComponentsContributor.java:\n   27  import org.springframework.format.support.DefaultFormattingConversionService;\n   28  import org.springframework.util.Assert;\n   29: import org.springframework.web.util.UriComponentsBuilder;\n   30  \n   31  /**\n   32:  * A {@link UriComponentsContributor} containing a list of other contributors\n   33   * to delegate and also encapsulating a specific {@link ConversionService} to\n   34   * use for formatting method argument values to Strings.\n   ..\n   37   * @since 4.0\n   38   */\n   39: public class CompositeUriComponentsContributor implements UriComponentsContributor {\n   40  \n   41  	private final List<Object> contributors = new LinkedList<>();\n   ..\n   45  \n   46  	/**\n   47: 	 * Create an instance from a collection of {@link UriComponentsContributor}s or\n   48  	 * {@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented\n   49  	 * by the same class, the most convenient option is to obtain the configured\n   50  	 * {@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}\n   51  	 * and provide that to this constructor.\n   52: 	 * @param contributors a collection of {@link UriComponentsContributor}\n   53  	 * or {@link HandlerMethodArgumentResolver}s.\n   54  	 */\n   55: 	public CompositeUriComponentsContributor(UriComponentsContributor... contributors) {\n   56  		Collections.addAll(this.contributors, contributors);\n   57  		this.conversionService = new DefaultFormattingConversionService();\n   ..\n   59  \n   60  	/**\n   61: 	 * Create an instance from a collection of {@link UriComponentsContributor}s or\n   62  	 * {@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented\n   63  	 * by the same class, the most convenient option is to obtain the configured\n   64  	 * {@code HandlerMethodArgumentResolvers} in {@code RequestMappingHandlerAdapter}\n   65  	 * and provide that to this constructor.\n   66: 	 * @param contributors a collection of {@link UriComponentsContributor}\n   67  	 * or {@link HandlerMethodArgumentResolver}s.\n   68  	 */\n   69: 	public CompositeUriComponentsContributor(Collection<?> contributors) {\n   70  		this(contributors, null);\n   71  	}\n   72  \n   73  	/**\n   74: 	 * Create an instance from a collection of {@link UriComponentsContributor}s or\n   75  	 * {@link HandlerMethodArgumentResolver}s. Since both of these tend to be implemented\n   76  	 * by the same class, the most convenient option is to obtain the configured\n   ..\n   80  	 * {@link org.springframework.format.support.DefaultFormattingConversionService}\n   81  	 * will be used by default.\n   82: 	 * @param contributors a collection of {@link UriComponentsContributor}\n   83  	 * or {@link HandlerMethodArgumentResolver}s.\n   84  	 * @param cs a ConversionService to use when method argument values\n   85  	 * need to be formatted as Strings before being added to the URI\n   86  	 */\n   87: 	public CompositeUriComponentsContributor(Collection<?> contributors, ConversionService cs) {\n   88: 		Assert.notNull(contributors, \"'uriComponentsContributors' must not be null\");\n   89  		this.contributors.addAll(contributors);\n   90  		this.conversionService = (cs != null ? cs : new DefaultFormattingConversionService());\n   ..\n   99  	public boolean supportsParameter(MethodParameter parameter) {\n  100  		for (Object c : this.contributors) {\n  101: 			if (c instanceof UriComponentsContributor) {\n  102: 				UriComponentsContributor contributor = (UriComponentsContributor) c;\n  103  				if (contributor.supportsParameter(parameter)) {\n  104  					return true;\n  ...\n  116  	@Override\n  117  	public void contributeMethodArgument(MethodParameter parameter, Object value,\n  118: 			UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) {\n  119  \n  120  		for (Object contributor : this.contributors) {\n  121: 			if (contributor instanceof UriComponentsContributor) {\n  122: 				UriComponentsContributor ucc = (UriComponentsContributor) contributor;\n  123  				if (ucc.supportsParameter(parameter)) {\n  124  					ucc.contributeMethodArgument(parameter, value, builder, uriVariables, conversionService);\n  ...\n  137  	 * An overloaded method that uses the ConversionService created at construction.\n  138  	 */\n  139: 	public void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder,\n  140  			Map<String, Object> uriVariables) {\n  141  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\method\\support\\UriComponentsContributor.java:\n   21  import org.springframework.core.MethodParameter;\n   22  import org.springframework.core.convert.ConversionService;\n   23: import org.springframework.web.util.UriComponents;\n   24: import org.springframework.web.util.UriComponentsBuilder;\n   25  \n   26  /**\n   27:  * Strategy for contributing to the building of a {@link UriComponents} by\n   28   * looking at a method parameter and an argument value and deciding what\n   29   * part of the target URL should be updated.\n   ..\n   33   * @since 4.0\n   34   */\n   35: public interface UriComponentsContributor {\n   36  \n   37  	/**\n   ..\n   42  	/**\n   43  	 * Process the given method argument and either update the\n   44: 	 * {@link UriComponentsBuilder} or add to the map with URI variables to use to\n   45  	 * expand the URI after all arguments are processed.\n   46  	 * @param parameter the controller method parameter, never {@literal null}.\n   ..\n   50  	 * @param conversionService a ConversionService to format values as Strings\n   51  	 */\n   52: 	void contributeMethodArgument(MethodParameter parameter, Object value, UriComponentsBuilder builder,\n   53  			Map<String, Object> uriVariables, ConversionService conversionService);\n   54  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\multipart\\support\\MultipartResolutionDelegate.java:\n  117  \n  118  	private static boolean isMultipartFileArray(MethodParameter methodParam) {\n  119: 		return (MultipartFile.class == methodParam.getNestedParameterType().getComponentType());\n  120  	}\n  121  \n  ...\n  125  \n  126  	private static boolean isPartArray(MethodParameter methodParam) {\n  127: 		return (Part.class == methodParam.getNestedParameterType().getComponentType());\n  128  	}\n  129  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\SpringServletContainerInitializer.java:\n   92   * {@code ServletContext}. In other words, any servlet, listener, or filter may be\n   93   * registered within a {@code WebApplicationInitializer}, not just Spring MVC-specific\n   94:  * components.\n   95   *\n   96   * <p>This class is neither designed for extension nor intended to be extended.\n   ..\n  131  	 * that each instance may register and configure servlets such as Spring's\n  132  	 * {@code DispatcherServlet}, listeners such as Spring's {@code ContextLoaderListener},\n  133: 	 * or any other Servlet API componentry such as filters.\n  134  	 * @param webAppInitializerClasses all implementations of\n  135  	 * {@link WebApplicationInitializer} found on the application classpath\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\util\\AbstractUriTemplateHandler.java:\n   46  	 * have a scheme and host but may optionally contain a port and a path.\n   47  	 * The base URL must be fully expanded and encoded which can be done via\n   48: 	 * {@link UriComponentsBuilder}.\n   49  	 * @param baseUrl the base URL.\n   50  	 */\n   51  	public void setBaseUrl(String baseUrl) {\n   52  		if (baseUrl != null) {\n   53: 			UriComponents uriComponents = UriComponentsBuilder.fromUriString(baseUrl).build();\n   54: 			Assert.hasText(uriComponents.getScheme(), \"'baseUrl' must have a scheme\");\n   55: 			Assert.hasText(uriComponents.getHost(), \"'baseUrl' must have a host\");\n   56: 			Assert.isNull(uriComponents.getQuery(), \"'baseUrl' cannot have a query\");\n   57: 			Assert.isNull(uriComponents.getFragment(), \"'baseUrl' cannot have a fragment\");\n   58  		}\n   59  		this.baseUrl = baseUrl;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\util\\CookieGenerator.java:\n   30   * given response.\n   31   *\n   32:  * <p>Can serve as base class for components that generate specific cookies,\n   33   * such as CookieLocaleResolver and CookieThemeResolver.\n   34   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\util\\DefaultUriTemplateHandler.java:\n   26  /**\n   27   * Default implementation of {@link UriTemplateHandler} based on the use of\n   28:  * {@link UriComponentsBuilder} for expanding and encoding variables.\n   29   *\n   30   * <p>There are also several properties to customize how URI template handling\n   ..\n   71  	 * reserved purpose.\n   72  	 * <p>By default this is set to {@code false} in which case only characters\n   73: 	 * illegal for the given URI component are encoded. For example when expanding\n   74  	 * a URI variable into a path segment the \"/\" character is illegal and\n   75  	 * encoded. The \";\" character however is legal and not encoded even though\n   ..\n   94  	@Override\n   95  	protected URI expandInternal(String uriTemplate, Map<String, ?> uriVariables) {\n   96: 		UriComponentsBuilder uriComponentsBuilder = initUriComponentsBuilder(uriTemplate);\n   97: 		UriComponents uriComponents = expandAndEncode(uriComponentsBuilder, uriVariables);\n   98: 		return createUri(uriComponents);\n   99  	}\n  100  \n  101  	@Override\n  102  	protected URI expandInternal(String uriTemplate, Object... uriVariables) {\n  103: 		UriComponentsBuilder uriComponentsBuilder = initUriComponentsBuilder(uriTemplate);\n  104: 		UriComponents uriComponents = expandAndEncode(uriComponentsBuilder, uriVariables);\n  105: 		return createUri(uriComponents);\n  106  	}\n  107  \n  108  	/**\n  109: 	 * Create a {@code UriComponentsBuilder} from the URI template string.\n  110  	 * This implementation also breaks up the path into path segments depending\n  111  	 * on whether {@link #setParsePath parsePath} is enabled.\n  112  	 */\n  113: 	protected UriComponentsBuilder initUriComponentsBuilder(String uriTemplate) {\n  114: 		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(uriTemplate);\n  115  		if (shouldParsePath() && !isStrictEncoding()) {\n  116  			List<String> pathSegments = builder.build().getPathSegments();\n  ...\n  123  	}\n  124  \n  125: 	protected UriComponents expandAndEncode(UriComponentsBuilder builder, Map<String, ?> uriVariables) {\n  126  		if (!isStrictEncoding()) {\n  127  			return builder.buildAndExpand(uriVariables).encode();\n  ...\n  136  	}\n  137  \n  138: 	protected UriComponents expandAndEncode(UriComponentsBuilder builder, Object[] uriVariables) {\n  139  		if (!isStrictEncoding()) {\n  140  			return builder.buildAndExpand(uriVariables).encode();\n  ...\n  160  	}\n  161  \n  162: 	private URI createUri(UriComponents uriComponents) {\n  163  		try {\n  164  			// Avoid further encoding (in the case of strictEncoding=true)\n  165: 			return new URI(uriComponents.toUriString());\n  166  		}\n  167  		catch (URISyntaxException ex) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\util\\HierarchicalUriComponents.java:\n   39  \n   40  /**\n   41:  * Extension of {@link UriComponents} for hierarchical URIs.\n   42   *\n   43   * @author Arjen Poutsma\n   ..\n   48   */\n   49  @SuppressWarnings(\"serial\")\n   50: final class HierarchicalUriComponents extends UriComponents {\n   51  \n   52  	private static final char PATH_DELIMITER = '/';\n   ..\n   58  	private final String port;\n   59  \n   60: 	private final PathComponent path;\n   61  \n   62  	private final MultiValueMap<String, String> queryParams;\n   ..\n   74  	 * @param queryParams the query parameters\n   75  	 * @param fragment the fragment\n   76: 	 * @param encoded whether the components are already encoded\n   77: 	 * @param verify whether the components need to be checked for illegal characters\n   78  	 */\n   79: 	HierarchicalUriComponents(String scheme, String userInfo, String host, String port,\n   80: 			PathComponent path, MultiValueMap<String, String> queryParams,\n   81  			String fragment, boolean encoded, boolean verify) {\n   82  \n   ..\n   85  		this.host = host;\n   86  		this.port = port;\n   87: 		this.path = path != null ? path : NULL_PATH_COMPONENT;\n   88  		this.queryParams = CollectionUtils.unmodifiableMultiValueMap(\n   89  				queryParams != null ? queryParams : new LinkedMultiValueMap<>(0));\n   ..\n   95  \n   96  \n   97: 	// component getters\n   98  \n   99  	@Override\n  ...\n  180  \n  181  	/**\n  182: 	 * Encode all URI components using their specific encoding rules and return\n  183: 	 * the result as a new {@code UriComponents} instance.\n  184  	 * @param charset the encoding of the values contained in this map\n  185: 	 * @return the encoded uri components\n  186  	 * @throws UnsupportedEncodingException if the given encoding is not supported\n  187  	 */\n  188  	@Override\n  189: 	public HierarchicalUriComponents encode(Charset charset) throws UnsupportedEncodingException {\n  190  		if (this.encoded) {\n  191  			return this;\n  192  		}\n  193: 		String schemeTo = encodeUriComponent(getScheme(), charset, Type.SCHEME);\n  194: 		String userInfoTo = encodeUriComponent(this.userInfo, charset, Type.USER_INFO);\n  195: 		String hostTo = encodeUriComponent(this.host, charset, getHostType());\n  196: 		PathComponent pathTo = this.path.encode(charset);\n  197  		MultiValueMap<String, String> paramsTo = encodeQueryParams(charset);\n  198: 		String fragmentTo = encodeUriComponent(this.getFragment(), charset, Type.FRAGMENT);\n  199: 		return new HierarchicalUriComponents(schemeTo, userInfoTo, hostTo, this.port,\n  200  				pathTo, paramsTo, fragmentTo, true, false);\n  201  	}\n  ...\n  205  		MultiValueMap<String, String> result = new LinkedMultiValueMap<>(size);\n  206  		for (Map.Entry<String, List<String>> entry : this.queryParams.entrySet()) {\n  207: 			String name = encodeUriComponent(entry.getKey(), charset, Type.QUERY_PARAM);\n  208  			List<String> values = new ArrayList<>(entry.getValue().size());\n  209  			for (String value : entry.getValue()) {\n  210: 				values.add(encodeUriComponent(value, charset, Type.QUERY_PARAM));\n  211  			}\n  212  			result.put(name, values);\n  ...\n  217  	/**\n  218  	 * Encode the given source into an encoded String using the rules specified\n  219: 	 * by the given component and with the given options.\n  220  	 * @param source the source string\n  221  	 * @param encoding the encoding of the source string\n  222: 	 * @param type the URI component for the source\n  223  	 * @return the encoded URI\n  224  	 * @throws IllegalArgumentException when the given uri parameter is not a valid URI\n  225  	 */\n  226: 	static String encodeUriComponent(String source, String encoding, Type type) {\n  227: 		return encodeUriComponent(source, Charset.forName(encoding), type);\n  228  	}\n  229  \n  230  	/**\n  231  	 * Encode the given source into an encoded String using the rules specified\n  232: 	 * by the given component and with the given options.\n  233  	 * @param source the source string\n  234  	 * @param charset the encoding of the source string\n  235: 	 * @param type the URI component for the source\n  236  	 * @return the encoded URI\n  237  	 * @throws IllegalArgumentException when the given uri parameter is not a valid URI\n  238  	 */\n  239: 	static String encodeUriComponent(String source, Charset charset, Type type) {\n  240  		if (source == null) {\n  241  			return null;\n  ...\n  275  \n  276  	/**\n  277: 	 * Verifies all URI components to determine whether they contain any illegal\n  278  	 * characters, throwing an {@code IllegalArgumentException} if so.\n  279: 	 * @throws IllegalArgumentException if any component has illegal characters\n  280  	 */\n  281  	private void verify() {\n  ...\n  283  			return;\n  284  		}\n  285: 		verifyUriComponent(getScheme(), Type.SCHEME);\n  286: 		verifyUriComponent(this.userInfo, Type.USER_INFO);\n  287: 		verifyUriComponent(this.host, getHostType());\n  288  		this.path.verify();\n  289  		for (Map.Entry<String, List<String>> entry : queryParams.entrySet()) {\n  290: 			verifyUriComponent(entry.getKey(), Type.QUERY_PARAM);\n  291  			for (String value : entry.getValue()) {\n  292: 				verifyUriComponent(value, Type.QUERY_PARAM);\n  293  			}\n  294  		}\n  295: 		verifyUriComponent(getFragment(), Type.FRAGMENT);\n  296  	}\n  297  \n  298: 	private static void verifyUriComponent(String source, Type type) {\n  299  		if (source == null) {\n  300  			return;\n  ...\n  331  \n  332  	@Override\n  333: 	protected HierarchicalUriComponents expandInternal(UriTemplateVariables uriVariables) {\n  334: 		Assert.state(!this.encoded, \"Cannot expand an already encoded UriComponents object\");\n  335  \n  336: 		String schemeTo = expandUriComponent(getScheme(), uriVariables);\n  337: 		String userInfoTo = expandUriComponent(this.userInfo, uriVariables);\n  338: 		String hostTo = expandUriComponent(this.host, uriVariables);\n  339: 		String portTo = expandUriComponent(this.port, uriVariables);\n  340: 		PathComponent pathTo = this.path.expand(uriVariables);\n  341  		MultiValueMap<String, String> paramsTo = expandQueryParams(uriVariables);\n  342: 		String fragmentTo = expandUriComponent(this.getFragment(), uriVariables);\n  343  \n  344: 		return new HierarchicalUriComponents(schemeTo, userInfoTo, hostTo, portTo,\n  345  				pathTo, paramsTo, fragmentTo, false, false);\n  346  	}\n  ...\n  351  		variables = new QueryUriTemplateVariables(variables);\n  352  		for (Map.Entry<String, List<String>> entry : this.queryParams.entrySet()) {\n  353: 			String name = expandUriComponent(entry.getKey(), variables);\n  354  			List<String> values = new ArrayList<>(entry.getValue().size());\n  355  			for (String value : entry.getValue()) {\n  356: 				values.add(expandUriComponent(value, variables));\n  357  			}\n  358  			result.put(name, values);\n  ...\n  366  	 */\n  367  	@Override\n  368: 	public UriComponents normalize() {\n  369  		String normalizedPath = StringUtils.cleanPath(getPath());\n  370: 		return new HierarchicalUriComponents(getScheme(), this.userInfo, this.host,\n  371: 				this.port, new FullPathComponent(normalizedPath), this.queryParams,\n  372  				getFragment(), this.encoded, false);\n  373  	}\n  ...\n  377  \n  378  	/**\n  379: 	 * Returns a URI string from this {@code UriComponents} instance.\n  380  	 */\n  381  	@Override\n  ...\n  420  \n  421  	/**\n  422: 	 * Returns a {@code URI} from this {@code UriComponents} instance.\n  423  	 */\n  424  	@Override\n  ...\n  446  \n  447  	@Override\n  448: 	protected void copyToUriComponentsBuilder(UriComponentsBuilder builder) {\n  449  		builder.scheme(getScheme());\n  450  		builder.userInfo(getUserInfo());\n  ...\n  452  		builder.port(getPort());\n  453  		builder.replacePath(\"\");\n  454: 		this.path.copyToUriComponentsBuilder(builder);\n  455  		builder.replaceQueryParams(getQueryParams());\n  456  		builder.fragment(getFragment());\n  ...\n  463  			return true;\n  464  		}\n  465: 		if (!(obj instanceof HierarchicalUriComponents)) {\n  466  			return false;\n  467  		}\n  468: 		HierarchicalUriComponents other = (HierarchicalUriComponents) obj;\n  469  		return ObjectUtils.nullSafeEquals(getScheme(), other.getScheme()) &&\n  470  				ObjectUtils.nullSafeEquals(getUserInfo(), other.getUserInfo()) &&\n  ...\n  492  \n  493  	/**\n  494: 	 * Enumeration used to identify the allowed characters per URI component.\n  495: 	 * <p>Contains methods to indicate whether a given character is valid in a specific URI component.\n  496  	 * @see <a href=\"http://www.ietf.org/rfc/rfc3986.txt\">RFC 3986</a>\n  497  	 */\n  ...\n  577  \n  578  		/**\n  579: 		 * Indicates whether the given character is allowed in this URI component.\n  580  		 * @return {@code true} if the character is allowed; {@code false} otherwise\n  581  		 */\n  ...\n  644  	 * Defines the contract for path (segments).\n  645  	 */\n  646: 	interface PathComponent extends Serializable {\n  647  \n  648  		String getPath();\n  ...\n  650  		List<String> getPathSegments();\n  651  \n  652: 		PathComponent encode(Charset charset) throws UnsupportedEncodingException;\n  653  \n  654  		void verify();\n  655  \n  656: 		PathComponent expand(UriTemplateVariables uriVariables);\n  657  \n  658: 		void copyToUriComponentsBuilder(UriComponentsBuilder builder);\n  659  	}\n  660  \n  ...\n  663  	 * Represents a path backed by a string.\n  664  	 */\n  665: 	static final class FullPathComponent implements PathComponent {\n  666  \n  667  		private final String path;\n  668  \n  669  \n  670: 		public FullPathComponent(String path) {\n  671  			this.path = path;\n  672  		}\n  ...\n  685  \n  686  		@Override\n  687: 		public PathComponent encode(Charset charset) throws UnsupportedEncodingException {\n  688: 			String encodedPath = encodeUriComponent(getPath(), charset, Type.PATH);\n  689: 			return new FullPathComponent(encodedPath);\n  690  		}\n  691  \n  692  		@Override\n  693  		public void verify() {\n  694: 			verifyUriComponent(this.path, Type.PATH);\n  695  		}\n  696  \n  697  		@Override\n  698: 		public PathComponent expand(UriTemplateVariables uriVariables) {\n  699: 			String expandedPath = expandUriComponent(getPath(), uriVariables);\n  700: 			return new FullPathComponent(expandedPath);\n  701  		}\n  702  \n  703  		@Override\n  704: 		public void copyToUriComponentsBuilder(UriComponentsBuilder builder) {\n  705  			builder.path(getPath());\n  706  		}\n  ...\n  708  		@Override\n  709  		public boolean equals(Object obj) {\n  710: 			return (this == obj || (obj instanceof FullPathComponent &&\n  711: 					getPath().equals(((FullPathComponent) obj).getPath())));\n  712  		}\n  713  \n  ...\n  722  	 * Represents a path backed by a string list (i.e. path segments).\n  723  	 */\n  724: 	static final class PathSegmentComponent implements PathComponent {\n  725  \n  726  		private final List<String> pathSegments;\n  727  \n  728: 		public PathSegmentComponent(List<String> pathSegments) {\n  729  			Assert.notNull(pathSegments);\n  730  			this.pathSegments = Collections.unmodifiableList(new ArrayList<>(pathSegments));\n  ...\n  751  \n  752  		@Override\n  753: 		public PathComponent encode(Charset charset) throws UnsupportedEncodingException {\n  754  			List<String> pathSegments = getPathSegments();\n  755  			List<String> encodedPathSegments = new ArrayList<>(pathSegments.size());\n  756  			for (String pathSegment : pathSegments) {\n  757: 				String encodedPathSegment = encodeUriComponent(pathSegment, charset, Type.PATH_SEGMENT);\n  758  				encodedPathSegments.add(encodedPathSegment);\n  759  			}\n  760: 			return new PathSegmentComponent(encodedPathSegments);\n  761  		}\n  762  \n  ...\n  764  		public void verify() {\n  765  			for (String pathSegment : getPathSegments()) {\n  766: 				verifyUriComponent(pathSegment, Type.PATH_SEGMENT);\n  767  			}\n  768  		}\n  769  \n  770  		@Override\n  771: 		public PathComponent expand(UriTemplateVariables uriVariables) {\n  772  			List<String> pathSegments = getPathSegments();\n  773  			List<String> expandedPathSegments = new ArrayList<>(pathSegments.size());\n  774  			for (String pathSegment : pathSegments) {\n  775: 				String expandedPathSegment = expandUriComponent(pathSegment, uriVariables);\n  776  				expandedPathSegments.add(expandedPathSegment);\n  777  			}\n  778: 			return new PathSegmentComponent(expandedPathSegments);\n  779  		}\n  780  \n  781  		@Override\n  782: 		public void copyToUriComponentsBuilder(UriComponentsBuilder builder) {\n  783  			builder.pathSegment(getPathSegments().toArray(new String[getPathSegments().size()]));\n  784  		}\n  ...\n  786  		@Override\n  787  		public boolean equals(Object obj) {\n  788: 			return (this == obj || (obj instanceof PathSegmentComponent &&\n  789: 					getPathSegments().equals(((PathSegmentComponent) obj).getPathSegments())));\n  790  		}\n  791  \n  ...\n  798  \n  799  	/**\n  800: 	 * Represents a collection of PathComponents.\n  801  	 */\n  802: 	static final class PathComponentComposite implements PathComponent {\n  803  \n  804: 		private final List<PathComponent> pathComponents;\n  805  \n  806: 		public PathComponentComposite(List<PathComponent> pathComponents) {\n  807: 			Assert.notNull(pathComponents);\n  808: 			this.pathComponents = pathComponents;\n  809  		}\n  810  \n  ...\n  812  		public String getPath() {\n  813  			StringBuilder pathBuilder = new StringBuilder();\n  814: 			for (PathComponent pathComponent : this.pathComponents) {\n  815: 				pathBuilder.append(pathComponent.getPath());\n  816  			}\n  817  			return pathBuilder.toString();\n  ...\n  821  		public List<String> getPathSegments() {\n  822  			List<String> result = new ArrayList<>();\n  823: 			for (PathComponent pathComponent : this.pathComponents) {\n  824: 				result.addAll(pathComponent.getPathSegments());\n  825  			}\n  826  			return result;\n  ...\n  828  \n  829  		@Override\n  830: 		public PathComponent encode(Charset charset) throws UnsupportedEncodingException {\n  831: 			List<PathComponent> encodedComponents = new ArrayList<>(this.pathComponents.size());\n  832: 			for (PathComponent pathComponent : this.pathComponents) {\n  833: 				encodedComponents.add(pathComponent.encode(charset));\n  834  			}\n  835: 			return new PathComponentComposite(encodedComponents);\n  836  		}\n  837  \n  838  		@Override\n  839  		public void verify() {\n  840: 			for (PathComponent pathComponent : this.pathComponents) {\n  841: 				pathComponent.verify();\n  842  			}\n  843  		}\n  844  \n  845  		@Override\n  846: 		public PathComponent expand(UriTemplateVariables uriVariables) {\n  847: 			List<PathComponent> expandedComponents = new ArrayList<>(this.pathComponents.size());\n  848: 			for (PathComponent pathComponent : this.pathComponents) {\n  849: 				expandedComponents.add(pathComponent.expand(uriVariables));\n  850  			}\n  851: 			return new PathComponentComposite(expandedComponents);\n  852  		}\n  853  \n  854  		@Override\n  855: 		public void copyToUriComponentsBuilder(UriComponentsBuilder builder) {\n  856: 			for (PathComponent pathComponent : this.pathComponents) {\n  857: 				pathComponent.copyToUriComponentsBuilder(builder);\n  858  			}\n  859  		}\n  ...\n  864  	 * Represents an empty path.\n  865  	 */\n  866: 	static final PathComponent NULL_PATH_COMPONENT = new PathComponent() {\n  867  		@Override\n  868  		public String getPath() {\n  ...\n  874  		}\n  875  		@Override\n  876: 		public PathComponent encode(Charset charset) throws UnsupportedEncodingException {\n  877  			return this;\n  878  		}\n  ...\n  881  		}\n  882  		@Override\n  883: 		public PathComponent expand(UriTemplateVariables uriVariables) {\n  884  			return this;\n  885  		}\n  886  		@Override\n  887: 		public void copyToUriComponentsBuilder(UriComponentsBuilder builder) {\n  888  		}\n  889  		@Override\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\util\\OpaqueUriComponents.java:\n   29  \n   30  /**\n   31:  * Extension of {@link UriComponents} for opaque URIs.\n   32   *\n   33   * @author Arjen Poutsma\n   ..\n   37   */\n   38  @SuppressWarnings(\"serial\")\n   39: final class OpaqueUriComponents extends UriComponents {\n   40  \n   41  	private static final MultiValueMap<String, String> QUERY_PARAMS_NONE = new LinkedMultiValueMap<>(0);\n   ..\n   44  \n   45  \n   46: 	OpaqueUriComponents(String scheme, String schemeSpecificPart, String fragment) {\n   47  		super(scheme, fragment);\n   48  		this.ssp = schemeSpecificPart;\n   ..\n   91  \n   92  	@Override\n   93: 	public UriComponents encode(Charset charset) throws UnsupportedEncodingException {\n   94  		return this;\n   95  	}\n   96  \n   97  	@Override\n   98: 	protected UriComponents expandInternal(UriTemplateVariables uriVariables) {\n   99: 		String expandedScheme = expandUriComponent(getScheme(), uriVariables);\n  100: 		String expandedSsp = expandUriComponent(getSchemeSpecificPart(), uriVariables);\n  101: 		String expandedFragment = expandUriComponent(getFragment(), uriVariables);\n  102: 		return new OpaqueUriComponents(expandedScheme, expandedSsp, expandedFragment);\n  103  	}\n  104  \n  105  	@Override\n  106: 	public UriComponents normalize() {\n  107  		return this;\n  108  	}\n  ...\n  138  \n  139  	@Override\n  140: 	protected void copyToUriComponentsBuilder(UriComponentsBuilder builder) {\n  141  		builder.scheme(getScheme());\n  142  		builder.schemeSpecificPart(getSchemeSpecificPart());\n  ...\n  150  			return true;\n  151  		}\n  152: 		if (!(obj instanceof OpaqueUriComponents)) {\n  153  			return false;\n  154  		}\n  155  \n  156: 		OpaqueUriComponents other = (OpaqueUriComponents) obj;\n  157  		return ObjectUtils.nullSafeEquals(getScheme(), other.getScheme()) &&\n  158  				ObjectUtils.nullSafeEquals(this.ssp, other.ssp) &&\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\util\\UriComponents.java:\n   33  \n   34  /**\n   35:  * Represents an immutable collection of URI components, mapping component type to\n   36:  * String values. Contains convenience getters for all components. Effectively similar\n   37   * to {@link java.net.URI}, but with more powerful encoding options and support for\n   38   * URI template variables.\n   ..\n   40   * @author Arjen Poutsma\n   41   * @since 3.1\n   42:  * @see UriComponentsBuilder\n   43   */\n   44  @SuppressWarnings(\"serial\")\n   45: public abstract class UriComponents implements Serializable {\n   46  \n   47  	/** Captures URI template variable names. */\n   ..\n   54  \n   55  \n   56: 	protected UriComponents(String scheme, String fragment) {\n   57  		this.scheme = scheme;\n   58  		this.fragment = fragment;\n   ..\n   60  \n   61  \n   62: 	// component getters\n   63  \n   64  	/**\n   ..\n  118  \n  119  	/**\n  120: 	 * Encode all URI components using their specific encoding rules, and returns the\n  121: 	 * result as a new {@code UriComponents} instance. This method uses UTF-8 to encode.\n  122: 	 * @return the encoded URI components\n  123  	 */\n  124: 	public final UriComponents encode() {\n  125  		try {\n  126  			return encode(StandardCharsets.UTF_8);\n  ...\n  133  \n  134  	/**\n  135: 	 * Encode all URI components using their specific encoding rules, and\n  136: 	 * returns the result as a new {@code UriComponents} instance.\n  137  	 * @param charset the encoding of the values contained in this map\n  138: 	 * @return the encoded URI components\n  139  	 * @throws UnsupportedEncodingException if the given encoding is not supported\n  140  	 */\n  141: 	public abstract UriComponents encode(Charset charset) throws UnsupportedEncodingException;\n  142  \n  143  	/**\n  ...\n  146  	 * represent variable values. The order of variables is not significant.\n  147  	 * @param uriVariables the map of URI variables\n  148: 	 * @return the expanded URI components\n  149  	 */\n  150: 	public final UriComponents expand(Map<String, ?> uriVariables) {\n  151  		Assert.notNull(uriVariables, \"'uriVariables' must not be null\");\n  152  		return expandInternal(new MapTemplateVariables(uriVariables));\n  ...\n  157  	 * <p>The given array represents variable values. The order of variables is significant.\n  158  	 * @param uriVariableValues the URI variable values\n  159: 	 * @return the expanded URI components\n  160  	 */\n  161: 	public final UriComponents expand(Object... uriVariableValues) {\n  162  		Assert.notNull(uriVariableValues, \"'uriVariableValues' must not be null\");\n  163  		return expandInternal(new VarArgsTemplateVariables(uriVariableValues));\n  ...\n  168  	 * {@link UriTemplateVariables}.\n  169  	 * @param uriVariables the URI template values\n  170: 	 * @return the expanded URI components\n  171  	 */\n  172: 	public final UriComponents expand(UriTemplateVariables uriVariables) {\n  173  		Assert.notNull(uriVariables, \"'uriVariables' must not be null\");\n  174  		return expandInternal(uriVariables);\n  ...\n  179  	 * UriTemplateVariables}\n  180  	 * @param uriVariables URI template values\n  181: 	 * @return the expanded uri components\n  182  	 */\n  183: 	abstract UriComponents expandInternal(UriTemplateVariables uriVariables);\n  184  \n  185  	/**\n  ...\n  187  	 * @see org.springframework.util.StringUtils#cleanPath(String)\n  188  	 */\n  189: 	public abstract UriComponents normalize();\n  190  \n  191  	/**\n  192: 	 * Return a URI string from this {@code UriComponents} instance.\n  193  	 */\n  194  	public abstract String toUriString();\n  195  \n  196  	/**\n  197: 	 * Return a {@code URI} from this {@code UriComponents} instance.\n  198  	 */\n  199  	public abstract URI toUri();\n  ...\n  205  \n  206  	/**\n  207: 	 * Set all components of the given UriComponentsBuilder.\n  208  	 * @since 4.2\n  209  	 */\n  210: 	protected abstract void copyToUriComponentsBuilder(UriComponentsBuilder builder);\n  211  \n  212  \n  213  	// static expansion helpers\n  214  \n  215: 	static String expandUriComponent(String source, UriTemplateVariables uriVariables) {\n  216  		if (source == null) {\n  217  			return null;\n  ...\n  273  	/**\n  274  	 * Defines the contract for URI Template variables\n  275: 	 * @see HierarchicalUriComponents#expand\n  276  	 */\n  277  	public interface UriTemplateVariables {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\util\\UriComponentsBuilder.java:\n   32  import org.springframework.util.ObjectUtils;\n   33  import org.springframework.util.StringUtils;\n   34: import org.springframework.web.util.HierarchicalUriComponents.PathComponent;\n   35  \n   36  /**\n   37:  * Builder for {@link UriComponents}.\n   38   *\n   39   * <p>Typical usage involves:\n   40   * <ol>\n   41:  * <li>Create a {@code UriComponentsBuilder} with one of the static factory methods\n   42   * (such as {@link #fromPath(String)} or {@link #fromUri(URI)})</li>\n   43:  * <li>Set the various URI components through the respective methods ({@link #scheme(String)},\n   44   * {@link #userInfo(String)}, {@link #host(String)}, {@link #port(int)}, {@link #path(String)},\n   45   * {@link #pathSegment(String...)}, {@link #queryParam(String, Object...)}, and\n   46   * {@link #fragment(String)}.</li>\n   47:  * <li>Build the {@link UriComponents} instance with the {@link #build()} method.</li>\n   48   * </ol>\n   49   *\n   ..\n   57   * @see #fromUri(URI)\n   58   */\n   59: public class UriComponentsBuilder implements Cloneable {\n   60  \n   61  	private static final Pattern QUERY_PARAM_PATTERN = Pattern.compile(\"([^&=]+)(=?)([^&]+)?\");\n   ..\n  105  	private String port;\n  106  \n  107: 	private CompositePathComponentBuilder pathBuilder;\n  108  \n  109  	private final MultiValueMap<String, String> queryParams = new LinkedMultiValueMap<>();\n  ...\n  118  	 * @see #fromUri(URI)\n  119  	 */\n  120: 	protected UriComponentsBuilder() {\n  121: 		this.pathBuilder = new CompositePathComponentBuilder();\n  122  	}\n  123  \n  124  	/**\n  125: 	 * Create a deep copy of the given UriComponentsBuilder.\n  126  	 * @param other the other builder to copy from\n  127  	 * @since 4.1.3\n  128  	 */\n  129: 	protected UriComponentsBuilder(UriComponentsBuilder other) {\n  130  		this.scheme = other.scheme;\n  131  		this.ssp = other.ssp;\n  ...\n  143  	/**\n  144  	 * Create a new, empty builder.\n  145: 	 * @return the new {@code UriComponentsBuilder}\n  146  	 */\n  147: 	public static UriComponentsBuilder newInstance() {\n  148: 		return new UriComponentsBuilder();\n  149  	}\n  150  \n  ...\n  152  	 * Create a builder that is initialized with the given path.\n  153  	 * @param path the path to initialize with\n  154: 	 * @return the new {@code UriComponentsBuilder}\n  155  	 */\n  156: 	public static UriComponentsBuilder fromPath(String path) {\n  157: 		UriComponentsBuilder builder = new UriComponentsBuilder();\n  158  		builder.path(path);\n  159  		return builder;\n  ...\n  163  	 * Create a builder that is initialized with the given {@code URI}.\n  164  	 * @param uri the URI to initialize with\n  165: 	 * @return the new {@code UriComponentsBuilder}\n  166  	 */\n  167: 	public static UriComponentsBuilder fromUri(URI uri) {\n  168: 		UriComponentsBuilder builder = new UriComponentsBuilder();\n  169  		builder.uri(uri);\n  170  		return builder;\n  ...\n  180  	 * <pre class=\"code\">\n  181  	 * String uriString = &quot;/hotels/42?filter={value}&quot;;\n  182: 	 * UriComponentsBuilder.fromUriString(uriString).buildAndExpand(&quot;hot&amp;cold&quot;);\n  183  	 * </pre>\n  184  	 * @param uri the URI string to initialize with\n  185: 	 * @return the new {@code UriComponentsBuilder}\n  186  	 */\n  187: 	public static UriComponentsBuilder fromUriString(String uri) {\n  188  		Assert.notNull(uri, \"URI must not be null\");\n  189  		Matcher matcher = URI_PATTERN.matcher(uri);\n  190  		if (matcher.matches()) {\n  191: 			UriComponentsBuilder builder = new UriComponentsBuilder();\n  192  			String scheme = matcher.group(2);\n  193  			String userInfo = matcher.group(5);\n  ...\n  232  \n  233  	/**\n  234: 	 * Create a URI components builder from the given HTTP URL String.\n  235  	 * <p><strong>Note:</strong> The presence of reserved characters can prevent\n  236  	 * correct parsing of the URI string. For example if a query parameter\n  ...\n  240  	 * <pre class=\"code\">\n  241  	 * String uriString = &quot;/hotels/42?filter={value}&quot;;\n  242: 	 * UriComponentsBuilder.fromUriString(uriString).buildAndExpand(&quot;hot&amp;cold&quot;);\n  243  	 * </pre>\n  244  	 * @param httpUrl the source URI\n  245: 	 * @return the URI components of the URI\n  246  	 */\n  247: 	public static UriComponentsBuilder fromHttpUrl(String httpUrl) {\n  248  		Assert.notNull(httpUrl, \"HTTP URL must not be null\");\n  249  		Matcher matcher = HTTP_URL_PATTERN.matcher(httpUrl);\n  250  		if (matcher.matches()) {\n  251: 			UriComponentsBuilder builder = new UriComponentsBuilder();\n  252  			String scheme = matcher.group(1);\n  253  			builder.scheme(scheme != null ? scheme.toLowerCase() : null);\n  ...\n  272  \n  273  	/**\n  274: 	 * Create a new {@code UriComponents} object from the URI associated with\n  275  	 * the given HttpRequest while also overlaying with values from the headers\n  276  	 * \"Forwarded\" (<a href=\"http://tools.ietf.org/html/rfc7239\">RFC 7239</a>,\n  ...\n  278  	 * \"Forwarded\" is not found.\n  279  	 * @param request the source request\n  280: 	 * @return the URI components of the URI\n  281  	 * @since 4.1.5\n  282  	 */\n  283: 	public static UriComponentsBuilder fromHttpRequest(HttpRequest request) {\n  284  		return fromUri(request.getURI()).adaptFromForwardedHeaders(request.getHeaders());\n  285  	}\n  ...\n  289  	 * @see <a href=\"https://tools.ietf.org/html/rfc6454\">RFC 6454</a>\n  290  	 */\n  291: 	public static UriComponentsBuilder fromOriginHeader(String origin) {\n  292  		Matcher matcher = URI_PATTERN.matcher(origin);\n  293  		if (matcher.matches()) {\n  294: 			UriComponentsBuilder builder = new UriComponentsBuilder();\n  295  			String scheme = matcher.group(2);\n  296  			String host = matcher.group(6);\n  ...\n  314  \n  315  	/**\n  316: 	 * Build a {@code UriComponents} instance from the various components contained in this builder.\n  317: 	 * @return the URI components\n  318  	 */\n  319: 	public UriComponents build() {\n  320  		return build(false);\n  321  	}\n  322  \n  323  	/**\n  324: 	 * Build a {@code UriComponents} instance from the various components\n  325  	 * contained in this builder.\n  326: 	 * @param encoded whether all the components set in this builder are\n  327  	 * encoded ({@code true}) or not ({@code false})\n  328: 	 * @return the URI components\n  329  	 */\n  330: 	public UriComponents build(boolean encoded) {\n  331  		if (this.ssp != null) {\n  332: 			return new OpaqueUriComponents(this.scheme, this.ssp, this.fragment);\n  333  		}\n  334  		else {\n  335: 			return new HierarchicalUriComponents(this.scheme, this.userInfo, this.host, this.port,\n  336  					this.pathBuilder.build(), this.queryParams, this.fragment, encoded, true);\n  337  		}\n  ...\n  339  \n  340  	/**\n  341: 	 * Build a {@code UriComponents} instance and replaces URI template variables\n  342  	 * with the values from a map. This is a shortcut method which combines\n  343: 	 * calls to {@link #build()} and then {@link UriComponents#expand(Map)}.\n  344  	 * @param uriVariables the map of URI variables\n  345: 	 * @return the URI components with expanded values\n  346  	 */\n  347: 	public UriComponents buildAndExpand(Map<String, ?> uriVariables) {\n  348  		return build(false).expand(uriVariables);\n  349  	}\n  350  \n  351  	/**\n  352: 	 * Build a {@code UriComponents} instance and replaces URI template variables\n  353  	 * with the values from an array. This is a shortcut method which combines\n  354: 	 * calls to {@link #build()} and then {@link UriComponents#expand(Object...)}.\n  355  	 * @param uriVariableValues URI variable values\n  356: 	 * @return the URI components with expanded values\n  357  	 */\n  358: 	public UriComponents buildAndExpand(Object... uriVariableValues) {\n  359  		return build(false).expand(uriVariableValues);\n  360  	}\n  ...\n  362  	/**\n  363  	 * Build a URI String. This is a shortcut method which combines calls\n  364: 	 * to {@link #build()}, then {@link UriComponents#encode()} and finally\n  365: 	 * {@link UriComponents#toUriString()}.\n  366  	 * @since 4.1\n  367: 	 * @see UriComponents#toUriString()\n  368  	 */\n  369  	public String toUriString() {\n  ...\n  372  \n  373  \n  374: 	// URI components methods\n  375  \n  376  	/**\n  377: 	 * Initialize all components of this URI builder with the components of the given URI.\n  378  	 * @param uri the URI\n  379: 	 * @return this UriComponentsBuilder\n  380  	 */\n  381: 	public UriComponentsBuilder uri(URI uri) {\n  382  		Assert.notNull(uri, \"URI must not be null\");\n  383  		this.scheme = uri.getScheme();\n  384  		if (uri.isOpaque()) {\n  385  			this.ssp = uri.getRawSchemeSpecificPart();\n  386: 			resetHierarchicalComponents();\n  387  		}\n  388  		else {\n  ...\n  397  			}\n  398  			if (StringUtils.hasLength(uri.getRawPath())) {\n  399: 				this.pathBuilder = new CompositePathComponentBuilder(uri.getRawPath());\n  400  			}\n  401  			if (StringUtils.hasLength(uri.getRawQuery())) {\n  ...\n  415  	 * and may also be {@code null} to clear the scheme of this builder.\n  416  	 * @param scheme the URI scheme\n  417: 	 * @return this UriComponentsBuilder\n  418  	 */\n  419: 	public UriComponentsBuilder scheme(String scheme) {\n  420  		this.scheme = scheme;\n  421  		return this;\n  ...\n  423  \n  424  	/**\n  425: 	 * Set all components of this URI builder from the given {@link UriComponents}.\n  426: 	 * @param uriComponents the UriComponents instance\n  427: 	 * @return this UriComponentsBuilder\n  428  	 */\n  429: 	public UriComponentsBuilder uriComponents(UriComponents uriComponents) {\n  430: 		Assert.notNull(uriComponents, \"UriComponents must not be null\");\n  431: 		uriComponents.copyToUriComponentsBuilder(this);\n  432  		return this;\n  433  	}\n  ...\n  439  	 * {@link #query(String) query}.\n  440  	 * @param ssp the URI scheme-specific-part, may contain URI template parameters\n  441: 	 * @return this UriComponentsBuilder\n  442  	 */\n  443: 	public UriComponentsBuilder schemeSpecificPart(String ssp) {\n  444  		this.ssp = ssp;\n  445: 		resetHierarchicalComponents();\n  446  		return this;\n  447  	}\n  ...\n  451  	 * and may also be {@code null} to clear the user info of this builder.\n  452  	 * @param userInfo the URI user info\n  453: 	 * @return this UriComponentsBuilder\n  454  	 */\n  455: 	public UriComponentsBuilder userInfo(String userInfo) {\n  456  		this.userInfo = userInfo;\n  457  		resetSchemeSpecificPart();\n  ...\n  463  	 * and may also be {@code null} to clear the host of this builder.\n  464  	 * @param host the URI host\n  465: 	 * @return this UriComponentsBuilder\n  466  	 */\n  467: 	public UriComponentsBuilder host(String host) {\n  468  		this.host = host;\n  469  		resetSchemeSpecificPart();\n  ...\n  474  	 * Set the URI port. Passing {@code -1} will clear the port of this builder.\n  475  	 * @param port the URI port\n  476: 	 * @return this UriComponentsBuilder\n  477  	 */\n  478: 	public UriComponentsBuilder port(int port) {\n  479  		Assert.isTrue(port >= -1, \"Port must be >= -1\");\n  480  		this.port = String.valueOf(port);\n  ...\n  488  	 * Passing {@code null} will clear the port of this builder.\n  489  	 * @param port the URI port\n  490: 	 * @return this UriComponentsBuilder\n  491  	 */\n  492: 	public UriComponentsBuilder port(String port) {\n  493  		this.port = port;\n  494  		resetSchemeSpecificPart();\n  ...\n  500  	 * The given path may contain URI template variables.\n  501  	 * @param path the URI path\n  502: 	 * @return this UriComponentsBuilder\n  503  	 */\n  504: 	public UriComponentsBuilder path(String path) {\n  505  		this.pathBuilder.addPath(path);\n  506  		resetSchemeSpecificPart();\n  ...\n  511  	 * Set the path of this builder overriding all existing path and path segment values.\n  512  	 * @param path the URI path; a {@code null} value results in an empty path.\n  513: 	 * @return this UriComponentsBuilder\n  514  	 */\n  515: 	public UriComponentsBuilder replacePath(String path) {\n  516: 		this.pathBuilder = new CompositePathComponentBuilder(path);\n  517  		resetSchemeSpecificPart();\n  518  		return this;\n  ...\n  524  	 * Use {@code path(\"/\")} subsequently to ensure a trailing slash.\n  525  	 * @param pathSegments the URI path segments\n  526: 	 * @return this UriComponentsBuilder\n  527  	 */\n  528: 	public UriComponentsBuilder pathSegment(String... pathSegments) throws IllegalArgumentException {\n  529  		this.pathBuilder.addPathSegments(pathSegments);\n  530  		resetSchemeSpecificPart();\n  ...\n  541  	 * variables to enable correct parsing:\n  542  	 * <pre class=\"code\">\n  543: 	 * UriComponentsBuilder.fromUriString(&quot;/hotels/42&quot;)\n  544  	 * 	.query(&quot;filter={value}&quot;)\n  545  	 * 	.buildAndExpand(&quot;hot&amp;cold&quot;);\n  546  	 * </pre>\n  547  	 * @param query the query string\n  548: 	 * @return this UriComponentsBuilder\n  549  	 */\n  550: 	public UriComponentsBuilder query(String query) {\n  551  		if (query != null) {\n  552  			Matcher matcher = QUERY_PARAM_PATTERN.matcher(query);\n  ...\n  568  	 * Set the query of this builder overriding all existing query parameters.\n  569  	 * @param query the query string; a {@code null} value removes all query parameters.\n  570: 	 * @return this UriComponentsBuilder\n  571  	 */\n  572: 	public UriComponentsBuilder replaceQuery(String query) {\n  573  		this.queryParams.clear();\n  574  		query(query);\n  ...\n  584  	 * @param name the query parameter name\n  585  	 * @param values the query parameter values\n  586: 	 * @return this UriComponentsBuilder\n  587  	 */\n  588: 	public UriComponentsBuilder queryParam(String name, Object... values) {\n  589  		Assert.notNull(name, \"Name must not be null\");\n  590  		if (!ObjectUtils.isEmpty(values)) {\n  ...\n  604  	 * Add the given query parameters.\n  605  	 * @param params the params\n  606: 	 * @return this UriComponentsBuilder\n  607  	 * @since 4.0\n  608  	 */\n  609: 	public UriComponentsBuilder queryParams(MultiValueMap<String, String> params) {\n  610  		if (params != null) {\n  611  			this.queryParams.putAll(params);\n  ...\n  619  	 * @param name the query parameter name\n  620  	 * @param values the query parameter values\n  621: 	 * @return this UriComponentsBuilder\n  622  	 */\n  623: 	public UriComponentsBuilder replaceQueryParam(String name, Object... values) {\n  624  		Assert.notNull(name, \"Name must not be null\");\n  625  		this.queryParams.remove(name);\n  ...\n  634  	 * Set the query parameter values overriding all existing query values.\n  635  	 * @param params the query parameter name\n  636: 	 * @return this UriComponentsBuilder\n  637  	 * @since 4.2\n  638  	 */\n  639: 	public UriComponentsBuilder replaceQueryParams(MultiValueMap<String, String> params) {\n  640  		this.queryParams.clear();\n  641  		if (params != null) {\n  ...\n  649  	 * and may also be {@code null} to clear the fragment of this builder.\n  650  	 * @param fragment the URI fragment\n  651: 	 * @return this UriComponentsBuilder\n  652  	 */\n  653: 	public UriComponentsBuilder fragment(String fragment) {\n  654  		if (fragment != null) {\n  655  			Assert.hasLength(fragment, \"Fragment must not be empty\");\n  ...\n  668  	 * \"Forwarded\" is not found.\n  669  	 * @param headers the HTTP headers to consider\n  670: 	 * @return this UriComponentsBuilder\n  671  	 * @since 4.2.7\n  672  	 */\n  673: 	UriComponentsBuilder adaptFromForwardedHeaders(HttpHeaders headers) {\n  674  		String forwardedHeader = headers.getFirst(\"Forwarded\");\n  675  		if (StringUtils.hasText(forwardedHeader)) {\n  ...\n  718  	}\n  719  \n  720: 	private void resetHierarchicalComponents() {\n  721  		this.userInfo = null;\n  722  		this.host = null;\n  723  		this.port = null;\n  724: 		this.pathBuilder = new CompositePathComponentBuilder();\n  725  		this.queryParams.clear();\n  726  	}\n  ...\n  742  \n  743  	/**\n  744: 	 * Clone this {@code UriComponentsBuilder}.\n  745: 	 * @return the cloned {@code UriComponentsBuilder} object\n  746  	 * @since 4.2.7\n  747  	 */\n  748: 	public UriComponentsBuilder cloneBuilder() {\n  749: 		return new UriComponentsBuilder(this);\n  750  	}\n  751  \n  752  \n  753: 	private interface PathComponentBuilder {\n  754  \n  755: 		PathComponent build();\n  756  \n  757: 		PathComponentBuilder cloneBuilder();\n  758  	}\n  759  \n  760  \n  761: 	private static class CompositePathComponentBuilder implements PathComponentBuilder {\n  762  \n  763: 		private final LinkedList<PathComponentBuilder> builders = new LinkedList<>();\n  764  \n  765: 		public CompositePathComponentBuilder() {\n  766  		}\n  767  \n  768: 		public CompositePathComponentBuilder(String path) {\n  769  			addPath(path);\n  770  		}\n  ...\n  772  		public void addPathSegments(String... pathSegments) {\n  773  			if (!ObjectUtils.isEmpty(pathSegments)) {\n  774: 				PathSegmentComponentBuilder psBuilder = getLastBuilder(PathSegmentComponentBuilder.class);\n  775: 				FullPathComponentBuilder fpBuilder = getLastBuilder(FullPathComponentBuilder.class);\n  776  				if (psBuilder == null) {\n  777: 					psBuilder = new PathSegmentComponentBuilder();\n  778  					this.builders.add(psBuilder);\n  779  					if (fpBuilder != null) {\n  ...\n  787  		public void addPath(String path) {\n  788  			if (StringUtils.hasText(path)) {\n  789: 				PathSegmentComponentBuilder psBuilder = getLastBuilder(PathSegmentComponentBuilder.class);\n  790: 				FullPathComponentBuilder fpBuilder = getLastBuilder(FullPathComponentBuilder.class);\n  791  				if (psBuilder != null) {\n  792  					path = path.startsWith(\"/\") ? path : \"/\" + path;\n  793  				}\n  794  				if (fpBuilder == null) {\n  795: 					fpBuilder = new FullPathComponentBuilder();\n  796  					this.builders.add(fpBuilder);\n  797  				}\n  ...\n  803  		private <T> T getLastBuilder(Class<T> builderClass) {\n  804  			if (!this.builders.isEmpty()) {\n  805: 				PathComponentBuilder last = this.builders.getLast();\n  806  				if (builderClass.isInstance(last)) {\n  807  					return (T) last;\n  ...\n  812  \n  813  		@Override\n  814: 		public PathComponent build() {\n  815  			int size = this.builders.size();\n  816: 			List<PathComponent> components = new ArrayList<>(size);\n  817: 			for (PathComponentBuilder componentBuilder : this.builders) {\n  818: 				PathComponent pathComponent = componentBuilder.build();\n  819: 				if (pathComponent != null) {\n  820: 					components.add(pathComponent);\n  821  				}\n  822  			}\n  823: 			if (components.isEmpty()) {\n  824: 				return HierarchicalUriComponents.NULL_PATH_COMPONENT;\n  825  			}\n  826: 			if (components.size() == 1) {\n  827: 				return components.get(0);\n  828  			}\n  829: 			return new HierarchicalUriComponents.PathComponentComposite(components);\n  830  		}\n  831  \n  832  		@Override\n  833: 		public CompositePathComponentBuilder cloneBuilder() {\n  834: 			CompositePathComponentBuilder compositeBuilder = new CompositePathComponentBuilder();\n  835: 			for (PathComponentBuilder builder : this.builders) {\n  836  				compositeBuilder.builders.add(builder.cloneBuilder());\n  837  			}\n  ...\n  841  \n  842  \n  843: 	private static class FullPathComponentBuilder implements PathComponentBuilder {\n  844  \n  845  		private final StringBuilder path = new StringBuilder();\n  ...\n  850  \n  851  		@Override\n  852: 		public PathComponent build() {\n  853  			if (this.path.length() == 0) {\n  854  				return null;\n  ...\n  862  				path = path.substring(0, index) + path.substring(index + 1);\n  863  			}\n  864: 			return new HierarchicalUriComponents.FullPathComponent(path);\n  865  		}\n  866  \n  ...\n  873  \n  874  		@Override\n  875: 		public FullPathComponentBuilder cloneBuilder() {\n  876: 			FullPathComponentBuilder builder = new FullPathComponentBuilder();\n  877  			builder.append(this.path.toString());\n  878  			return builder;\n  ...\n  881  \n  882  \n  883: 	private static class PathSegmentComponentBuilder implements PathComponentBuilder {\n  884  \n  885  		private final List<String> pathSegments = new LinkedList<>();\n  ...\n  894  \n  895  		@Override\n  896: 		public PathComponent build() {\n  897  			return (this.pathSegments.isEmpty() ? null :\n  898: 					new HierarchicalUriComponents.PathSegmentComponent(this.pathSegments));\n  899  		}\n  900  \n  901  		@Override\n  902: 		public PathSegmentComponentBuilder cloneBuilder() {\n  903: 			PathSegmentComponentBuilder builder = new PathSegmentComponentBuilder();\n  904  			builder.pathSegments.addAll(this.pathSegments);\n  905  			return builder;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\util\\UriTemplate.java:\n   45  public class UriTemplate implements Serializable {\n   46  \n   47: 	private final UriComponents uriComponents;\n   48  \n   49  	private final List<String> variableNames;\n   ..\n   61  		Assert.hasText(uriTemplate, \"'uriTemplate' must not be null\");\n   62  		this.uriTemplate = uriTemplate;\n   63: 		this.uriComponents = UriComponentsBuilder.fromUriString(uriTemplate).build();\n   64  \n   65  		TemplateInfo info = TemplateInfo.parse(uriTemplate);\n   ..\n   95  	 */\n   96  	public URI expand(Map<String, ?> uriVariables) {\n   97: 		UriComponents expandedComponents = this.uriComponents.expand(uriVariables);\n   98: 		UriComponents encodedComponents = expandedComponents.encode();\n   99: 		return encodedComponents.toUri();\n  100  	}\n  101  \n  ...\n  115       */\n  116  	public URI expand(Object... uriVariableValues) {\n  117: 		UriComponents expandedComponents = this.uriComponents.expand(uriVariableValues);\n  118: 		UriComponents encodedComponents = expandedComponents.encode();\n  119: 		return encodedComponents.toUri();\n  120  	}\n  121  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\util\\UriTemplateHandler.java:\n   27   * <p>Supported as a property on the {@code RestTemplate} as well as the\n   28   * {@code AsyncRestTemplate}. The {@link DefaultUriTemplateHandler} is built\n   29:  * on Spring's URI template support via {@link UriComponentsBuilder}. An\n   30   * alternative implementation may be used to plug external URI template libraries.\n   31   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\util\\UriUtils.java:\n   24  /**\n   25   * Utility class for URI encoding and decoding based on RFC 3986.\n   26:  * Offers encoding methods for the various URI components.\n   27   *\n   28   * <p>All {@code encode*(String, String)} methods in this class operate in a similar way:\n   29   * <ul>\n   30:  * <li>Valid characters for the specific URI component as defined in RFC 3986 stay the same.</li>\n   31   * <li>All other characters are converted into one or more bytes in the given encoding scheme.\n   32   * Each of the resulting bytes is written as a hexadecimal string in the \"<code>%<i>xy</i></code>\"\n   ..\n   49  	 */\n   50  	public static String encodeScheme(String scheme, String encoding) throws UnsupportedEncodingException {\n   51: 		return HierarchicalUriComponents.encodeUriComponent(scheme, encoding, HierarchicalUriComponents.Type.SCHEME);\n   52  	}\n   53  \n   ..\n   60  	 */\n   61  	public static String encodeAuthority(String authority, String encoding) throws UnsupportedEncodingException {\n   62: 		return HierarchicalUriComponents.encodeUriComponent(authority, encoding, HierarchicalUriComponents.Type.AUTHORITY);\n   63  	}\n   64  \n   ..\n   71  	 */\n   72  	public static String encodeUserInfo(String userInfo, String encoding) throws UnsupportedEncodingException {\n   73: 		return HierarchicalUriComponents.encodeUriComponent(userInfo, encoding, HierarchicalUriComponents.Type.USER_INFO);\n   74  	}\n   75  \n   ..\n   82  	 */\n   83  	public static String encodeHost(String host, String encoding) throws UnsupportedEncodingException {\n   84: 		return HierarchicalUriComponents.encodeUriComponent(host, encoding, HierarchicalUriComponents.Type.HOST_IPV4);\n   85  	}\n   86  \n   ..\n   93  	 */\n   94  	public static String encodePort(String port, String encoding) throws UnsupportedEncodingException {\n   95: 		return HierarchicalUriComponents.encodeUriComponent(port, encoding, HierarchicalUriComponents.Type.PORT);\n   96  	}\n   97  \n   ..\n  104  	 */\n  105  	public static String encodePath(String path, String encoding) throws UnsupportedEncodingException {\n  106: 		return HierarchicalUriComponents.encodeUriComponent(path, encoding, HierarchicalUriComponents.Type.PATH);\n  107  	}\n  108  \n  ...\n  115  	 */\n  116  	public static String encodePathSegment(String segment, String encoding) throws UnsupportedEncodingException {\n  117: 		return HierarchicalUriComponents.encodeUriComponent(segment, encoding, HierarchicalUriComponents.Type.PATH_SEGMENT);\n  118  	}\n  119  \n  ...\n  126  	 */\n  127  	public static String encodeQuery(String query, String encoding) throws UnsupportedEncodingException {\n  128: 		return HierarchicalUriComponents.encodeUriComponent(query, encoding, HierarchicalUriComponents.Type.QUERY);\n  129  	}\n  130  \n  ...\n  137  	 */\n  138  	public static String encodeQueryParam(String queryParam, String encoding) throws UnsupportedEncodingException {\n  139: 		return HierarchicalUriComponents.encodeUriComponent(queryParam, encoding, HierarchicalUriComponents.Type.QUERY_PARAM);\n  140  	}\n  141  \n  ...\n  148  	 */\n  149  	public static String encodeFragment(String fragment, String encoding) throws UnsupportedEncodingException {\n  150: 		return HierarchicalUriComponents.encodeUriComponent(fragment, encoding, HierarchicalUriComponents.Type.FRAGMENT);\n  151  	}\n  152  \n  ...\n  155  	 * <a href=\"https://tools.ietf.org/html/rfc3986#section-2\">RFC 3986 Section 2</a>.\n  156  	 * <p>This can be used to ensure the given String will not contain any\n  157: 	 * characters with reserved URI meaning regardless of URI component.\n  158  	 * @param source the string to be encoded\n  159  	 * @param encoding the character encoding to encode to\n  ...\n  162  	 */\n  163  	public static String encode(String source, String encoding) throws UnsupportedEncodingException {\n  164: 		HierarchicalUriComponents.Type type = HierarchicalUriComponents.Type.URI;\n  165: 		return HierarchicalUriComponents.encodeUriComponent(source, encoding, type);\n  166  	}\n  167  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\util\\WebUtils.java:\n  683  			return true;\n  684  		}\n  685: 		UriComponentsBuilder urlBuilder;\n  686  		if (request instanceof ServletServerHttpRequest) {\n  687  			// Build more efficiently if we can: we only need scheme, host, port for origin comparison\n  688  			HttpServletRequest servletRequest = ((ServletServerHttpRequest) request).getServletRequest();\n  689: 			urlBuilder = new UriComponentsBuilder().\n  690  					scheme(servletRequest.getScheme()).\n  691  					host(servletRequest.getServerName()).\n  ...\n  694  		}\n  695  		else {\n  696: 			urlBuilder = UriComponentsBuilder.fromHttpRequest(request);\n  697  		}\n  698: 		UriComponents actualUrl = urlBuilder.build();\n  699: 		UriComponents originUrl = UriComponentsBuilder.fromOriginHeader(origin).build();\n  700  		return (actualUrl.getHost().equals(originUrl.getHost()) && getPort(actualUrl) == getPort(originUrl));\n  701  	}\n  702  \n  703: 	private static int getPort(UriComponents uri) {\n  704  		int port = uri.getPort();\n  705  		if (port == -1) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\main\\java\\org\\springframework\\web\\WebApplicationInitializer.java:\n   86   * injecting them into the {@code DispatcherServlet}.\n   87   *\n   88:  * <p>Most major Spring Web components have been updated to support this style of\n   89   * registration.  You'll find that {@code DispatcherServlet}, {@code FrameworkServlet},\n   90   * {@code ContextLoaderListener} and {@code DelegatingFilterProxy} all now support\n   91:  * constructor arguments. Even if a component (e.g. non-Spring, other third party) has not\n   92   * been specifically updated for use within {@code WebApplicationInitializers}, they still\n   93   * may be used in any case. The Servlet 3.0 {@code ServletContext} API allows for setting\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\test\\java\\org\\springframework\\http\\client\\BufferingClientHttpRequestFactoryTests.java:\n   32  	@Override\n   33  	protected ClientHttpRequestFactory createRequestFactory() {\n   34: 		return new BufferingClientHttpRequestFactory(new HttpComponentsClientHttpRequestFactory());\n   35  	}\n   36  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\test\\java\\org\\springframework\\http\\client\\HttpComponentsAsyncClientHttpRequestFactoryTests.java:\n   33   * @author Stephane Nicoll\n   34   */\n   35: public class HttpComponentsAsyncClientHttpRequestFactoryTests extends AbstractAsyncHttpRequestFactoryTestCase {\n   36  \n   37  	@Override\n   38  	protected AsyncClientHttpRequestFactory createRequestFactory() {\n   39: 		return new HttpComponentsAsyncClientHttpRequestFactory();\n   40  	}\n   41  \n   ..\n   50  	@Test\n   51  	public void customHttpAsyncClientUsesItsDefault() throws Exception {\n   52: 		HttpComponentsAsyncClientHttpRequestFactory factory =\n   53: 				new HttpComponentsAsyncClientHttpRequestFactory();\n   54  \n   55  		URI uri = new URI(baseUrl + \"/status/ok\");\n   56: 		HttpComponentsAsyncClientHttpRequest request = (HttpComponentsAsyncClientHttpRequest)\n   57  				factory.createAsyncRequest(uri, HttpMethod.GET);\n   58  \n   ..\n   66  				.setDefaultRequestConfig(RequestConfig.custom().setConnectTimeout(1234).build())\n   67  				.build();\n   68: 		HttpComponentsAsyncClientHttpRequestFactory factory = new HttpComponentsAsyncClientHttpRequestFactory(client);\n   69  \n   70  		URI uri = new URI(baseUrl + \"/status/ok\");\n   71: 		HttpComponentsAsyncClientHttpRequest request = (HttpComponentsAsyncClientHttpRequest)\n   72  				factory.createAsyncRequest(uri, HttpMethod.GET);\n   73  \n   ..\n   76  \n   77  		factory.setConnectionRequestTimeout(4567);\n   78: 		HttpComponentsAsyncClientHttpRequest request2 = (HttpComponentsAsyncClientHttpRequest)\n   79  				factory.createAsyncRequest(uri, HttpMethod.GET);\n   80  		Object requestConfigAttribute = request2.getHttpContext().getAttribute(HttpClientContext.REQUEST_CONFIG);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\test\\java\\org\\springframework\\http\\client\\HttpComponentsClientHttpRequestFactoryTests.java:\n   36   * @author Stephane Nicoll\n   37   */\n   38: public class HttpComponentsClientHttpRequestFactoryTests extends AbstractHttpRequestFactoryTestCase {\n   39  \n   40  	@Override\n   41  	protected ClientHttpRequestFactory createRequestFactory() {\n   42: 		return new HttpComponentsClientHttpRequestFactory();\n   43  	}\n   44  \n   ..\n   53  	public void assertCustomConfig() throws Exception {\n   54  		HttpClient httpClient = HttpClientBuilder.create().build();\n   55: 		HttpComponentsClientHttpRequestFactory hrf = new HttpComponentsClientHttpRequestFactory(httpClient);\n   56  		hrf.setConnectTimeout(1234);\n   57  		hrf.setConnectionRequestTimeout(4321);\n   ..\n   59  \n   60  		URI uri = new URI(baseUrl + \"/status/ok\");\n   61: 		HttpComponentsClientHttpRequest request = (HttpComponentsClientHttpRequest)\n   62  				hrf.createRequest(uri, HttpMethod.GET);\n   63  \n   ..\n   80  		when(configurable.getConfig()).thenReturn(defaultConfig);\n   81  \n   82: 		HttpComponentsClientHttpRequestFactory hrf = new HttpComponentsClientHttpRequestFactory(client);\n   83  		assertSame(\"Default client configuration is expected\", defaultConfig, retrieveRequestConfig(hrf));\n   84  \n   ..\n  100  		when(configurable.getConfig()).thenReturn(defaultConfig);\n  101  \n  102: 		HttpComponentsClientHttpRequestFactory hrf = new HttpComponentsClientHttpRequestFactory(client);\n  103  		hrf.setConnectTimeout(5000);\n  104  \n  ...\n  118  		when(configurable.getConfig()).thenReturn(defaultConfig);\n  119  \n  120: 		HttpComponentsClientHttpRequestFactory hrf = new HttpComponentsClientHttpRequestFactory() {\n  121  			@Override\n  122  			public HttpClient getHttpClient() {\n  ...\n  142  	}\n  143  \n  144: 	private RequestConfig retrieveRequestConfig(HttpComponentsClientHttpRequestFactory factory) throws Exception {\n  145  		URI uri = new URI(baseUrl + \"/status/ok\");\n  146: 		HttpComponentsClientHttpRequest request = (HttpComponentsClientHttpRequest)\n  147  				factory.createRequest(uri, HttpMethod.GET);\n  148  		return (RequestConfig) request.getHttpContext().getAttribute(HttpClientContext.REQUEST_CONFIG);\n  ...\n  164  \n  165  	private void testRequestBodyAllowed(URI uri, HttpMethod method, boolean allowed) {\n  166: 		HttpUriRequest request = ((HttpComponentsClientHttpRequestFactory) this.factory).createHttpUriRequest(method, uri);\n  167  		assertEquals(allowed, request instanceof HttpEntityEnclosingRequest);\n  168  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\test\\java\\org\\springframework\\http\\client\\StreamingHttpComponentsClientHttpRequestFactoryTests.java:\n   21  import org.springframework.http.HttpMethod;\n   22  \n   23: public class StreamingHttpComponentsClientHttpRequestFactoryTests\n   24  		extends AbstractHttpRequestFactoryTestCase {\n   25  \n   26  	@Override\n   27  	protected ClientHttpRequestFactory createRequestFactory() {\n   28: 		HttpComponentsClientHttpRequestFactory requestFactory =\n   29: 				new HttpComponentsClientHttpRequestFactory();\n   30  		requestFactory.setBufferRequestBody(false);\n   31  		return requestFactory;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\test\\java\\org\\springframework\\mock\\web\\test\\MockServletContext.java:\n   66   *\n   67   * <p>Used for testing the Spring web framework; only rarely necessary for testing\n   68:  * application controllers. As long as application components don't explicitly\n   69   * access the {@code ServletContext}, {@code ClassPathXmlApplicationContext} or\n   70   * {@code FileSystemXmlApplicationContext} can be used to load the context files\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\test\\java\\org\\springframework\\remoting\\httpinvoker\\HttpComponentsHttpInvokerRequestExecutorTests.java:\n   33   * @author Stephane Nicoll\n   34   */\n   35: public class HttpComponentsHttpInvokerRequestExecutorTests {\n   36  \n   37  	@Test\n   38  	public void customizeConnectionTimeout() throws IOException {\n   39: 		HttpComponentsHttpInvokerRequestExecutor executor = new HttpComponentsHttpInvokerRequestExecutor();\n   40  		executor.setConnectTimeout(5000);\n   41  \n   ..\n   47  	@Test\n   48  	public void customizeConnectionRequestTimeout() throws IOException {\n   49: 		HttpComponentsHttpInvokerRequestExecutor executor = new HttpComponentsHttpInvokerRequestExecutor();\n   50  		executor.setConnectionRequestTimeout(7000);\n   51  \n   ..\n   57  	@Test\n   58  	public void customizeReadTimeout() throws IOException {\n   59: 		HttpComponentsHttpInvokerRequestExecutor executor = new HttpComponentsHttpInvokerRequestExecutor();\n   60  		executor.setReadTimeout(10000);\n   61  \n   ..\n   73  		when(configurable.getConfig()).thenReturn(defaultConfig);\n   74  \n   75: 		HttpComponentsHttpInvokerRequestExecutor executor =\n   76: 				new HttpComponentsHttpInvokerRequestExecutor(client);\n   77  		HttpInvokerClientConfiguration config = mockHttpInvokerClientConfiguration(\"http://fake-service\");\n   78  		HttpPost httpPost = executor.createHttpPost(config);\n   ..\n   96  		when(configurable.getConfig()).thenReturn(defaultConfig);\n   97  \n   98: 		HttpComponentsHttpInvokerRequestExecutor executor =\n   99: 				new HttpComponentsHttpInvokerRequestExecutor(client);\n  100  		executor.setConnectTimeout(5000);\n  101  \n  ...\n  117  		when(configurable.getConfig()).thenReturn(defaultConfig);\n  118  \n  119: 		HttpComponentsHttpInvokerRequestExecutor executor =\n  120: 				new HttpComponentsHttpInvokerRequestExecutor() {\n  121  					@Override\n  122  					public HttpClient getHttpClient() {\n  ...\n  147  	public void ignoreFactorySettings() throws IOException {\n  148  		CloseableHttpClient httpClient = HttpClientBuilder.create().build();\n  149: 		HttpComponentsHttpInvokerRequestExecutor executor = new HttpComponentsHttpInvokerRequestExecutor(httpClient) {\n  150  			@Override\n  151  			protected RequestConfig createRequestConfig(HttpInvokerClientConfiguration config) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\test\\java\\org\\springframework\\remoting\\httpinvoker\\HttpInvokerFactoryBeanIntegrationTests.java:\n   25  import org.springframework.context.annotation.AnnotationConfigApplicationContext;\n   26  import org.springframework.context.annotation.Bean;\n   27: import org.springframework.context.annotation.ComponentScan;\n   28  import org.springframework.context.annotation.Configuration;\n   29  import org.springframework.context.annotation.Lazy;\n   ..\n   33  import org.springframework.scheduling.annotation.Async;\n   34  import org.springframework.scheduling.annotation.AsyncAnnotationBeanPostProcessor;\n   35: import org.springframework.stereotype.Component;\n   36  \n   37  import static org.junit.Assert.*;\n   ..\n   86  \n   87  \n   88: 	@Component(\"myBean\")\n   89  	public static class MyBean {\n   90  \n   ..\n   95  \n   96  	@Configuration\n   97: 	@ComponentScan\n   98  	@Lazy\n   99  	public static class InvokerAutowiringConfig {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\test\\java\\org\\springframework\\web\\bind\\support\\WebRequestDataBinderIntegrationTests.java:\n   39  import org.springframework.core.io.Resource;\n   40  import org.springframework.http.MediaType;\n   41: import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n   42  import org.springframework.util.LinkedMultiValueMap;\n   43  import org.springframework.util.MultiValueMap;\n   ..\n   59  	private static final PartListServlet partListServlet = new PartListServlet();\n   60  \n   61: 	private final RestTemplate template = new RestTemplate(new HttpComponentsClientHttpRequestFactory());\n   62  \n   63  	protected static String baseUrl;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\test\\java\\org\\springframework\\web\\client\\AsyncRestTemplateIntegrationTests.java:\n   44  import org.springframework.http.client.AsyncClientHttpRequestInterceptor;\n   45  import org.springframework.http.client.ClientHttpResponse;\n   46: import org.springframework.http.client.HttpComponentsAsyncClientHttpRequestFactory;\n   47  import org.springframework.http.client.support.HttpRequestWrapper;\n   48  import org.springframework.util.LinkedMultiValueMap;\n   ..\n   60  \n   61  	private final AsyncRestTemplate template = new AsyncRestTemplate(\n   62: 			new HttpComponentsAsyncClientHttpRequestFactory());\n   63  \n   64  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\test\\java\\org\\springframework\\web\\client\\RestTemplateIntegrationTests.java:\n   41  import org.springframework.http.RequestEntity;\n   42  import org.springframework.http.ResponseEntity;\n   43: import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n   44  import org.springframework.http.converter.json.MappingJacksonValue;\n   45  import org.springframework.util.LinkedMultiValueMap;\n   ..\n   53  public class RestTemplateIntegrationTests extends AbstractJettyServerTestCase {\n   54  \n   55: 	private final RestTemplate template = new RestTemplate(new HttpComponentsClientHttpRequestFactory());\n   56  \n   57  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\test\\java\\org\\springframework\\web\\jsf\\MockFacesContext.java:\n   21  import javax.faces.application.FacesMessage;\n   22  import javax.faces.application.FacesMessage.Severity;\n   23: import javax.faces.component.UIViewRoot;\n   24  import javax.faces.context.ExternalContext;\n   25  import javax.faces.context.FacesContext;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\test\\java\\org\\springframework\\web\\method\\support\\CompositeUriComponentsContributorTests.java:\n   34  /**\n   35   * Unit tests for\n   36:  * {@link org.springframework.web.method.support.CompositeUriComponentsContributor}.\n   37   *\n   38   * @author Rossen Stoyanchev\n   39   */\n   40: public class CompositeUriComponentsContributorTests {\n   41  \n   42  \n   ..\n   51  		Method method = ClassUtils.getMethod(this.getClass(), \"handleRequest\", String.class, String.class, String.class);\n   52  \n   53: 		CompositeUriComponentsContributor contributor = new CompositeUriComponentsContributor(resolvers);\n   54  		assertTrue(contributor.supportsParameter(new MethodParameter(method, 0)));\n   55  		assertTrue(contributor.supportsParameter(new MethodParameter(method, 1)));\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\test\\java\\org\\springframework\\web\\util\\UriComponentsBuilderTests.java:\n   37  \n   38  /**\n   39:  * Unit tests for {@link org.springframework.web.util.UriComponentsBuilder}.\n   40   *\n   41   * @author Arjen Poutsma\n   ..\n   45   * @author Sam Brannen\n   46   */\n   47: public class UriComponentsBuilderTests {\n   48  \n   49  	@Test\n   50  	public void plain() throws URISyntaxException {\n   51: 		UriComponentsBuilder builder = UriComponentsBuilder.newInstance();\n   52: 		UriComponents result = builder.scheme(\"http\").host(\"example.com\").path(\"foo\").queryParam(\"bar\").fragment(\"baz\").build();\n   53  		assertEquals(\"http\", result.getScheme());\n   54  		assertEquals(\"example.com\", result.getHost());\n   ..\n   63  	@Test\n   64  	public void multipleFromSameBuilder() throws URISyntaxException {\n   65: 		UriComponentsBuilder builder = UriComponentsBuilder.newInstance().scheme(\"http\").host(\"example.com\").pathSegment(\"foo\");\n   66: 		UriComponents result1 = builder.build();\n   67  		builder = builder.pathSegment(\"foo2\").queryParam(\"bar\").fragment(\"baz\");\n   68: 		UriComponents result2 = builder.build();\n   69  \n   70  		assertEquals(\"http\", result1.getScheme());\n   ..\n   85  	@Test\n   86  	public void fromPath() throws URISyntaxException {\n   87: 		UriComponents result = UriComponentsBuilder.fromPath(\"foo\").queryParam(\"bar\").fragment(\"baz\").build();\n   88  		assertEquals(\"foo\", result.getPath());\n   89  		assertEquals(\"bar\", result.getQuery());\n   ..\n   95  		assertEquals(\"Invalid result URI\", expected, result.toUri());\n   96  \n   97: 		result = UriComponentsBuilder.fromPath(\"/foo\").build();\n   98  		assertEquals(\"/foo\", result.getPath());\n   99  \n  ...\n  105  	public void fromHierarchicalUri() throws URISyntaxException {\n  106  		URI uri = new URI(\"http://example.com/foo?bar#baz\");\n  107: 		UriComponents result = UriComponentsBuilder.fromUri(uri).build();\n  108  		assertEquals(\"http\", result.getScheme());\n  109  		assertEquals(\"example.com\", result.getHost());\n  ...\n  118  	public void fromOpaqueUri() throws URISyntaxException {\n  119  		URI uri = new URI(\"mailto:foo@bar.com#baz\");\n  120: 		UriComponents result = UriComponentsBuilder.fromUri(uri).build();\n  121  		assertEquals(\"mailto\", result.getScheme());\n  122  		assertEquals(\"foo@bar.com\", result.getSchemeSpecificPart());\n  ...\n  131  	public void fromUriEncodedQuery() throws URISyntaxException {\n  132  		URI uri = new URI(\"http://www.example.org/?param=aGVsbG9Xb3JsZA%3D%3D\");\n  133: 		String fromUri = UriComponentsBuilder.fromUri(uri).build().getQueryParams().get(\"param\").get(0);\n  134: 		String fromUriString = UriComponentsBuilder.fromUriString(uri.toString()).build().getQueryParams().get(\"param\").get(0);\n  135  \n  136  		assertEquals(fromUri, fromUriString);\n  ...\n  139  	@Test\n  140  	public void fromUriString() {\n  141: 		UriComponents result = UriComponentsBuilder.fromUriString(\"http://www.ietf.org/rfc/rfc3986.txt\").build();\n  142  		assertEquals(\"http\", result.getScheme());\n  143  		assertNull(result.getUserInfo());\n  ...\n  149  		assertNull(result.getFragment());\n  150  \n  151: 		result = UriComponentsBuilder.fromUriString(\n  152  				\"http://arjen:foobar@java.sun.com:80/javase/6/docs/api/java/util/BitSet.html?foo=bar#and(java.util.BitSet)\")\n  153  				.build();\n  ...\n  163  		assertEquals(\"and(java.util.BitSet)\", result.getFragment());\n  164  \n  165: 		result = UriComponentsBuilder.fromUriString(\"mailto:java-net@java.sun.com#baz\").build();\n  166  		assertEquals(\"mailto\", result.getScheme());\n  167  		assertNull(result.getUserInfo());\n  ...\n  173  		assertEquals(\"baz\", result.getFragment());\n  174  \n  175: 		result = UriComponentsBuilder.fromUriString(\"docs/guide/collections/designfaq.html#28\").build();\n  176  		assertNull(result.getScheme());\n  177  		assertNull(result.getUserInfo());\n  ...\n  188  	public void fromUriStringQueryParamWithReservedCharInValue() throws URISyntaxException {\n  189  		String uri = \"http://www.google.com/ig/calculator?q=1USD=?EUR\";\n  190: 		UriComponents result = UriComponentsBuilder.fromUriString(uri).build();\n  191  \n  192  		assertEquals(\"q=1USD=?EUR\", result.getQuery());\n  ...\n  198  	@Test\n  199  	public void fromHttpUrlStringCaseInsesitiveScheme() {\n  200: 		assertEquals(\"http\", UriComponentsBuilder.fromHttpUrl(\"HTTP://www.google.com\").build().getScheme());\n  201: 		assertEquals(\"https\", UriComponentsBuilder.fromHttpUrl(\"HTTPS://www.google.com\").build().getScheme());\n  202  	}\n  203  \n  ...\n  206  	@Test(expected = IllegalArgumentException.class)\n  207  	public void fromHttpUrlStringInvalidIPv6Host() throws URISyntaxException {\n  208: 		UriComponentsBuilder.fromHttpUrl(\"http://[1abc:2abc:3abc::5ABC:6abc:8080/resource\").build().encode();\n  209  	}\n  210  \n  ...\n  213  	@Test\n  214  	public void fromUriStringIPv6Host() throws URISyntaxException {\n  215: 	    UriComponents result = UriComponentsBuilder\n  216  	            .fromUriString(\"http://[1abc:2abc:3abc::5ABC:6abc]:8080/resource\").build().encode();\n  217  	    assertEquals(\"[1abc:2abc:3abc::5ABC:6abc]\", result.getHost());\n  218  \n  219: 	    UriComponents resultWithScopeId = UriComponentsBuilder\n  220  	            .fromUriString(\"http://[1abc:2abc:3abc::5ABC:6abc%eth0]:8080/resource\").build().encode();\n  221  		assertEquals(\"[1abc:2abc:3abc::5ABC:6abc%25eth0]\", resultWithScopeId.getHost());\n  222  \n  223: 	    UriComponents resultIPv4compatible = UriComponentsBuilder\n  224  			    .fromUriString(\"http://[::192.168.1.1]:8080/resource\").build().encode();\n  225  		assertEquals(\"[::192.168.1.1]\", resultIPv4compatible.getHost());\n  ...\n  230  	@Test\n  231  	public void fromUriStringNoPathWithReservedCharInQuery() {\n  232: 		UriComponents result = UriComponentsBuilder.fromUriString(\"http://example.com?foo=bar@baz\").build();\n  233  		assertTrue(StringUtils.isEmpty(result.getUserInfo()));\n  234  		assertEquals(\"example.com\", result.getHost());\n  ...\n  246  		request.setQueryString(\"a=1\");\n  247  \n  248: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(new ServletServerHttpRequest(request)).build();\n  249  		assertEquals(\"http\", result.getScheme());\n  250  		assertEquals(\"localhost\", result.getHost());\n  ...\n  268  \n  269  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  270: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  271  \n  272  		assertEquals(\"https\", result.getScheme());\n  ...\n  286  \n  287  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  288: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  289  \n  290  		assertEquals(\"http://anotherHost/mvc-showcase\", result.toString());\n  ...\n  303  \n  304  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  305: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  306  \n  307  		assertEquals(\"webtest.foo.bar.com\", result.getHost());\n  ...\n  320  \n  321  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  322: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  323  \n  324  		assertEquals(\"a.example.org\", result.getHost());\n  ...\n  338  \n  339  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  340: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  341  \n  342  		assertEquals(\"foobarhost\", result.getHost());\n  ...\n  355  \n  356  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  357: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  358  \n  359  		assertEquals(\"example.org\", result.getHost());\n  ...\n  372  \n  373  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  374: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  375  \n  376  		assertEquals(\"example.org\", result.getHost());\n  ...\n  393  \n  394  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  395: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  396  \n  397  		assertEquals(\"https://84.198.58.199/mvc-showcase\", result.toString());\n  ...\n  411  \n  412  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  413: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  414  \n  415  		assertEquals(\"http://a.example.org/mvc-showcase\", result.toString());\n  ...\n  430  \n  431  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  432: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  433  \n  434  		assertEquals(\"https://a.example.org/mvc-showcase\", result.toString());\n  ...\n  439  	@Test\n  440  	public void fromHttpRequestWithTrailingSlash() throws Exception {\n  441: 		UriComponents before = UriComponentsBuilder.fromPath(\"/foo/\").build();\n  442: 		UriComponents after = UriComponentsBuilder.newInstance().uriComponents(before).build();\n  443  		assertEquals(\"/foo/\", after.getPath());\n  444  	}\n  ...\n  446  	@Test\n  447  	public void path() throws URISyntaxException {\n  448: 		UriComponentsBuilder builder = UriComponentsBuilder.fromPath(\"/foo/bar\");\n  449: 		UriComponents result = builder.build();\n  450  \n  451  		assertEquals(\"/foo/bar\", result.getPath());\n  ...\n  455  	@Test\n  456  	public void pathSegments() throws URISyntaxException {\n  457: 		UriComponentsBuilder builder = UriComponentsBuilder.newInstance();\n  458: 		UriComponents result = builder.pathSegment(\"foo\").pathSegment(\"bar\").build();\n  459  \n  460  		assertEquals(\"/foo/bar\", result.getPath());\n  ...\n  464  	@Test\n  465  	public void pathThenPath() {\n  466: 		UriComponentsBuilder builder = UriComponentsBuilder.fromPath(\"/foo/bar\").path(\"ba/z\");\n  467: 		UriComponents result = builder.build().encode();\n  468  \n  469  		assertEquals(\"/foo/barba/z\", result.getPath());\n  ...\n  473  	@Test\n  474  	public void pathThenPathSegments() {\n  475: 		UriComponentsBuilder builder = UriComponentsBuilder.fromPath(\"/foo/bar\").pathSegment(\"ba/z\");\n  476: 		UriComponents result = builder.build().encode();\n  477  \n  478  		assertEquals(\"/foo/bar/ba%2Fz\", result.getPath());\n  ...\n  482  	@Test\n  483  	public void pathSegmentsThenPathSegments() {\n  484: 		UriComponentsBuilder builder = UriComponentsBuilder.newInstance().pathSegment(\"foo\").pathSegment(\"bar\");\n  485: 		UriComponents result = builder.build();\n  486  \n  487  		assertEquals(\"/foo/bar\", result.getPath());\n  ...\n  491  	@Test\n  492  	public void pathSegmentsThenPath() {\n  493: 		UriComponentsBuilder builder = UriComponentsBuilder.newInstance().pathSegment(\"foo\").path(\"/\");\n  494: 		UriComponents result = builder.build();\n  495  \n  496  		assertEquals(\"/foo/\", result.getPath());\n  ...\n  500  	@Test\n  501  	public void pathSegmentsSomeEmpty() {\n  502: 		UriComponentsBuilder builder = UriComponentsBuilder.newInstance().pathSegment(\"\", \"foo\", \"\", \"bar\");\n  503: 		UriComponents result = builder.build();\n  504  \n  505  		assertEquals(\"/foo/bar\", result.getPath());\n  ...\n  511  	@Test\n  512  	public void pathWithDuplicateSlashes() throws URISyntaxException {\n  513: 		UriComponents uriComponents = UriComponentsBuilder.fromPath(\"/foo/////////bar\").build();\n  514: 		assertEquals(\"/foo/bar\", uriComponents.getPath());\n  515  	}\n  516  \n  517  	@Test\n  518  	public void replacePath() {\n  519: 		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(\"http://www.ietf.org/rfc/rfc2396.txt\");\n  520  		builder.replacePath(\"/rfc/rfc3986.txt\");\n  521: 		UriComponents result = builder.build();\n  522  \n  523  		assertEquals(\"http://www.ietf.org/rfc/rfc3986.txt\", result.toUriString());\n  524  \n  525: 		builder = UriComponentsBuilder.fromUriString(\"http://www.ietf.org/rfc/rfc2396.txt\");\n  526  		builder.replacePath(null);\n  527  		result = builder.build();\n  ...\n  532  	@Test\n  533  	public void replaceQuery() {\n  534: 		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(\"http://example.com/foo?foo=bar&baz=qux\");\n  535  		builder.replaceQuery(\"baz=42\");\n  536: 		UriComponents result = builder.build();\n  537  \n  538  		assertEquals(\"http://example.com/foo?baz=42\", result.toUriString());\n  539  \n  540: 		builder = UriComponentsBuilder.fromUriString(\"http://example.com/foo?foo=bar&baz=qux\");\n  541  		builder.replaceQuery(null);\n  542  		result = builder.build();\n  ...\n  547  	@Test\n  548  	public void queryParams() throws URISyntaxException {\n  549: 		UriComponentsBuilder builder = UriComponentsBuilder.newInstance();\n  550: 		UriComponents result = builder.queryParam(\"baz\", \"qux\", 42).build();\n  551  \n  552  		assertEquals(\"baz=qux&baz=42\", result.getQuery());\n  ...\n  559  	@Test\n  560  	public void emptyQueryParam() throws URISyntaxException {\n  561: 		UriComponentsBuilder builder = UriComponentsBuilder.newInstance();\n  562: 		UriComponents result = builder.queryParam(\"baz\").build();\n  563  \n  564  		assertEquals(\"baz\", result.getQuery());\n  ...\n  570  	@Test\n  571  	public void replaceQueryParam() {\n  572: 		UriComponentsBuilder builder = UriComponentsBuilder.newInstance().queryParam(\"baz\", \"qux\", 42);\n  573  		builder.replaceQueryParam(\"baz\", \"xuq\", 24);\n  574: 		UriComponents result = builder.build();\n  575  \n  576  		assertEquals(\"baz=xuq&baz=24\", result.getQuery());\n  577  \n  578: 		builder = UriComponentsBuilder.newInstance().queryParam(\"baz\", \"qux\", 42);\n  579  		builder.replaceQueryParam(\"baz\");\n  580  		result = builder.build();\n  ...\n  585  	@Test\n  586  	public void buildAndExpandHierarchical() {\n  587: 		UriComponents result = UriComponentsBuilder.fromPath(\"/{foo}\").buildAndExpand(\"fooValue\");\n  588  		assertEquals(\"/fooValue\", result.toUriString());\n  589  \n  ...\n  591  		values.put(\"foo\", \"fooValue\");\n  592  		values.put(\"bar\", \"barValue\");\n  593: 		result = UriComponentsBuilder.fromPath(\"/{foo}/{bar}\").buildAndExpand(values);\n  594  		assertEquals(\"/fooValue/barValue\", result.toUriString());\n  595  	}\n  ...\n  597  	@Test\n  598  	public void buildAndExpandOpaque() {\n  599: 		UriComponents result = UriComponentsBuilder.fromUriString(\"mailto:{user}@{domain}\").buildAndExpand(\"foo\", \"example.com\");\n  600  		assertEquals(\"mailto:foo@example.com\", result.toUriString());\n  601  \n  ...\n  603  		values.put(\"user\", \"foo\");\n  604  		values.put(\"domain\", \"example.com\");\n  605: 		UriComponentsBuilder.fromUriString(\"mailto:{user}@{domain}\").buildAndExpand(values);\n  606  		assertEquals(\"mailto:foo@example.com\", result.toUriString());\n  607  	}\n  ...\n  609  	@Test\n  610  	public void queryParamWithValueWithEquals() throws Exception {\n  611: 		UriComponents uriComponents = UriComponentsBuilder.fromUriString(\"http://example.com/foo?bar=baz\").build();\n  612: 		assertThat(uriComponents.toUriString(), equalTo(\"http://example.com/foo?bar=baz\"));\n  613: 		assertThat(uriComponents.getQueryParams().get(\"bar\").get(0), equalTo(\"baz\"));\n  614  	}\n  615  \n  616  	@Test\n  617  	public void queryParamWithoutValueWithEquals() throws Exception {\n  618: 		UriComponents uriComponents = UriComponentsBuilder.fromUriString(\"http://example.com/foo?bar=\").build();\n  619: 		assertThat(uriComponents.toUriString(), equalTo(\"http://example.com/foo?bar=\"));\n  620: 		assertThat(uriComponents.getQueryParams().get(\"bar\").get(0), equalTo(\"\"));\n  621  	}\n  622  \n  623  	@Test\n  624  	public void queryParamWithoutValueWithoutEquals() throws Exception {\n  625: 		UriComponents uriComponents = UriComponentsBuilder.fromUriString(\"http://example.com/foo?bar\").build();\n  626: 		assertThat(uriComponents.toUriString(), equalTo(\"http://example.com/foo?bar\"));\n  627  \n  628  		// TODO [SPR-13537] Change equalTo(null) to equalTo(\"\").\n  629: 		assertThat(uriComponents.getQueryParams().get(\"bar\").get(0), equalTo(null));\n  630  	}\n  631  \n  632  	@Test\n  633  	public void relativeUrls() throws Exception {\n  634: 		assertThat(UriComponentsBuilder.fromUriString(\"http://example.com/foo/../bar\").build().toString(), equalTo(\"http://example.com/foo/../bar\"));\n  635: 		assertThat(UriComponentsBuilder.fromUriString(\"http://example.com/foo/../bar\").build().toUriString(), equalTo(\"http://example.com/foo/../bar\"));\n  636: 		assertThat(UriComponentsBuilder.fromUriString(\"http://example.com/foo/../bar\").build().toUri().getPath(), equalTo(\"/foo/../bar\"));\n  637: 		assertThat(UriComponentsBuilder.fromUriString(\"../../\").build().toString(), equalTo(\"../../\"));\n  638: 		assertThat(UriComponentsBuilder.fromUriString(\"../../\").build().toUriString(), equalTo(\"../../\"));\n  639: 		assertThat(UriComponentsBuilder.fromUriString(\"../../\").build().toUri().getPath(), equalTo(\"../../\"));\n  640: 		assertThat(UriComponentsBuilder.fromUriString(\"http://example.com\").path(\"foo/../bar\").build().toString(), equalTo(\"http://example.com/foo/../bar\"));\n  641: 		assertThat(UriComponentsBuilder.fromUriString(\"http://example.com\").path(\"foo/../bar\").build().toUriString(), equalTo(\"http://example.com/foo/../bar\"));\n  642: 		assertThat(UriComponentsBuilder.fromUriString(\"http://example.com\").path(\"foo/../bar\").build().toUri().getPath(), equalTo(\"/foo/../bar\"));\n  643  	}\n  644  \n  645  	@Test\n  646  	public void emptySegments() throws Exception {\n  647: 		assertThat(UriComponentsBuilder.fromUriString(\"http://example.com/abc/\").path(\"/x/y/z\").build().toString(), equalTo(\"http://example.com/abc/x/y/z\"));\n  648: 	    assertThat(UriComponentsBuilder.fromUriString(\"http://example.com/abc/\").pathSegment(\"x\", \"y\", \"z\").build().toString(), equalTo(\"http://example.com/abc/x/y/z\"));\n  649: 		assertThat(UriComponentsBuilder.fromUriString(\"http://example.com/abc/\").path(\"/x/\").path(\"/y/z\").build().toString(), equalTo(\"http://example.com/abc/x/y/z\"));\n  650: 		assertThat(UriComponentsBuilder.fromUriString(\"http://example.com/abc/\").pathSegment(\"x\").path(\"y\").build().toString(), equalTo(\"http://example.com/abc/x/y\"));\n  651  	}\n  652  \n  653  	@Test\n  654  	public void parsesEmptyFragment() {\n  655: 		UriComponents components = UriComponentsBuilder.fromUriString(\"/example#\").build();\n  656: 		assertThat(components.getFragment(), is(nullValue()));\n  657: 		assertThat(components.toString(), equalTo(\"/example\"));\n  658  	}\n  659  \n  660  	@Test  // SPR-13257\n  661  	public void parsesEmptyUri() {\n  662: 		UriComponents components = UriComponentsBuilder.fromUriString(\"\").build();\n  663: 		assertThat(components.toString(), equalTo(\"\"));\n  664  	}\n  665  \n  666  	@Test\n  667  	public void testClone() throws URISyntaxException {\n  668: 		UriComponentsBuilder builder1 = UriComponentsBuilder.newInstance();\n  669  		builder1.scheme(\"http\").host(\"e1.com\").path(\"/p1\").pathSegment(\"ps1\").queryParam(\"q1\").fragment(\"f1\");\n  670  \n  671: 		UriComponentsBuilder builder2 = (UriComponentsBuilder) builder1.clone();\n  672  		builder2.scheme(\"https\").host(\"e2.com\").path(\"p2\").pathSegment(\"ps2\").queryParam(\"q2\").fragment(\"f2\");\n  673  \n  674: 		UriComponents result1 = builder1.build();\n  675  		assertEquals(\"http\", result1.getScheme());\n  676  		assertEquals(\"e1.com\", result1.getHost());\n  ...\n  679  		assertEquals(\"f1\", result1.getFragment());\n  680  \n  681: 		UriComponents result2 = builder2.build();\n  682  		assertEquals(\"https\", result2.getScheme());\n  683  		assertEquals(\"e2.com\", result2.getHost());\n  ...\n  698  \n  699  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  700: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  701  \n  702  		assertEquals(\"https\", result.getScheme());\n  ...\n  714  \n  715  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  716: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  717  \n  718  		assertEquals(\"https\", result.getScheme());\n  ...\n  731  \n  732  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  733: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  734  \n  735  		assertEquals(\"https\", result.getScheme());\n  ...\n  747  \n  748  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  749: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  750  \n  751  		assertEquals(\"https\", result.getScheme());\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-web\\src\\test\\java\\org\\springframework\\web\\util\\UriComponentsTests.java:\n   33  import static org.junit.Assert.assertEquals;\n   34  import static org.junit.Assert.assertThat;\n   35: import static org.springframework.web.util.UriComponentsBuilder.fromUriString;\n   36  \n   37  /**\n   ..\n   39   * @author Phillip Webb\n   40   */\n   41: public class UriComponentsTests {\n   42  \n   43  	@Test\n   44  	public void encode() {\n   45: 		UriComponents uriComponents = UriComponentsBuilder.fromPath(\"/hotel list\").build();\n   46: 		UriComponents encoded = uriComponents.encode();\n   47  		assertEquals(\"/hotel%20list\", encoded.getPath());\n   48  	}\n   ..\n   50  	@Test\n   51  	public void toUriEncoded() throws URISyntaxException {\n   52: 		UriComponents uriComponents = UriComponentsBuilder.fromUriString(\n   53  				\"http://example.com/hotel list/Z\\u00fcrich\").build();\n   54: 		assertEquals(new URI(\"http://example.com/hotel%20list/Z%C3%BCrich\"), uriComponents.encode().toUri());\n   55  	}\n   56  \n   57  	@Test\n   58  	public void toUriNotEncoded() throws URISyntaxException {\n   59: 		UriComponents uriComponents = UriComponentsBuilder.fromUriString(\n   60  				\"http://example.com/hotel list/Z\\u00fcrich\").build();\n   61: 		assertEquals(new URI(\"http://example.com/hotel%20list/Z\\u00fcrich\"), uriComponents.toUri());\n   62  	}\n   63  \n   64  	@Test\n   65  	public void toUriAlreadyEncoded() throws URISyntaxException {\n   66: 		UriComponents uriComponents = UriComponentsBuilder.fromUriString(\n   67  				\"http://example.com/hotel%20list/Z%C3%BCrich\").build(true);\n   68: 		UriComponents encoded = uriComponents.encode();\n   69  		assertEquals(new URI(\"http://example.com/hotel%20list/Z%C3%BCrich\"), encoded.toUri());\n   70  	}\n   ..\n   72  	@Test\n   73  	public void toUriWithIpv6HostAlreadyEncoded() throws URISyntaxException {\n   74: 		UriComponents uriComponents = UriComponentsBuilder.fromUriString(\n   75  				\"http://[1abc:2abc:3abc::5ABC:6abc]:8080/hotel%20list/Z%C3%BCrich\").build(true);\n   76: 		UriComponents encoded = uriComponents.encode();\n   77  		assertEquals(new URI(\"http://[1abc:2abc:3abc::5ABC:6abc]:8080/hotel%20list/Z%C3%BCrich\"), encoded.toUri());\n   78  	}\n   ..\n   80  	@Test\n   81  	public void expand() {\n   82: 		UriComponents uriComponents = UriComponentsBuilder.fromUriString(\n   83  				\"http://example.com\").path(\"/{foo} {bar}\").build();\n   84: 		uriComponents = uriComponents.expand(\"1 2\", \"3 4\");\n   85: 		assertEquals(\"/1 2 3 4\", uriComponents.getPath());\n   86: 		assertEquals(\"http://example.com/1 2 3 4\", uriComponents.toUriString());\n   87  	}\n   88  \n   ..\n   92  	public void expandWithRegexVar() {\n   93  		String template = \"/myurl/{name:[a-z]{1,5}}/show\";\n   94: 		UriComponents uriComponents = UriComponentsBuilder.fromUriString(template).build();\n   95: 		uriComponents = uriComponents.expand(Collections.singletonMap(\"name\", \"test\"));\n   96: 		assertEquals(\"/myurl/test/show\", uriComponents.getPath());\n   97  	}\n   98  \n   ..\n  101  	@Test\n  102  	public void port() {\n  103: 		UriComponents uri1 = fromUriString(\"http://example.com:8080/bar\").build();\n  104: 		UriComponents uri2 = fromUriString(\"http://example.com/bar\").port(8080).build();\n  105: 		UriComponents uri3 = fromUriString(\"http://example.com/bar\").port(\"{port}\").build().expand(8080);\n  106: 		UriComponents uri4 = fromUriString(\"http://example.com/bar\").port(\"808{digit}\").build().expand(0);\n  107  		assertEquals(8080, uri1.getPort());\n  108  		assertEquals(\"http://example.com:8080/bar\", uri1.toUriString());\n  ...\n  117  	@Test(expected = IllegalStateException.class)\n  118  	public void expandEncoded() {\n  119: 		UriComponentsBuilder.fromPath(\"/{foo}\").build().encode().expand(\"bar\");\n  120  	}\n  121  \n  122  	@Test(expected = IllegalArgumentException.class)\n  123  	public void invalidCharacters() {\n  124: 		UriComponentsBuilder.fromPath(\"/{foo}\").build(true);\n  125  	}\n  126  \n  127  	@Test(expected = IllegalArgumentException.class)\n  128  	public void invalidEncodedSequence() {\n  129: 		UriComponentsBuilder.fromPath(\"/fo%2o\").build(true);\n  130  	}\n  131  \n  132  	@Test\n  133  	public void normalize() {\n  134: 		UriComponents uriComponents = UriComponentsBuilder.fromUriString(\"http://example.com/foo/../bar\").build();\n  135: 		assertEquals(\"http://example.com/bar\", uriComponents.normalize().toString());\n  136  	}\n  137  \n  138  	@Test\n  139  	public void serializable() throws Exception {\n  140: 		UriComponents uriComponents = UriComponentsBuilder.fromUriString(\n  141  				\"http://example.com\").path(\"/{foo}\").query(\"bar={baz}\").build();\n  142  		ByteArrayOutputStream bos = new ByteArrayOutputStream();\n  143  		ObjectOutputStream oos = new ObjectOutputStream(bos);\n  144: 		oos.writeObject(uriComponents);\n  145  		ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));\n  146: 		UriComponents readObject = (UriComponents) ois.readObject();\n  147: 		assertThat(uriComponents.toString(), equalTo(readObject.toString()));\n  148  	}\n  149  \n  150  	@Test\n  151: 	public void copyToUriComponentsBuilder() {\n  152: 		UriComponents source = UriComponentsBuilder.fromPath(\"/foo/bar\").pathSegment(\"ba/z\").build();\n  153: 		UriComponentsBuilder targetBuilder = UriComponentsBuilder.newInstance();\n  154: 		source.copyToUriComponentsBuilder(targetBuilder);\n  155: 		UriComponents result = targetBuilder.build().encode();\n  156  		assertEquals(\"/foo/bar/ba%2Fz\", result.getPath());\n  157  		assertEquals(Arrays.asList(\"foo\", \"bar\", \"ba%2Fz\"), result.getPathSegments());\n  ...\n  159  \n  160  	@Test\n  161: 	public void equalsHierarchicalUriComponents() throws Exception {\n  162: 		UriComponents uriComponents1 = UriComponentsBuilder.fromUriString(\"http://example.com\").path(\"/{foo}\").query(\"bar={baz}\").build();\n  163: 		UriComponents uriComponents2 = UriComponentsBuilder.fromUriString(\"http://example.com\").path(\"/{foo}\").query(\"bar={baz}\").build();\n  164: 		UriComponents uriComponents3 = UriComponentsBuilder.fromUriString(\"http://example.com\").path(\"/{foo}\").query(\"bin={baz}\").build();\n  165: 		assertThat(uriComponents1, instanceOf(HierarchicalUriComponents.class));\n  166: 		assertThat(uriComponents1, equalTo(uriComponents1));\n  167: 		assertThat(uriComponents1, equalTo(uriComponents2));\n  168: 		assertThat(uriComponents1, not(equalTo(uriComponents3)));\n  169  	}\n  170  \n  171  	@Test\n  172: 	public void equalsOpaqueUriComponents() throws Exception {\n  173: 		UriComponents uriComponents1 = UriComponentsBuilder.fromUriString(\"http:example.com/foo/bar\").build();\n  174: 		UriComponents uriComponents2 = UriComponentsBuilder.fromUriString(\"http:example.com/foo/bar\").build();\n  175: 		UriComponents uriComponents3 = UriComponentsBuilder.fromUriString(\"http:example.com/foo/bin\").build();\n  176: 		assertThat(uriComponents1, instanceOf(OpaqueUriComponents.class));\n  177: 		assertThat(uriComponents1, equalTo(uriComponents1));\n  178: 		assertThat(uriComponents1, equalTo(uriComponents2));\n  179: 		assertThat(uriComponents1, not(equalTo(uriComponents3)));\n  180  	}\n  181  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\config\\annotation\\EnableWebMvc.java:\n   32   * &#064;Configuration\n   33   * &#064;EnableWebMvc\n   34:  * &#064;ComponentScan(basePackageClasses = { MyConfiguration.class })\n   35   * public class MyWebConfiguration {\n   36   *\n   ..\n   45   * &#064;Configuration\n   46   * &#064;EnableWebMvc\n   47:  * &#064;ComponentScan(basePackageClasses = { MyConfiguration.class })\n   48   * public class MyConfiguration extends WebMvcConfigurerAdapter {\n   49   *\n   ..\n   69   * <pre class=\"code\">\n   70   * &#064;Configuration\n   71:  * &#064;ComponentScan(basePackageClasses = { MyConfiguration.class })\n   72   * public class MyConfiguration extends WebMvcConfigurationSupport {\n   73   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\config\\annotation\\WebMvcConfigurationSupport.java:\n   70  import org.springframework.web.context.ServletContextAware;\n   71  import org.springframework.web.cors.CorsConfiguration;\n   72: import org.springframework.web.method.support.CompositeUriComponentsContributor;\n   73  import org.springframework.web.method.support.HandlerMethodArgumentResolver;\n   74  import org.springframework.web.method.support.HandlerMethodReturnValueHandler;\n   ..\n  802  \n  803  	/**\n  804: 	 * Return an instance of {@link CompositeUriComponentsContributor} for use with\n  805: 	 * {@link org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder}.\n  806  	 * @since 4.0\n  807  	 */\n  808  	@Bean\n  809: 	public CompositeUriComponentsContributor mvcUriComponentsContributor() {\n  810: 		return new CompositeUriComponentsContributor(\n  811  				requestMappingHandlerAdapter().getArgumentResolvers(), mvcConversionService());\n  812  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\config\\AnnotationDrivenBeanDefinitionParser.java:\n   30  import org.springframework.beans.factory.config.BeanReference;\n   31  import org.springframework.beans.factory.config.RuntimeBeanReference;\n   32: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   33: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   34  import org.springframework.beans.factory.support.GenericBeanDefinition;\n   35  import org.springframework.beans.factory.support.ManagedList;\n   ..\n   67  import org.springframework.web.bind.support.ConfigurableWebBindingInitializer;\n   68  import org.springframework.web.bind.support.WebArgumentResolver;\n   69: import org.springframework.web.method.support.CompositeUriComponentsContributor;\n   70  import org.springframework.web.servlet.HandlerAdapter;\n   71  import org.springframework.web.servlet.HandlerExceptionResolver;\n   ..\n   81  import org.springframework.web.servlet.mvc.method.annotation.JsonViewRequestBodyAdvice;\n   82  import org.springframework.web.servlet.mvc.method.annotation.JsonViewResponseBodyAdvice;\n   83: import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;\n   84  import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\n   85  import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n   ..\n  191  		XmlReaderContext readerContext = parserContext.getReaderContext();\n  192  \n  193: 		CompositeComponentDefinition compDefinition = new CompositeComponentDefinition(element.getTagName(), source);\n  194: 		parserContext.pushContainingComponent(compDefinition);\n  195  \n  196  		RuntimeBeanReference contentNegotiationManager = getContentNegotiationManager(element, source, parserContext);\n  ...\n  262  		readerContext.getRegistry().registerBeanDefinition(HANDLER_ADAPTER_BEAN_NAME , handlerAdapterDef);\n  263  \n  264: 		String uriCompContribName = MvcUriComponentsBuilder.MVC_URI_COMPONENTS_CONTRIBUTOR_BEAN_NAME;\n  265: 		RootBeanDefinition uriCompContribDef = new RootBeanDefinition(CompositeUriComponentsContributorFactoryBean.class);\n  266  		uriCompContribDef.setSource(source);\n  267  		uriCompContribDef.getPropertyValues().addPropertyValue(\"handlerAdapter\", handlerAdapterDef);\n  ...\n  310  				readerContext.registerWithGeneratedName(defaultExceptionResolver);\n  311  \n  312: 		parserContext.registerComponent(new BeanComponentDefinition(handlerMappingDef, HANDLER_MAPPING_BEAN_NAME));\n  313: 		parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HANDLER_ADAPTER_BEAN_NAME));\n  314: 		parserContext.registerComponent(new BeanComponentDefinition(uriCompContribDef, uriCompContribName));\n  315: 		parserContext.registerComponent(new BeanComponentDefinition(exceptionHandlerExceptionResolver, methodExceptionResolverName));\n  316: 		parserContext.registerComponent(new BeanComponentDefinition(responseStatusExceptionResolver, responseStatusExceptionResolverName));\n  317: 		parserContext.registerComponent(new BeanComponentDefinition(defaultExceptionResolver, defaultExceptionResolverName));\n  318: 		parserContext.registerComponent(new BeanComponentDefinition(mappedCsInterceptorDef, mappedInterceptorName));\n  319  \n  320  		// Ensure BeanNameUrlHandlerMapping (SPR-8289) and default HandlerAdapters are not \"turned off\"\n  321: 		MvcNamespaceUtils.registerDefaultComponents(parserContext, source);\n  322  \n  323: 		parserContext.popAndRegisterContainingComponent();\n  324  \n  325  		return null;\n  ...\n  350  			conversionDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n  351  			String conversionName = parserContext.getReaderContext().registerWithGeneratedName(conversionDef);\n  352: 			parserContext.registerComponent(new BeanComponentDefinition(conversionDef, conversionName));\n  353  			conversionServiceRef = new RuntimeBeanReference(conversionName);\n  354  		}\n  ...\n  366  			validatorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n  367  			String validatorName = parserContext.getReaderContext().registerWithGeneratedName(validatorDef);\n  368: 			parserContext.registerComponent(new BeanComponentDefinition(validatorDef, validatorName));\n  369  			return new RuntimeBeanReference(validatorName);\n  370  		}\n  ...\n  390  			String name = CONTENT_NEGOTIATION_MANAGER_BEAN_NAME;\n  391  			parserContext.getReaderContext().getRegistry().registerBeanDefinition(name , factoryBeanDef);\n  392: 			parserContext.registerComponent(new BeanComponentDefinition(factoryBeanDef, name));\n  393  			beanRef = new RuntimeBeanReference(name);\n  394  		}\n  ...\n  658  \n  659  	/**\n  660: 	 * A FactoryBean for a CompositeUriComponentsContributor that obtains the\n  661  	 * HandlerMethodArgumentResolver's configured in RequestMappingHandlerAdapter\n  662  	 * after it is fully initialized.\n  663  	 */\n  664: 	static class CompositeUriComponentsContributorFactoryBean\n  665: 			implements FactoryBean<CompositeUriComponentsContributor>, InitializingBean {\n  666  \n  667  		private RequestMappingHandlerAdapter handlerAdapter;\n  ...\n  669  		private ConversionService conversionService;\n  670  \n  671: 		private CompositeUriComponentsContributor uriComponentsContributor;\n  672  \n  673  		public void setHandlerAdapter(RequestMappingHandlerAdapter handlerAdapter) {\n  ...\n  681  		@Override\n  682  		public void afterPropertiesSet() {\n  683: 			this.uriComponentsContributor = new CompositeUriComponentsContributor(\n  684  					this.handlerAdapter.getArgumentResolvers(), this.conversionService);\n  685  		}\n  686  \n  687  		@Override\n  688: 		public CompositeUriComponentsContributor getObject() throws Exception {\n  689: 			return this.uriComponentsContributor;\n  690  		}\n  691  \n  692  		@Override\n  693  		public Class<?> getObjectType() {\n  694: 			return CompositeUriComponentsContributor.class;\n  695  		}\n  696  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\config\\DefaultServletHandlerBeanDefinitionParser.java:\n   22  \n   23  import org.springframework.beans.factory.config.BeanDefinition;\n   24: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   25  import org.springframework.beans.factory.support.ManagedMap;\n   26  import org.springframework.beans.factory.support.RootBeanDefinition;\n   ..\n   57  		String defaultServletHandlerName = parserContext.getReaderContext().generateBeanName(defaultServletHandlerDef);\n   58  		parserContext.getRegistry().registerBeanDefinition(defaultServletHandlerName, defaultServletHandlerDef);\n   59: 		parserContext.registerComponent(new BeanComponentDefinition(defaultServletHandlerDef, defaultServletHandlerName));\n   60  \n   61  		Map<String, String> urlMap = new ManagedMap<>();\n   ..\n   69  		String handlerMappingBeanName = parserContext.getReaderContext().generateBeanName(handlerMappingDef);\n   70  		parserContext.getRegistry().registerBeanDefinition(handlerMappingBeanName, handlerMappingDef);\n   71: 		parserContext.registerComponent(new BeanComponentDefinition(handlerMappingDef, handlerMappingBeanName));\n   72  \n   73  		// Ensure BeanNameUrlHandlerMapping (SPR-8289) and default HandlerAdapters are not \"turned off\"\n   74: 		MvcNamespaceUtils.registerDefaultComponents(parserContext, source);\n   75  \n   76  		return null;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\config\\InterceptorsBeanDefinitionParser.java:\n   23  import org.springframework.beans.factory.config.BeanDefinition;\n   24  import org.springframework.beans.factory.config.RuntimeBeanReference;\n   25: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   26: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   27  import org.springframework.beans.factory.support.ManagedList;\n   28  import org.springframework.beans.factory.support.RootBeanDefinition;\n   ..\n   43  	@Override\n   44  	public BeanDefinition parse(Element element, ParserContext parserContext) {\n   45: 		CompositeComponentDefinition compDefinition = new CompositeComponentDefinition(element.getTagName(), parserContext.extractSource(element));\n   46: 		parserContext.pushContainingComponent(compDefinition);\n   47  \n   48  		RuntimeBeanReference pathMatcherRef = null;\n   ..\n   78  \n   79  			String beanName = parserContext.getReaderContext().registerWithGeneratedName(mappedInterceptorDef);\n   80: 			parserContext.registerComponent(new BeanComponentDefinition(mappedInterceptorDef, beanName));\n   81  		}\n   82  \n   83: 		parserContext.popAndRegisterContainingComponent();\n   84  		return null;\n   85  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\config\\MvcNamespaceUtils.java:\n   22  import org.springframework.beans.factory.config.BeanDefinition;\n   23  import org.springframework.beans.factory.config.RuntimeBeanReference;\n   24: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   25  import org.springframework.beans.factory.support.RootBeanDefinition;\n   26  import org.springframework.beans.factory.xml.ParserContext;\n   ..\n   58  \n   59  \n   60: 	public static void registerDefaultComponents(ParserContext parserContext, Object source) {\n   61  		registerBeanNameUrlHandlerMapping(parserContext, source);\n   62  		registerHttpRequestHandlerAdapter(parserContext, source);\n   ..\n   82  			urlPathHelperDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n   83  			parserContext.getRegistry().registerBeanDefinition(URL_PATH_HELPER_BEAN_NAME, urlPathHelperDef);\n   84: 			parserContext.registerComponent(new BeanComponentDefinition(urlPathHelperDef, URL_PATH_HELPER_BEAN_NAME));\n   85  		}\n   86  		return new RuntimeBeanReference(URL_PATH_HELPER_BEAN_NAME);\n   ..\n  105  			pathMatcherDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n  106  			parserContext.getRegistry().registerBeanDefinition(PATH_MATCHER_BEAN_NAME, pathMatcherDef);\n  107: 			parserContext.registerComponent(new BeanComponentDefinition(pathMatcherDef, PATH_MATCHER_BEAN_NAME));\n  108  		}\n  109  		return new RuntimeBeanReference(PATH_MATCHER_BEAN_NAME);\n  ...\n  123  			beanNameMappingDef.getPropertyValues().add(\"corsConfigurations\", corsConfigurationsRef);\n  124  			parserContext.getRegistry().registerBeanDefinition(BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME, beanNameMappingDef);\n  125: 			parserContext.registerComponent(new BeanComponentDefinition(beanNameMappingDef, BEAN_NAME_URL_HANDLER_MAPPING_BEAN_NAME));\n  126  		}\n  127  	}\n  ...\n  137  			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n  138  			parserContext.getRegistry().registerBeanDefinition(HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef);\n  139: 			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, HTTP_REQUEST_HANDLER_ADAPTER_BEAN_NAME));\n  140  		}\n  141  	}\n  ...\n  151  			handlerAdapterDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n  152  			parserContext.getRegistry().registerBeanDefinition(SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME, handlerAdapterDef);\n  153: 			parserContext.registerComponent(new BeanComponentDefinition(handlerAdapterDef, SIMPLE_CONTROLLER_HANDLER_ADAPTER_BEAN_NAME));\n  154  		}\n  155  	}\n  ...\n  170  			}\n  171  			parserContext.getReaderContext().getRegistry().registerBeanDefinition(CORS_CONFIGURATION_BEAN_NAME, corsConfigurationsDef);\n  172: 			parserContext.registerComponent(new BeanComponentDefinition(corsConfigurationsDef, CORS_CONFIGURATION_BEAN_NAME));\n  173  		}\n  174  		else if (corsConfigurations != null) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\config\\ResourcesBeanDefinitionParser.java:\n   27  import org.springframework.beans.factory.config.ConstructorArgumentValues;\n   28  import org.springframework.beans.factory.config.RuntimeBeanReference;\n   29: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   30  import org.springframework.beans.factory.support.ManagedList;\n   31  import org.springframework.beans.factory.support.ManagedMap;\n   ..\n  123  		String beanName = parserContext.getReaderContext().generateBeanName(handlerMappingDef);\n  124  		parserContext.getRegistry().registerBeanDefinition(beanName, handlerMappingDef);\n  125: 		parserContext.registerComponent(new BeanComponentDefinition(handlerMappingDef, beanName));\n  126  \n  127  		// Ensure BeanNameUrlHandlerMapping (SPR-8289) and default HandlerAdapters are not \"turned off\"\n  128  		// Register HttpRequestHandlerAdapter\n  129: 		MvcNamespaceUtils.registerDefaultComponents(parserContext, source);\n  130  \n  131  		return null;\n  ...\n  138  			urlProvider.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n  139  			parserContext.getRegistry().registerBeanDefinition(RESOURCE_URL_PROVIDER, urlProvider);\n  140: 			parserContext.registerComponent(new BeanComponentDefinition(urlProvider, RESOURCE_URL_PROVIDER));\n  141  \n  142  			RootBeanDefinition interceptor = new RootBeanDefinition(ResourceUrlProviderExposingInterceptor.class);\n  ...\n  150  			mappedInterceptor.getConstructorArgumentValues().addIndexedArgumentValue(1, interceptor);\n  151  			String mappedInterceptorName = parserContext.getReaderContext().registerWithGeneratedName(mappedInterceptor);\n  152: 			parserContext.registerComponent(new BeanComponentDefinition(mappedInterceptor, mappedInterceptorName));\n  153  		}\n  154  	}\n  ...\n  194  		String beanName = parserContext.getReaderContext().generateBeanName(resourceHandlerDef);\n  195  		parserContext.getRegistry().registerBeanDefinition(beanName, resourceHandlerDef);\n  196: 		parserContext.registerComponent(new BeanComponentDefinition(resourceHandlerDef, beanName));\n  197  		return beanName;\n  198  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\config\\ViewControllerBeanDefinitionParser.java:\n   23  import org.springframework.beans.factory.config.BeanDefinition;\n   24  import org.springframework.beans.factory.config.RuntimeBeanReference;\n   25: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   26  import org.springframework.beans.factory.support.ManagedMap;\n   27  import org.springframework.beans.factory.support.RootBeanDefinition;\n   ..\n   68  \n   69  		// Ensure BeanNameUrlHandlerMapping (SPR-8289) and default HandlerAdapters are not \"turned off\"\n   70: 		MvcNamespaceUtils.registerDefaultComponents(parserContext, source);\n   71  \n   72  		// Create view controller bean definition\n   ..\n  121  		beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n  122  		context.getRegistry().registerBeanDefinition(HANDLER_MAPPING_BEAN_NAME, beanDef);\n  123: 		context.registerComponent(new BeanComponentDefinition(beanDef, HANDLER_MAPPING_BEAN_NAME));\n  124  \n  125  		beanDef.setSource(source);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\config\\ViewResolversBeanDefinitionParser.java:\n   23  import org.springframework.beans.MutablePropertyValues;\n   24  import org.springframework.beans.factory.config.BeanDefinition;\n   25: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   26: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   27  import org.springframework.beans.factory.support.ManagedList;\n   28  import org.springframework.beans.factory.support.RootBeanDefinition;\n   ..\n   69  	public BeanDefinition parse(Element element, ParserContext context) {\n   70  		Object source = context.extractSource(element);\n   71: 		context.pushContainingComponent(new CompositeComponentDefinition(element.getTagName(), source));\n   72  \n   73  		ManagedList<Object> resolvers = new ManagedList<>(4);\n   ..\n  145  \n  146  		context.getReaderContext().getRegistry().registerBeanDefinition(beanName, compositeResolverBeanDef);\n  147: 		context.registerComponent(new BeanComponentDefinition(compositeResolverBeanDef, beanName));\n  148: 		context.popAndRegisterContainingComponent();\n  149  		return null;\n  150  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\handler\\HandlerMethodMappingNamingStrategy.java:\n   31   * <p>Applications can build a URL to a controller method by name with the help\n   32   * of the static method\n   33:  * {@link org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder#fromMappingName(String)\n   34:  * MvcUriComponentsBuilder#fromMappingName} or in JSPs through the \"mvcUrl\"\n   35   * function registered by the Spring tag library.\n   36   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\mvc\\Controller.java:\n   23  \n   24  /**\n   25:  * Base Controller interface, representing a component that receives\n   26   * {@code HttpServletRequest} and {@code HttpServletResponse}\n   27   * instances just like a {@code HttpServlet} but is able to\n   ..\n   71   * {@link #handleRequest(HttpServletRequest, HttpServletResponse) handleRequest}\n   72   * method. As a convenience, Spring ships with a set of Servlet API mocks\n   73:  * that are suitable for testing any kind of web components, but are particularly\n   74   * suitable for testing Spring web controllers. In contrast to a Struts Action,\n   75   * there is no need to mock the ActionServlet or any other infrastructure;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\mvc\\method\\annotation\\ExceptionHandlerExceptionResolver.java:\n  214  \n  215  	/**\n  216: 	 * Add one or more components to be invoked after the execution of a controller\n  217  	 * method annotated with {@code @ResponseBody} or returning {@code ResponseEntity}\n  218  	 * but before the body is written to the response with the selected\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\mvc\\method\\annotation\\MvcUriComponentsBuilder.java:\n   60  import org.springframework.web.method.HandlerMethod;\n   61  import org.springframework.web.method.annotation.RequestParamMethodArgumentResolver;\n   62: import org.springframework.web.method.support.CompositeUriComponentsContributor;\n   63  import org.springframework.web.servlet.DispatcherServlet;\n   64  import org.springframework.web.servlet.mvc.method.RequestMappingInfoHandlerMapping;\n   65: import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n   66: import org.springframework.web.util.UriComponents;\n   67: import org.springframework.web.util.UriComponentsBuilder;\n   68  \n   69  /**\n   70:  * Creates instances of {@link org.springframework.web.util.UriComponentsBuilder}\n   71   * by pointing to Spring MVC controllers and {@code @RequestMapping} methods.\n   72   *\n   73   * <p>The static {@code fromXxx(...)} methods prepare links relative to the\n   74   * current request as determined by a call to\n   75:  * {@link org.springframework.web.servlet.support.ServletUriComponentsBuilder#fromCurrentServletMapping()}.\n   76   *\n   77:  * <p>The static {@code fromXxx(UriComponentsBuilder,...)} methods can be given\n   78   * the baseUrl when operating outside the context of a request.\n   79   *\n   80:  * <p>You can also create an MvcUriComponentsBuilder instance with a baseUrl\n   81:  * via {@link #relativeTo(org.springframework.web.util.UriComponentsBuilder)}\n   82   * and then use the non-static {@code withXxx(...)} method variants.\n   83   *\n   ..\n   87   * @since 4.0\n   88   */\n   89: public class MvcUriComponentsBuilder {\n   90  \n   91  	/**\n   92: 	 * Well-known name for the {@link CompositeUriComponentsContributor} object in the bean factory.\n   93  	 */\n   94: 	public static final String MVC_URI_COMPONENTS_CONTRIBUTOR_BEAN_NAME = \"mvcUriComponentsContributor\";\n   95  \n   96  \n   97: 	private static final Log logger = LogFactory.getLog(MvcUriComponentsBuilder.class);\n   98  \n   99  	private static final SpringObjenesis objenesis = new SpringObjenesis();\n  ...\n  103  	private static final ParameterNameDiscoverer parameterNameDiscoverer = new DefaultParameterNameDiscoverer();\n  104  \n  105: 	private static final CompositeUriComponentsContributor defaultUriComponentsContributor;\n  106  \n  107  	static {\n  108: 		defaultUriComponentsContributor = new CompositeUriComponentsContributor(\n  109  				new PathVariableMethodArgumentResolver(), new RequestParamMethodArgumentResolver(false));\n  110  	}\n  111  \n  112: 	private final UriComponentsBuilder baseUrl;\n  113  \n  114  \n  ...\n  121  	 * @see #fromMethod(Class, Method, Object...)\n  122  	 */\n  123: 	protected MvcUriComponentsBuilder(UriComponentsBuilder baseUrl) {\n  124  		Assert.notNull(baseUrl, \"'baseUrl' is required\");\n  125  		this.baseUrl = baseUrl;\n  ...\n  132  	 * to the given base URL.\n  133  	 */\n  134: 	public static MvcUriComponentsBuilder relativeTo(UriComponentsBuilder baseUrl) {\n  135: 		return new MvcUriComponentsBuilder(baseUrl);\n  136  	}\n  137  \n  138  \n  139  	/**\n  140: 	 * Create a {@link UriComponentsBuilder} from the mapping of a controller class\n  141  	 * and current request information including Servlet mapping. If the controller\n  142  	 * contains multiple mappings, only the first one is used.\n  143  	 * @param controllerType the controller to build a URI for\n  144: 	 * @return a UriComponentsBuilder instance (never {@code null})\n  145  	 */\n  146: 	public static UriComponentsBuilder fromController(Class<?> controllerType) {\n  147  		return fromController(null, controllerType);\n  148  	}\n  ...\n  150  	/**\n  151  	 * An alternative to {@link #fromController(Class)} that accepts a\n  152: 	 * {@code UriComponentsBuilder} representing the base URL. This is useful\n  153: 	 * when using MvcUriComponentsBuilder outside the context of processing a\n  154  	 * request or to apply a custom baseUrl not matching the current request.\n  155  	 * @param builder the builder for the base URL; the builder will be cloned\n  156  	 * and therefore not modified and may be re-used for further calls.\n  157  	 * @param controllerType the controller to build a URI for\n  158: 	 * @return a UriComponentsBuilder instance (never {@code null})\n  159  	 */\n  160: 	public static UriComponentsBuilder fromController(UriComponentsBuilder builder,\n  161  			Class<?> controllerType) {\n  162  \n  ...\n  167  \n  168  	/**\n  169: 	 * Create a {@link UriComponentsBuilder} from the mapping of a controller\n  170  	 * method and an array of method argument values. This method delegates\n  171  	 * to {@link #fromMethod(Class, Method, Object...)}.\n  ...\n  173  	 * @param methodName the method name\n  174  	 * @param args the argument values\n  175: 	 * @return a UriComponentsBuilder instance, never {@code null}\n  176  	 * @throws IllegalArgumentException if there is no matching or\n  177  	 * if there is more than one matching method\n  178  	 */\n  179: 	public static UriComponentsBuilder fromMethodName(Class<?> controllerType,\n  180  			String methodName, Object... args) {\n  181  \n  ...\n  186  	/**\n  187  	 * An alternative to {@link #fromMethodName(Class, String, Object...)} that\n  188: 	 * accepts a {@code UriComponentsBuilder} representing the base URL. This is\n  189: 	 * useful when using MvcUriComponentsBuilder outside the context of processing\n  190  	 * a request or to apply a custom baseUrl not matching the current request.\n  191  	 * @param builder the builder for the base URL; the builder will be cloned\n  ...\n  194  	 * @param methodName the method name\n  195  	 * @param args the argument values\n  196: 	 * @return a UriComponentsBuilder instance, never {@code null}\n  197  	 * @throws IllegalArgumentException if there is no matching or\n  198  	 * if there is more than one matching method\n  199  	 */\n  200: 	public static UriComponentsBuilder fromMethodName(UriComponentsBuilder builder,\n  201  			Class<?> controllerType, String methodName, Object... args) {\n  202  \n  ...\n  206  \n  207  	/**\n  208: 	 * Create a {@link UriComponentsBuilder} by invoking a \"mock\" controller method.\n  209  	 * The controller method and the supplied argument values are then used to\n  210  	 * delegate to {@link #fromMethod(Class, Method, Object...)}.\n  ...\n  221  	 * }\n  222  	 * </pre>\n  223: 	 * A UriComponentsBuilder can be created:\n  224  	 * <pre class=\"code\">\n  225: 	 * // Inline style with static import of \"MvcUriComponentsBuilder.on\"\n  226  	 *\n  227: 	 * MvcUriComponentsBuilder.fromMethodCall(\n  228  	 * 		on(AddressController.class).getAddressesForCountry(\"US\")).buildAndExpand(1);\n  229  	 *\n  230  	 * // Longer form useful for repeated invocation (and void controller methods)\n  231  	 *\n  232: 	 * AddressController controller = MvcUriComponentsBuilder.on(AddressController.class);\n  233  	 * controller.addAddress(null);\n  234: 	 * builder = MvcUriComponentsBuilder.fromMethodCall(controller);\n  235  	 * controller.getAddressesForCountry(\"US\")\n  236: 	 * builder = MvcUriComponentsBuilder.fromMethodCall(controller);\n  237  	 * </pre>\n  238  	 * @param info either the value returned from a \"mock\" controller\n  239  	 * invocation or the \"mock\" controller itself after an invocation\n  240: 	 * @return a UriComponents instance\n  241  	 */\n  242: 	public static UriComponentsBuilder fromMethodCall(Object info) {\n  243  		Assert.isInstanceOf(MethodInvocationInfo.class, info);\n  244  		MethodInvocationInfo invocationInfo = (MethodInvocationInfo) info;\n  ...\n  251  	/**\n  252  	 * An alternative to {@link #fromMethodCall(Object)} that accepts a\n  253: 	 * {@code UriComponentsBuilder} representing the base URL. This is useful\n  254: 	 * when using MvcUriComponentsBuilder outside the context of processing a\n  255  	 * request or to apply a custom baseUrl not matching the current request.\n  256  	 * @param builder the builder for the base URL; the builder will be cloned\n  ...\n  258  	 * @param info either the value returned from a \"mock\" controller\n  259  	 * invocation or the \"mock\" controller itself after an invocation\n  260: 	 * @return a UriComponents instance\n  261  	 */\n  262: 	public static UriComponentsBuilder fromMethodCall(UriComponentsBuilder builder, Object info) {\n  263  		Assert.isInstanceOf(MethodInvocationInfo.class, info);\n  264  		MethodInvocationInfo invocationInfo = (MethodInvocationInfo) info;\n  ...\n  316  	/**\n  317  	 * An alternative to {@link #fromMappingName(String)} that accepts a\n  318: 	 * {@code UriComponentsBuilder} representing the base URL. This is useful\n  319: 	 * when using MvcUriComponentsBuilder outside the context of processing a\n  320  	 * request or to apply a custom baseUrl not matching the current request.\n  321  	 * @param builder the builder for the base URL; the builder will be cloned\n  ...\n  327  	 * @since 4.2\n  328  	 */\n  329: 	public static MethodArgumentBuilder fromMappingName(UriComponentsBuilder builder, String name) {\n  330  		RequestMappingInfoHandlerMapping handlerMapping = getRequestMappingInfoHandlerMapping();\n  331  		List<HandlerMethod> handlerMethods = handlerMapping.getHandlerMethodsForMappingName(name);\n  ...\n  344  \n  345  	/**\n  346: 	 * Create a {@link UriComponentsBuilder} from the mapping of a controller method\n  347  	 * and an array of method argument values. The array of values  must match the\n  348  	 * signature of the controller method. Values for {@code @RequestParam} and\n  349  	 * {@code @PathVariable} are used for building the URI (via implementations of\n  350: 	 * {@link org.springframework.web.method.support.UriComponentsContributor\n  351: 	 * UriComponentsContributor}) while remaining argument values are ignored and\n  352  	 * can be {@code null}.\n  353  	 * @param controllerType the controller type\n  354  	 * @param method the controller method\n  355  	 * @param args argument values for the controller method\n  356: 	 * @return a UriComponentsBuilder instance, never {@code null}\n  357  	 * @since 4.2\n  358  	 */\n  359: 	public static UriComponentsBuilder fromMethod(Class<?> controllerType, Method method, Object... args) {\n  360  		return fromMethodInternal(null, controllerType, method, args);\n  361  	}\n  ...\n  363  	/**\n  364  	 * An alternative to {@link #fromMethod(Class, Method, Object...)}\n  365: 	 * that accepts a {@code UriComponentsBuilder} representing the base URL.\n  366: 	 * This is useful when using MvcUriComponentsBuilder outside the context of\n  367  	 * processing a request or to apply a custom baseUrl not matching the\n  368  	 * current request.\n  ...\n  372  	 * @param method the controller method\n  373  	 * @param args argument values for the controller method\n  374: 	 * @return a UriComponentsBuilder instance (never {@code null})\n  375  	 * @since 4.2\n  376  	 */\n  377: 	public static UriComponentsBuilder fromMethod(UriComponentsBuilder baseUrl,\n  378  			Class<?> controllerType, Method method, Object... args) {\n  379  \n  ...\n  382  	}\n  383  \n  384: 	private static UriComponentsBuilder fromMethodInternal(UriComponentsBuilder baseUrl,\n  385  			Class<?> controllerType, Method method, Object... args) {\n  386  \n  ...\n  390  		String path = pathMatcher.combine(typePath, methodPath);\n  391  		baseUrl.path(path);\n  392: 		UriComponents uriComponents = applyContributors(baseUrl, method, args);\n  393: 		return UriComponentsBuilder.newInstance().uriComponents(uriComponents);\n  394  	}\n  395  \n  396: 	private static UriComponentsBuilder getBaseUrlToUse(UriComponentsBuilder baseUrl) {\n  397  		if (baseUrl != null) {\n  398  			return baseUrl.cloneBuilder();\n  399  		}\n  400  		else {\n  401: 			return ServletUriComponentsBuilder.fromCurrentServletMapping();\n  402  		}\n  403  	}\n  ...\n  459  	}\n  460  \n  461: 	private static UriComponents applyContributors(UriComponentsBuilder builder, Method method, Object... args) {\n  462: 		CompositeUriComponentsContributor contributor = getConfiguredUriComponentsContributor();\n  463  		if (contributor == null) {\n  464: 			logger.debug(\"Using default CompositeUriComponentsContributor\");\n  465: 			contributor = defaultUriComponentsContributor;\n  466  		}\n  467  \n  ...\n  481  \n  482  		// We may not have all URI var values, expand only what we have\n  483: 		return builder.build().expand(new UriComponents.UriTemplateVariables() {\n  484  			@Override\n  485  			public Object getValue(String name) {\n  486: 				return uriVars.containsKey(name) ? uriVars.get(name) : UriComponents.UriTemplateVariables.SKIP_VALUE;\n  487  			}\n  488  		});\n  489  	}\n  490  \n  491: 	private static CompositeUriComponentsContributor getConfiguredUriComponentsContributor() {\n  492  		WebApplicationContext wac = getWebApplicationContext();\n  493  		if (wac == null) {\n  ...\n  495  		}\n  496  		try {\n  497: 			return wac.getBean(MVC_URI_COMPONENTS_CONTRIBUTOR_BEAN_NAME, CompositeUriComponentsContributor.class);\n  498  		}\n  499  		catch (NoSuchBeanDefinitionException ex) {\n  500  			if (logger.isDebugEnabled()) {\n  501: 				logger.debug(\"No CompositeUriComponentsContributor bean with name '\" +\n  502: 						MVC_URI_COMPONENTS_CONTRIBUTOR_BEAN_NAME + \"'\");\n  503  			}\n  504  			return null;\n  ...\n  545  	 * Return a \"mock\" controller instance. When an {@code @RequestMapping} method\n  546  	 * on the controller is invoked, the supplied argument values are remembered\n  547: 	 * and the result can then be used to create a {@code UriComponentsBuilder}\n  548  	 * via {@link #fromMethodCall(Object)}.\n  549  	 * <p>Note that this is a shorthand version of {@link #controller(Class)} intended\n  550  	 * for inline use (with a static import), for example:\n  551  	 * <pre class=\"code\">\n  552: 	 * MvcUriComponentsBuilder.fromMethodCall(on(FooController.class).getFoo(1)).build();\n  553  	 * </pre>\n  554  	 * @param controllerType the target controller\n  ...\n  561  	 * Return a \"mock\" controller instance. When an {@code @RequestMapping} method\n  562  	 * on the controller is invoked, the supplied argument values are remembered\n  563: 	 * and the result can then be used to create {@code UriComponentsBuilder} via\n  564  	 * {@link #fromMethodCall(Object)}.\n  565  	 * <p>This is a longer version of {@link #on(Class)}. It is needed with controller\n  ...\n  569  	 *\n  570  	 * fooController.saveFoo(1, null);\n  571: 	 * builder = MvcUriComponentsBuilder.fromMethodCall(fooController);\n  572  	 *\n  573  	 * fooController.saveFoo(2, null);\n  574: 	 * builder = MvcUriComponentsBuilder.fromMethodCall(fooController);\n  575  	 * </pre>\n  576  	 * @param controllerType the target controller\n  ...\n  631  	 * @since 4.2\n  632  	 */\n  633: 	public UriComponentsBuilder withController(Class<?> controllerType) {\n  634  		return fromController(this.baseUrl, controllerType);\n  635  	}\n  ...\n  640  	 * @since 4.2\n  641  	 */\n  642: 	public UriComponentsBuilder withMethodName(Class<?> controllerType, String methodName, Object... args) {\n  643  		return fromMethodName(this.baseUrl, controllerType, methodName, args);\n  644  	}\n  ...\n  649  	 * @since 4.2\n  650  	 */\n  651: 	public UriComponentsBuilder withMethodCall(Object invocationInfo) {\n  652  		return fromMethodCall(this.baseUrl, invocationInfo);\n  653  	}\n  ...\n  667  	 * @since 4.2\n  668  	 */\n  669: 	public UriComponentsBuilder withMethod(Class<?> controllerType, Method method, Object... args) {\n  670  		return fromMethod(this.baseUrl, controllerType, method, args);\n  671  	}\n  ...\n  741  		private final Object[] argumentValues;\n  742  \n  743: 		private final UriComponentsBuilder baseUrl;\n  744  \n  745  		/**\n  ...\n  753  		 * @since 4.2\n  754  		 */\n  755: 		public MethodArgumentBuilder(UriComponentsBuilder baseUrl, Class<?> controllerType, Method method) {\n  756  			Assert.notNull(controllerType, \"'controllerType' is required\");\n  757  			Assert.notNull(method, \"'method' is required\");\n  ...\n  765  		}\n  766  \n  767: 		private static UriComponentsBuilder initBaseUrl() {\n  768: 			UriComponentsBuilder builder = ServletUriComponentsBuilder.fromCurrentServletMapping();\n  769: 			return UriComponentsBuilder.fromPath(builder.build().getPath());\n  770  		}\n  771  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\mvc\\method\\annotation\\PathVariableMethodArgumentResolver.java:\n   35  import org.springframework.web.method.annotation.AbstractNamedValueMethodArgumentResolver;\n   36  import org.springframework.web.method.support.ModelAndViewContainer;\n   37: import org.springframework.web.method.support.UriComponentsContributor;\n   38  import org.springframework.web.servlet.HandlerMapping;\n   39  import org.springframework.web.servlet.View;\n   40: import org.springframework.web.util.UriComponentsBuilder;\n   41  \n   42  /**\n   ..\n   62   */\n   63  public class PathVariableMethodArgumentResolver extends AbstractNamedValueMethodArgumentResolver\n   64: 		implements UriComponentsContributor {\n   65  \n   66  	private static final TypeDescriptor STRING_TYPE_DESCRIPTOR = TypeDescriptor.valueOf(String.class);\n   ..\n  115  	@Override\n  116  	public void contributeMethodArgument(MethodParameter parameter, Object value,\n  117: 			UriComponentsBuilder builder, Map<String, Object> uriVariables, ConversionService conversionService) {\n  118  \n  119  		if (Map.class.isAssignableFrom(parameter.nestedIfOptional().getNestedParameterType())) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\mvc\\method\\annotation\\RequestMappingHandlerAdapter.java:\n  607  		resolvers.add(new ErrorsMethodArgumentResolver());\n  608  		resolvers.add(new SessionStatusMethodArgumentResolver());\n  609: 		resolvers.add(new UriComponentsBuilderMethodArgumentResolver());\n  610  \n  611  		// Custom arguments\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\mvc\\method\\annotation\\ResponseBodyAdvice.java:\n   39  \n   40  	/**\n   41: 	 * Whether this component supports the given controller method return type\n   42  	 * and the selected {@code HttpMessageConverter} type.\n   43  	 * @param returnType the return type\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\mvc\\method\\annotation\\ResponseBodyEmitter.java:\n   41   * public ResponseBodyEmitter handle() {\n   42   * 	   ResponseBodyEmitter emitter = new ResponseBodyEmitter();\n   43:  * 	   // Pass the emitter to another component...\n   44   * 	   return emitter;\n   45   * }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\mvc\\method\\annotation\\UriComponentsBuilderMethodArgumentResolver.java:\n   24  import org.springframework.web.method.support.HandlerMethodArgumentResolver;\n   25  import org.springframework.web.method.support.ModelAndViewContainer;\n   26: import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n   27: import org.springframework.web.util.UriComponentsBuilder;\n   28  \n   29  \n   30  /**\n   31:  * Resolvers argument values of type {@link UriComponentsBuilder}.\n   32   *\n   33   * <p>The returned instance is initialized via\n   34:  * {@link ServletUriComponentsBuilder#fromServletMapping(HttpServletRequest)}.\n   35   *\n   36   * @author Rossen Stoyanchev\n   37   * @since 3.1\n   38   */\n   39: public class UriComponentsBuilderMethodArgumentResolver implements HandlerMethodArgumentResolver {\n   40  \n   41  \n   ..\n   43  	public boolean supportsParameter(MethodParameter parameter) {\n   44  		Class<?> type = parameter.getParameterType();\n   45: 		return (UriComponentsBuilder.class == type || ServletUriComponentsBuilder.class == type);\n   46  	}\n   47  \n   ..\n   51  \n   52  		HttpServletRequest request = webRequest.getNativeRequest(HttpServletRequest.class);\n   53: 		return ServletUriComponentsBuilder.fromServletMapping(request);\n   54  	}\n   55  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\resource\\ResourceUrlProvider.java:\n   38  \n   39  /**\n   40:  * A central component to use to obtain the public URL path that clients should\n   41   * use to access a static resource.\n   42   *\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\support\\AbstractAnnotationConfigDispatcherServletInitializer.java:\n   79  	/**\n   80  	 * Specify {@link org.springframework.context.annotation.Configuration @Configuration}\n   81: 	 * and/or {@link org.springframework.stereotype.Component @Component} classes to be\n   82  	 * provided to the {@linkplain #createRootApplicationContext() root application context}.\n   83  	 * @return the configuration classes for the root application context, or {@code null}\n   ..\n   88  	/**\n   89  	 * Specify {@link org.springframework.context.annotation.Configuration @Configuration}\n   90: 	 * and/or {@link org.springframework.stereotype.Component @Component} classes to be\n   91  	 * provided to the {@linkplain #createServletApplicationContext() dispatcher servlet\n   92  	 * application context}.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\support\\AbstractFlashMapManager.java:\n   34  import org.springframework.web.servlet.FlashMap;\n   35  import org.springframework.web.servlet.FlashMapManager;\n   36: import org.springframework.web.util.UriComponents;\n   37  import org.springframework.web.util.UrlPathHelper;\n   38  \n   ..\n  174  			}\n  175  		}\n  176: 		UriComponents uriComponents = ServletUriComponentsBuilder.fromRequest(request).build();\n  177: 		MultiValueMap<String, String> actualParams = uriComponents.getQueryParams();\n  178  		MultiValueMap<String, String> expectedParams = flashMap.getTargetRequestParams();\n  179  		for (String expectedName : expectedParams.keySet()) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\support\\ServletUriComponentsBuilder.java:\n   27  import org.springframework.web.context.request.RequestContextHolder;\n   28  import org.springframework.web.context.request.ServletRequestAttributes;\n   29: import org.springframework.web.util.UriComponents;\n   30: import org.springframework.web.util.UriComponentsBuilder;\n   31  import org.springframework.web.util.UriUtils;\n   32  import org.springframework.web.util.UrlPathHelper;\n   33  \n   34  /**\n   35:  * A UriComponentsBuilder that extracts information from the HttpServletRequest.\n   36   *\n   37   * @author Rossen Stoyanchev\n   38   * @since 3.1\n   39   */\n   40: public class ServletUriComponentsBuilder extends UriComponentsBuilder {\n   41  \n   42  	private String originalPath;\n   ..\n   52   	 * @see #fromCurrentRequest()\n   53  	 */\n   54: 	protected ServletUriComponentsBuilder() {\n   55  	}\n   56  \n   57  	/**\n   58: 	 * Create a deep copy of the given ServletUriComponentsBuilder.\n   59  	 * @param other the other builder to copy from\n   60  	 */\n   61: 	protected ServletUriComponentsBuilder(ServletUriComponentsBuilder other) {\n   62  		super(other);\n   63  		this.originalPath = other.originalPath;\n   ..\n   71  	 * given HttpServletRequest.\n   72  	 */\n   73: 	public static ServletUriComponentsBuilder fromContextPath(HttpServletRequest request) {\n   74: 		ServletUriComponentsBuilder builder = initFromRequest(request);\n   75  		builder.replacePath(prependForwardedPrefix(request, request.getContextPath()));\n   76  		return builder;\n   ..\n   85  	 * if calling {@link #fromContextPath(HttpServletRequest)}.\n   86  	 */\n   87: 	public static ServletUriComponentsBuilder fromServletMapping(HttpServletRequest request) {\n   88: 		ServletUriComponentsBuilder builder = fromContextPath(request);\n   89  		if (StringUtils.hasText(new UrlPathHelper().getPathWithinServletMapping(request))) {\n   90  			builder.path(request.getServletPath());\n   ..\n   97  	 * of the HttpServletRequest.\n   98  	 */\n   99: 	public static ServletUriComponentsBuilder fromRequestUri(HttpServletRequest request) {\n  100: 		ServletUriComponentsBuilder builder = initFromRequest(request);\n  101  		builder.initPath(prependForwardedPrefix(request, request.getRequestURI()));\n  102  		return builder;\n  ...\n  107  	 * query string of an HttpServletRequest.\n  108  	 */\n  109: 	public static ServletUriComponentsBuilder fromRequest(HttpServletRequest request) {\n  110: 		ServletUriComponentsBuilder builder = initFromRequest(request);\n  111  		builder.initPath(prependForwardedPrefix(request, request.getRequestURI()));\n  112  		builder.query(request.getQueryString());\n  ...\n  117  	 * Initialize a builder with a scheme, host,and port (but not path and query).\n  118  	 */\n  119: 	private static ServletUriComponentsBuilder initFromRequest(HttpServletRequest request) {\n  120  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n  121: 		UriComponents uriComponents = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  122: 		String scheme = uriComponents.getScheme();\n  123: 		String host = uriComponents.getHost();\n  124: 		int port = uriComponents.getPort();\n  125  \n  126: 		ServletUriComponentsBuilder builder = new ServletUriComponentsBuilder();\n  127  		builder.scheme(scheme);\n  128  		builder.host(host);\n  ...\n  155  	 * request is obtained through {@link RequestContextHolder}.\n  156  	 */\n  157: 	public static ServletUriComponentsBuilder fromCurrentContextPath() {\n  158  		return fromContextPath(getCurrentRequest());\n  159  	}\n  ...\n  163  	 * request is obtained through {@link RequestContextHolder}.\n  164  	 */\n  165: 	public static ServletUriComponentsBuilder fromCurrentServletMapping() {\n  166  		return fromServletMapping(getCurrentRequest());\n  167  	}\n  ...\n  171  	 * request is obtained through {@link RequestContextHolder}.\n  172  	 */\n  173: 	public static ServletUriComponentsBuilder fromCurrentRequestUri() {\n  174  		return fromRequestUri(getCurrentRequest());\n  175  	}\n  ...\n  179  	 * request is obtained through {@link RequestContextHolder}.\n  180  	 */\n  181: 	public static ServletUriComponentsBuilder fromCurrentRequest() {\n  182  		return fromRequest(getCurrentRequest());\n  183  	}\n  ...\n  208  	 * GET http://foo.com/rest/books/6.json\n  209  	 *\n  210: 	 * ServletUriComponentsBuilder builder = ServletUriComponentsBuilder.fromRequestUri(this.request);\n  211  	 * String ext = builder.removePathExtension();\n  212  	 * String uri = builder.path(\"/pages/1.{ext}\").buildAndExpand(ext).toUriString();\n  ...\n  230  \n  231  	@Override\n  232: 	public ServletUriComponentsBuilder cloneBuilder() {\n  233: 		return new ServletUriComponentsBuilder(this);\n  234  	}\n  235  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\view\\DefaultRequestToViewNameTranslator.java:\n  158  	 * the resolution of lookup paths.\n  159  	 * <p>Use this to override the default UrlPathHelper with a custom subclass,\n  160: 	 * or to share common UrlPathHelper settings across multiple web components.\n  161  	 */\n  162  	public void setUrlPathHelper(UrlPathHelper urlPathHelper) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\view\\freemarker\\FreeMarkerConfigurer.java:\n   45   * This bean must be included in the application context of any application\n   46   * using Spring's FreeMarkerView for web MVC. It exists purely to configure FreeMarker.\n   47:  * It is not meant to be referenced by application components but just internally\n   48   * by FreeMarkerView. Implements FreeMarkerConfig to be found by FreeMarkerView without\n   49   * depending on the bean name the configurer. Each DispatcherServlet can define its\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\view\\groovy\\GroovyMarkupConfigurer.java:\n   66   * using the Spring MVC {@link GroovyMarkupView} for rendering. It exists purely\n   67   * for the purpose of configuring Groovy's Markup templates. It is not meant to be\n   68:  * referenced by application components directly. It implements GroovyMarkupConfig\n   69   * to be found by GroovyMarkupView without depending on a bean name. Each\n   70   * DispatcherServlet can define its own GroovyMarkupConfigurer if desired.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\view\\JstlView.java:\n   55   * Consider using Spring's ReloadableResourceBundleMessageSource instead of\n   56   * the standard ResourceBundleMessageSource for more sophistication.\n   57:  * Of course, any other Spring components can share the same MessageSource.\n   58   *\n   59   * <p>This is a separate class mainly to avoid JSTL dependencies in\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\java\\org\\springframework\\web\\servlet\\view\\RedirectView.java:\n   45  import org.springframework.web.servlet.support.RequestContextUtils;\n   46  import org.springframework.web.servlet.support.RequestDataValueProcessor;\n   47: import org.springframework.web.util.UriComponents;\n   48: import org.springframework.web.util.UriComponentsBuilder;\n   49  import org.springframework.web.util.UriUtils;\n   50  import org.springframework.web.util.WebUtils;\n   ..\n  308  		FlashMap flashMap = RequestContextUtils.getOutputFlashMap(request);\n  309  		if (!CollectionUtils.isEmpty(flashMap)) {\n  310: 			UriComponents uriComponents = UriComponentsBuilder.fromUriString(targetUrl).build();\n  311: 			flashMap.setTargetRequestPath(uriComponents.getPath());\n  312: 			flashMap.addTargetRequestParams(uriComponents.getQueryParams());\n  313  			FlashMapManager flashMapManager = RequestContextUtils.getFlashMapManager(request);\n  314  			if (flashMapManager == null) {\n  ...\n  645  			return false;\n  646  		}\n  647: 		String targetHost = UriComponentsBuilder.fromUriString(targetUrl).build().getHost();\n  648  		if (StringUtils.isEmpty(targetHost)) {\n  649  			return false;\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\main\\resources\\META-INF\\spring.tld:\n  461          <description>Helps to prepare a URL to a Spring MVC controller method.</description>\n  462          <name>mvcUrl</name>\n  463:         <function-class>org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder</function-class>\n  464:         <function-signature>org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.MethodArgumentBuilder fromMappingName(java.lang.String)</function-signature>\n  465      </function>\n  466  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\test\\java\\org\\springframework\\web\\servlet\\config\\annotation\\WebMvcConfigurationSupportTests.java:\n   61  import org.springframework.web.context.request.NativeWebRequest;\n   62  import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\n   63: import org.springframework.web.method.support.CompositeUriComponentsContributor;\n   64  import org.springframework.web.method.support.HandlerMethodArgumentResolver;\n   65  import org.springframework.web.method.support.HandlerMethodReturnValueHandler;\n   ..\n   76  import org.springframework.web.servlet.mvc.method.annotation.JsonViewRequestBodyAdvice;\n   77  import org.springframework.web.servlet.mvc.method.annotation.JsonViewResponseBodyAdvice;\n   78: import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;\n   79  import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\n   80  import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n   ..\n  210  \n  211  	@Test\n  212: 	public void uriComponentsContributor() throws Exception {\n  213  		ApplicationContext context = initContext(WebConfig.class);\n  214: 		CompositeUriComponentsContributor uriComponentsContributor = context.getBean(\n  215: 				MvcUriComponentsBuilder.MVC_URI_COMPONENTS_CONTRIBUTOR_BEAN_NAME,\n  216: 				CompositeUriComponentsContributor.class);\n  217  \n  218: 		assertNotNull(uriComponentsContributor);\n  219  	}\n  220  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\test\\java\\org\\springframework\\web\\servlet\\config\\MvcNamespaceTests.java:\n   90  import org.springframework.web.cors.CorsConfiguration;\n   91  import org.springframework.web.method.HandlerMethod;\n   92: import org.springframework.web.method.support.CompositeUriComponentsContributor;\n   93  import org.springframework.web.method.support.InvocableHandlerMethod;\n   94  import org.springframework.web.servlet.HandlerExecutionChain;\n   ..\n  106  import org.springframework.web.servlet.mvc.ParameterizableViewController;\n  107  import org.springframework.web.servlet.mvc.SimpleControllerHandlerAdapter;\n  108: import org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder;\n  109  import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter;\n  110  import org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping;\n  ...\n  241  		assertEquals(Double.valueOf(0.9999), handler.percent);\n  242  \n  243: 		CompositeUriComponentsContributor uriComponentsContributor = this.appContext.getBean(\n  244: 				MvcUriComponentsBuilder.MVC_URI_COMPONENTS_CONTRIBUTOR_BEAN_NAME,\n  245: 				CompositeUriComponentsContributor.class);\n  246  \n  247: 		assertNotNull(uriComponentsContributor);\n  248  	}\n  249  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\test\\java\\org\\springframework\\web\\servlet\\mvc\\method\\annotation\\MvcUriComponentsBuilderTests.java:\n   19  import static org.hamcrest.Matchers.*;\n   20  import static org.junit.Assert.*;\n   21: import static org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder.*;\n   22  \n   23  import java.lang.annotation.Documented;\n   ..\n   56  import org.springframework.web.servlet.config.annotation.EnableWebMvc;\n   57  import org.springframework.web.servlet.config.annotation.WebMvcConfigurerAdapter;\n   58: import org.springframework.web.util.UriComponents;\n   59: import org.springframework.web.util.UriComponentsBuilder;\n   60  \n   61  /**\n   62:  * Unit tests for {@link org.springframework.web.servlet.mvc.method.annotation.MvcUriComponentsBuilder}.\n   63   *\n   64   * @author Oliver Gierke\n   ..\n   68   */\n   69  @SuppressWarnings(\"unused\")\n   70: public class MvcUriComponentsBuilderTests {\n   71  \n   72  	private final MockHttpServletRequest request = new MockHttpServletRequest();\n   ..\n   86  	@Test\n   87  	public void testFromController() {\n   88: 		UriComponents uriComponents = fromController(PersonControllerImpl.class).build();\n   89: 		assertThat(uriComponents.toUriString(), Matchers.endsWith(\"/people\"));\n   90  	}\n   91  \n   92  	@Test\n   93  	public void testFromControllerUriTemplate() {\n   94: 		UriComponents uriComponents = fromController(PersonsAddressesController.class).buildAndExpand(15);\n   95: 		assertThat(uriComponents.toUriString(), endsWith(\"/people/15/addresses\"));\n   96  	}\n   97  \n   98  	@Test\n   99  	public void testFromControllerSubResource() {\n  100: 		UriComponents uriComponents = fromController(PersonControllerImpl.class).pathSegment(\"something\").build();\n  101  \n  102: 		assertThat(uriComponents.toUriString(), endsWith(\"/people/something\"));\n  103  	}\n  104  \n  105  	@Test\n  106  	public void testFromControllerTwoTypeLevelMappings() {\n  107: 		UriComponents uriComponents = fromController(InvalidController.class).build();\n  108: 		assertThat(uriComponents.toUriString(), is(\"http://localhost/persons\"));\n  109  	}\n  110  \n  111  	@Test\n  112  	public void testFromControllerNotMapped() {\n  113: 		UriComponents uriComponents = fromController(UnmappedController.class).build();\n  114: 		assertThat(uriComponents.toUriString(), is(\"http://localhost/\"));\n  115  	}\n  116  \n  117  	@Test\n  118  	public void testFromControllerWithCustomBaseUrlViaStaticCall() {\n  119: 		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(\"http://example.org:9090/base\");\n  120: 		UriComponents uriComponents = fromController(builder, PersonControllerImpl.class).build();\n  121  \n  122: 		assertEquals(\"http://example.org:9090/base/people\", uriComponents.toString());\n  123  		assertEquals(\"http://example.org:9090/base\", builder.toUriString());\n  124  	}\n  ...\n  126  	@Test\n  127  	public void testFromControllerWithCustomBaseUrlViaInstance() {\n  128: 		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(\"http://example.org:9090/base\");\n  129: 		MvcUriComponentsBuilder mvcBuilder = MvcUriComponentsBuilder.relativeTo(builder);\n  130: 		UriComponents uriComponents = mvcBuilder.withController(PersonControllerImpl.class).build();\n  131  \n  132: 		assertEquals(\"http://example.org:9090/base/people\", uriComponents.toString());\n  133  		assertEquals(\"http://example.org:9090/base\", builder.toUriString());\n  134  	}\n  ...\n  136  	@Test\n  137  	public void testFromMethodNamePathVariable() throws Exception {\n  138: 		UriComponents uriComponents = fromMethodName(\n  139  				ControllerWithMethods.class, \"methodWithPathVariable\", new Object[]{\"1\"}).build();\n  140  \n  141: 		assertThat(uriComponents.toUriString(), is(\"http://localhost/something/1/foo\"));\n  142  	}\n  143  \n  ...\n  145  	public void testFromMethodNameTypeLevelPathVariable() throws Exception {\n  146  		this.request.setContextPath(\"/myapp\");\n  147: 		UriComponents uriComponents = fromMethodName(\n  148  				PersonsAddressesController.class, \"getAddressesForCountry\", \"DE\").buildAndExpand(\"1\");\n  149  \n  150: 		assertThat(uriComponents.toUriString(), is(\"http://localhost/myapp/people/1/addresses/DE\"));\n  151  	}\n  152  \n  ...\n  154  	public void testFromMethodNameTwoPathVariables() throws Exception {\n  155  		DateTime now = DateTime.now();\n  156: 		UriComponents uriComponents = fromMethodName(\n  157  				ControllerWithMethods.class, \"methodWithTwoPathVariables\", 1, now).build();\n  158  \n  159: 		assertThat(uriComponents.getPath(), is(\"/something/1/foo/\" + ISODateTimeFormat.date().print(now)));\n  160  	}\n  161  \n  162  	@Test\n  163  	public void testFromMethodNameWithPathVarAndRequestParam() throws Exception {\n  164: 		UriComponents uriComponents = fromMethodName(\n  165  				ControllerWithMethods.class, \"methodForNextPage\", \"1\", 10, 5).build();\n  166  \n  167: 		assertThat(uriComponents.getPath(), is(\"/something/1/foo\"));\n  168: 		MultiValueMap<String, String> queryParams = uriComponents.getQueryParams();\n  169  		assertThat(queryParams.get(\"limit\"), contains(\"5\"));\n  170  		assertThat(queryParams.get(\"offset\"), contains(\"10\"));\n  ...\n  175  	@Test\n  176  	public void fromMethodNameWithBridgedMethod() throws Exception {\n  177: 		UriComponents uriComponents = fromMethodName(PersonCrudController.class, \"get\", (long) 42).build();\n  178: 		assertThat(uriComponents.toUriString(), is(\"http://localhost/42\"));\n  179  	}\n  180  \n  ...\n  183  	@Test\n  184  	public void testFromMethodNameTypeLevelPathVariableWithoutArgumentValue() throws Exception {\n  185: 		UriComponents uriComponents = fromMethodName(UserContactController.class, \"showCreate\", 123).build();\n  186  \n  187: 		assertThat(uriComponents.getPath(), is(\"/user/123/contacts/create\"));\n  188  	}\n  189  \n  190  	@Test\n  191  	public void testFromMethodNameNotMapped() throws Exception {\n  192: 		UriComponents uriComponents = fromMethodName(UnmappedController.class, \"unmappedMethod\").build();\n  193  \n  194: 		assertThat(uriComponents.toUriString(), is(\"http://localhost/\"));\n  195  	}\n  196  \n  197  	@Test\n  198  	public void testFromMethodNameWithCustomBaseUrlViaStaticCall() throws Exception {\n  199: 		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(\"http://example.org:9090/base\");\n  200: 		UriComponents uriComponents = fromMethodName(builder, ControllerWithMethods.class,\n  201  				\"methodWithPathVariable\", new Object[] {\"1\"}).build();\n  202  \n  203: 		assertEquals(\"http://example.org:9090/base/something/1/foo\", uriComponents.toString());\n  204  		assertEquals(\"http://example.org:9090/base\", builder.toUriString());\n  205  	}\n  ...\n  207  	@Test\n  208  	public void testFromMethodNameWithCustomBaseUrlViaInstance() throws Exception {\n  209: 		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(\"http://example.org:9090/base\");\n  210: 		MvcUriComponentsBuilder mvcBuilder = MvcUriComponentsBuilder.relativeTo(builder);\n  211: 		UriComponents uriComponents = mvcBuilder.withMethodName(ControllerWithMethods.class,\n  212  				\"methodWithPathVariable\", new Object[] {\"1\"}).build();\n  213  \n  214: 		assertEquals(\"http://example.org:9090/base/something/1/foo\", uriComponents.toString());\n  215  		assertEquals(\"http://example.org:9090/base\", builder.toUriString());\n  216  	}\n  ...\n  218  	@Test\n  219  	public void testFromMethodNameWithMetaAnnotation() throws Exception {\n  220: 		UriComponents uriComponents = fromMethodName(MetaAnnotationController.class, \"handleInput\").build();\n  221: 		assertThat(uriComponents.toUriString(), is(\"http://localhost/input\"));\n  222  	}\n  223  \n  224  	@Test // SPR-14405\n  225  	public void testFromMappingNameWithOptionalParam() throws Exception {\n  226: 		UriComponents uriComponents = fromMethodName(ControllerWithMethods.class,\n  227  				\"methodWithOptionalParam\", new Object[] {null}).build();\n  228  \n  229: 		assertThat(uriComponents.toUriString(), is(\"http://localhost/something/optional-param\"));\n  230  	}\n  231  \n  232  	@Test\n  233  	public void testFromMethodCall() {\n  234: 		UriComponents uriComponents = fromMethodCall(on(ControllerWithMethods.class).myMethod(null)).build();\n  235  \n  236: 		assertThat(uriComponents.toUriString(), startsWith(\"http://localhost\"));\n  237: 		assertThat(uriComponents.toUriString(), endsWith(\"/something/else\"));\n  238  	}\n  239  \n  240   	@Test\n  241  	public void testFromMethodCallOnSubclass() {\n  242: 		UriComponents uriComponents = fromMethodCall(on(ExtendedController.class).myMethod(null)).build();\n  243  \n  244: 		assertThat(uriComponents.toUriString(), startsWith(\"http://localhost\"));\n  245: 		assertThat(uriComponents.toUriString(), endsWith(\"/extended/else\"));\n  246  	}\n  247  \n  248  	@Test\n  249  	public void testFromMethodCallWithTypeLevelUriVars() {\n  250: 		UriComponents uriComponents = fromMethodCall(on(\n  251  				PersonsAddressesController.class).getAddressesForCountry(\"DE\")).buildAndExpand(15);\n  252  \n  253: 		assertThat(uriComponents.toUriString(), endsWith(\"/people/15/addresses/DE\"));\n  254  	}\n  255  \n  ...\n  257  	@Test\n  258  	public void testFromMethodCallWithPathVar() {\n  259: 		UriComponents uriComponents = fromMethodCall(on(\n  260  				ControllerWithMethods.class).methodWithPathVariable(\"1\")).build();\n  261  \n  262: 		assertThat(uriComponents.toUriString(), startsWith(\"http://localhost\"));\n  263: 		assertThat(uriComponents.toUriString(), endsWith(\"/something/1/foo\"));\n  264  	}\n  265  \n  266  	@Test\n  267  	public void testFromMethodCallWithPathVarAndRequestParams() {\n  268: 		UriComponents uriComponents = fromMethodCall(on(\n  269  				ControllerWithMethods.class).methodForNextPage(\"1\", 10, 5)).build();\n  270  \n  271: 		assertThat(uriComponents.getPath(), is(\"/something/1/foo\"));\n  272  \n  273: 		MultiValueMap<String, String> queryParams = uriComponents.getQueryParams();\n  274  		assertThat(queryParams.get(\"limit\"), contains(\"5\"));\n  275  		assertThat(queryParams.get(\"offset\"), contains(\"10\"));\n  ...\n  278  	@Test\n  279  	public void testFromMethodCallWithPathVarAndMultiValueRequestParams() {\n  280: 		UriComponents uriComponents = fromMethodCall(on(\n  281  				ControllerWithMethods.class).methodWithMultiValueRequestParams(\"1\", Arrays.asList(3, 7), 5)).build();\n  282  \n  283: 		assertThat(uriComponents.getPath(), is(\"/something/1/foo\"));\n  284  \n  285: 		MultiValueMap<String, String> queryParams = uriComponents.getQueryParams();\n  286  		assertThat(queryParams.get(\"limit\"), contains(\"5\"));\n  287  		assertThat(queryParams.get(\"items\"), containsInAnyOrder(\"3\", \"7\"));\n  ...\n  290  	@Test\n  291  	public void testFromMethodCallWithCustomBaseUrlViaStaticCall() {\n  292: 		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(\"http://example.org:9090/base\");\n  293: 		UriComponents uriComponents = fromMethodCall(builder, on(ControllerWithMethods.class).myMethod(null)).build();\n  294  \n  295: 		assertEquals(\"http://example.org:9090/base/something/else\", uriComponents.toString());\n  296  		assertEquals(\"http://example.org:9090/base\", builder.toUriString());\n  297  	}\n  ...\n  299  	@Test\n  300  	public void testFromMethodCallWithCustomBaseUrlViaInstance() {\n  301: 		UriComponentsBuilder builder = UriComponentsBuilder.fromUriString(\"http://example.org:9090/base\");\n  302: 		MvcUriComponentsBuilder mvcBuilder = MvcUriComponentsBuilder.relativeTo(builder);\n  303: 		UriComponents result = mvcBuilder.withMethodCall(on(ControllerWithMethods.class).myMethod(null)).build();\n  304  \n  305  		assertEquals(\"http://example.org:9090/base/something/else\", result.toString());\n  ...\n  320  \n  321  		String mappingName = \"PAC#getAddressesForCountry\";\n  322: 		String url = MvcUriComponentsBuilder.fromMappingName(mappingName).arg(0, \"DE\").buildAndExpand(123);\n  323  		assertEquals(\"/base/people/123/addresses/DE\", url);\n  324  	}\n  ...\n  333  		this.request.setAttribute(DispatcherServlet.WEB_APPLICATION_CONTEXT_ATTRIBUTE, context);\n  334  \n  335: 		UriComponentsBuilder baseUrl = UriComponentsBuilder.fromUriString(\"http://example.org:9999/base\");\n  336: 		MvcUriComponentsBuilder mvcBuilder = MvcUriComponentsBuilder.relativeTo(baseUrl);\n  337  		String url = mvcBuilder.withMappingName(\"PAC#getAddressesForCountry\").arg(0, \"DE\").buildAndExpand(123);\n  338  		assertEquals(\"http://example.org:9999/base/people/123/addresses/DE\", url);\n  ...\n  342  	public void usesForwardedHostAsHostIfHeaderIsSet() {\n  343  		this.request.addHeader(\"X-Forwarded-Host\", \"somethingDifferent\");\n  344: 		UriComponents uriComponents = fromController(PersonControllerImpl.class).build();\n  345  \n  346: 		assertThat(uriComponents.toUriString(), startsWith(\"http://somethingDifferent\"));\n  347  	}\n  348  \n  ...\n  350  	public void usesForwardedHostAndPortFromHeader() {\n  351  		request.addHeader(\"X-Forwarded-Host\", \"foobar:8088\");\n  352: 		UriComponents uriComponents = fromController(PersonControllerImpl.class).build();\n  353  \n  354: 		assertThat(uriComponents.toUriString(), startsWith(\"http://foobar:8088\"));\n  355  	}\n  356  \n  ...\n  358  	public void usesFirstHostOfXForwardedHost() {\n  359  		request.addHeader(\"X-Forwarded-Host\", \"barfoo:8888, localhost:8088\");\n  360: 		UriComponents uriComponents = fromController(PersonControllerImpl.class).build();\n  361  \n  362: 		assertThat(uriComponents.toUriString(), startsWith(\"http://barfoo:8888\"));\n  363  	}\n  364  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\test\\java\\org\\springframework\\web\\servlet\\mvc\\method\\annotation\\RequestMappingHandlerAdapterIntegrationTests.java:\n   84  import org.springframework.web.servlet.HandlerMapping;\n   85  import org.springframework.web.servlet.ModelAndView;\n   86: import org.springframework.web.util.UriComponentsBuilder;\n   87  \n   88  import static org.junit.Assert.assertEquals;\n   ..\n  152  				Date.class, Map.class, String.class, String.class, TestBean.class, Errors.class, TestBean.class,\n  153  				Color.class, HttpServletRequest.class, HttpServletResponse.class, TestBean.class, TestBean.class,\n  154: 				User.class, OtherUser.class, Model.class, UriComponentsBuilder.class};\n  155  \n  156  		String datePattern = \"yyyy.MM.dd\";\n  ...\n  378  				@ModelAttribute OtherUser otherUser,\n  379  				Model model,\n  380: 				UriComponentsBuilder builder) throws Exception {\n  381  \n  382  			model.addAttribute(\"cookie\", cookie).addAttribute(\"pathvar\", pathvar).addAttribute(\"header\", header)\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\test\\java\\org\\springframework\\web\\servlet\\mvc\\method\\annotation\\RequestPartIntegrationTests.java:\n   46  import org.springframework.http.RequestEntity;\n   47  import org.springframework.http.ResponseEntity;\n   48: import org.springframework.http.client.HttpComponentsClientHttpRequestFactory;\n   49  import org.springframework.http.converter.ByteArrayHttpMessageConverter;\n   50  import org.springframework.http.converter.HttpMessageConverter;\n   ..\n  137  		converter.setPartConverters(converters);\n  138  \n  139: 		restTemplate = new RestTemplate(new HttpComponentsClientHttpRequestFactory());\n  140  		restTemplate.setMessageConverters(Collections.singletonList(converter));\n  141  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\test\\java\\org\\springframework\\web\\servlet\\mvc\\method\\annotation\\UriComponentsBuilderMethodArgumentResolverTests.java:\n   26  import org.springframework.web.context.request.ServletWebRequest;\n   27  import org.springframework.web.method.support.ModelAndViewContainer;\n   28: import org.springframework.web.servlet.support.ServletUriComponentsBuilder;\n   29: import org.springframework.web.util.UriComponentsBuilder;\n   30  \n   31  import static org.junit.Assert.*;\n   32  \n   33  /**\n   34:  * Test fixture with {@link UriComponentsBuilderMethodArgumentResolver}.\n   35   *\n   36   * @author Rossen Stoyanchev\n   37   */\n   38: public class UriComponentsBuilderMethodArgumentResolverTests {\n   39  \n   40: 	private UriComponentsBuilderMethodArgumentResolver resolver;\n   41  \n   42  	private MethodParameter builderParam;\n   ..\n   52  	@Before\n   53  	public void setUp() throws Exception {\n   54: 		this.resolver = new UriComponentsBuilderMethodArgumentResolver();\n   55: 		Method method = this.getClass().getDeclaredMethod(\"handle\", UriComponentsBuilder.class, ServletUriComponentsBuilder.class, int.class);\n   56  		this.builderParam = new MethodParameter(method, 0);\n   57  		this.servletBuilderParam = new MethodParameter(method, 1);\n   ..\n   77  \n   78  		assertNotNull(actual);\n   79: 		assertEquals(ServletUriComponentsBuilder.class, actual.getClass());\n   80: 		assertEquals(\"http://localhost/myapp/main\", ((ServletUriComponentsBuilder) actual).build().toUriString());\n   81  	}\n   82  \n   83  \n   84: 	void handle(UriComponentsBuilder builder, ServletUriComponentsBuilder servletBuilder, int value) {\n   85  	}\n   86  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\test\\java\\org\\springframework\\web\\servlet\\support\\ServletUriComponentsBuilderTests.java:\n   28  import org.springframework.web.context.request.RequestContextHolder;\n   29  import org.springframework.web.context.request.ServletRequestAttributes;\n   30: import org.springframework.web.util.UriComponents;\n   31: import org.springframework.web.util.UriComponentsBuilder;\n   32  \n   33  /**\n   34   * Unit tests for\n   35:  * {@link org.springframework.web.servlet.support.ServletUriComponentsBuilder}.\n   36   *\n   37   * @author Rossen Stoyanchev\n   38   */\n   39: public class ServletUriComponentsBuilderTests {\n   40  \n   41  	private MockHttpServletRequest request;\n   ..\n   57  		this.request.setRequestURI(\"/mvc-showcase/data/param\");\n   58  		this.request.setQueryString(\"foo=123\");\n   59: 		String result = ServletUriComponentsBuilder.fromRequest(this.request).build().toUriString();\n   60  		assertEquals(\"http://localhost/mvc-showcase/data/param?foo=123\", result);\n   61  	}\n   ..\n   64  	public void fromRequestEncodedPath() {\n   65  		this.request.setRequestURI(\"/mvc-showcase/data/foo%20bar\");\n   66: 		String result = ServletUriComponentsBuilder.fromRequest(this.request).build().toUriString();\n   67  		assertEquals(\"http://localhost/mvc-showcase/data/foo%20bar\", result);\n   68  	}\n   ..\n   71  	public void fromRequestAtypicalHttpPort() {\n   72  		this.request.setServerPort(8080);\n   73: 		String result = ServletUriComponentsBuilder.fromRequest(this.request).build().toUriString();\n   74  		assertEquals(\"http://localhost:8080/mvc-showcase\", result);\n   75  	}\n   ..\n   79  		this.request.setScheme(\"https\");\n   80  		this.request.setServerPort(9043);\n   81: 		String result = ServletUriComponentsBuilder.fromRequest(this.request).build().toUriString();\n   82  		assertEquals(\"https://localhost:9043/mvc-showcase\", result);\n   83  	}\n   84  \n   85: 	// Most X-Forwarded-* tests in UriComponentsBuilderTests\n   86  \n   87  	@Test\n   ..\n   97  \n   98  		HttpRequest httpRequest = new ServletServerHttpRequest(request);\n   99: 		UriComponents result = UriComponentsBuilder.fromHttpRequest(httpRequest).build();\n  100  \n  101  		assertEquals(\"https://84.198.58.199/mvc-showcase\", result.toString());\n  ...\n  106  		this.request.setRequestURI(\"/mvc-showcase/data/param\");\n  107  		this.request.setQueryString(\"foo=123\");\n  108: 		String result = ServletUriComponentsBuilder.fromRequestUri(this.request).build().toUriString();\n  109  		assertEquals(\"http://localhost/mvc-showcase/data/param\", result);\n  110  	}\n  ...\n  114  		this.request.setRequestURI(\"/bar\");\n  115  		this.request.addHeader(\"X-Forwarded-Prefix\", \"/foo\");\n  116: 		UriComponents result = ServletUriComponentsBuilder.fromRequest(this.request).build();\n  117  \n  118  		assertEquals(\"http://localhost/foo/bar\", result.toUriString());\n  ...\n  123  		this.request.setRequestURI(\"/bar\");\n  124  		this.request.addHeader(\"X-Forwarded-Prefix\", \"/foo/\");\n  125: 		UriComponents result = ServletUriComponentsBuilder.fromRequest(this.request).build();\n  126  \n  127  		assertEquals(\"http://localhost/foo/bar\", result.toUriString());\n  ...\n  132  		this.request.setRequestURI(\"/mvc-showcase/data/param\");\n  133  		this.request.setQueryString(\"foo=123\");\n  134: 		String result = ServletUriComponentsBuilder.fromContextPath(this.request).build().toUriString();\n  135  		assertEquals(\"http://localhost/mvc-showcase\", result);\n  136  	}\n  ...\n  141  		this.request.setContextPath(\"/mvc-showcase\");\n  142  		this.request.setRequestURI(\"/mvc-showcase/simple\");\n  143: 		String result = ServletUriComponentsBuilder.fromContextPath(this.request).build().toUriString();\n  144  		assertEquals(\"http://localhost/prefix/mvc-showcase\", result);\n  145  	}\n  ...\n  150  		this.request.setServletPath(\"/app\");\n  151  		this.request.setQueryString(\"foo=123\");\n  152: 		String result = ServletUriComponentsBuilder.fromServletMapping(this.request).build().toUriString();\n  153  		assertEquals(\"http://localhost/mvc-showcase/app\", result);\n  154  	}\n  ...\n  160  		this.request.setServletPath(\"/app\");\n  161  		this.request.setRequestURI(\"/mvc-showcase/app/simple\");\n  162: 		String result = ServletUriComponentsBuilder.fromServletMapping(this.request).build().toUriString();\n  163  		assertEquals(\"http://localhost/prefix/mvc-showcase/app\", result);\n  164  	}\n  ...\n  170  		RequestContextHolder.setRequestAttributes(new ServletRequestAttributes(this.request));\n  171  		try {\n  172: 			String result = ServletUriComponentsBuilder.fromCurrentRequest().build().toUriString();\n  173  			assertEquals(\"http://localhost/mvc-showcase/data/param?foo=123\", result);\n  174  		}\n  ...\n  183  	public void pathExtension() {\n  184  		this.request.setRequestURI(\"/rest/books/6.json\");\n  185: 		ServletUriComponentsBuilder builder = ServletUriComponentsBuilder.fromRequestUri(this.request);\n  186  		String extension = builder.removePathExtension();\n  187  		String result = builder.path(\"/pages/1.{ext}\").buildAndExpand(extension).toUriString();\n  ...\n  192  	public void pathExtensionNone() {\n  193  		this.request.setRequestURI(\"/rest/books/6\");\n  194: 		ServletUriComponentsBuilder builder = ServletUriComponentsBuilder.fromRequestUri(this.request);\n  195  		assertNull(builder.removePathExtension());\n  196  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-webmvc\\src\\test\\resources\\org\\springframework\\web\\context\\ref1.xml:\n   16  \n   17    <!-- while the following two could be inside another, also on the classpath,\n   18: 	perhaps coming from another component jar -->\n   19    <bean id=\"another.qualified.name\"\n   20        class=\"org.springframework.context.support.ClassPathXmlApplicationContext\">\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\client\\AbstractWebSocketClient.java:\n   34  import org.springframework.web.socket.WebSocketHttpHeaders;\n   35  import org.springframework.web.socket.WebSocketSession;\n   36: import org.springframework.web.util.UriComponentsBuilder;\n   37  \n   38  /**\n   ..\n   66  \n   67  		Assert.notNull(uriTemplate, \"uriTemplate must not be null\");\n   68: 		URI uri = UriComponentsBuilder.fromUriString(uriTemplate).buildAndExpand(uriVars).encode().toUri();\n   69  		return doHandshake(webSocketHandler, null, uri);\n   70  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\client\\ConnectionManagerSupport.java:\n   23  \n   24  import org.springframework.context.SmartLifecycle;\n   25: import org.springframework.web.util.UriComponentsBuilder;\n   26  \n   27  /**\n   ..\n   52  \n   53  	public ConnectionManagerSupport(String uriTemplate, Object... uriVariables) {\n   54: 		this.uri = UriComponentsBuilder.fromUriString(uriTemplate).buildAndExpand(\n   55  				uriVariables).encode().toUri();\n   56  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\client\\jetty\\JettyWebSocketClient.java:\n   42  import org.springframework.web.socket.adapter.jetty.WebSocketToJettyExtensionConfigAdapter;\n   43  import org.springframework.web.socket.client.AbstractWebSocketClient;\n   44: import org.springframework.web.util.UriComponents;\n   45: import org.springframework.web.util.UriComponentsBuilder;\n   46  \n   47  /**\n   ..\n  146  			String uriTemplate, Object... uriVars) {\n  147  \n  148: 		UriComponents uriComponents = UriComponentsBuilder.fromUriString(uriTemplate).buildAndExpand(uriVars).encode();\n  149: 		return doHandshake(webSocketHandler, null, uriComponents.toUri());\n  150  	}\n  151  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\config\\HandlersBeanDefinitionParser.java:\n   25  import org.springframework.beans.factory.config.ConstructorArgumentValues;\n   26  import org.springframework.beans.factory.config.RuntimeBeanReference;\n   27: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   28: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   29  import org.springframework.beans.factory.support.ManagedList;\n   30  import org.springframework.beans.factory.support.ManagedMap;\n   ..\n   59  	public BeanDefinition parse(Element element, ParserContext context) {\n   60  		Object source = context.extractSource(element);\n   61: 		CompositeComponentDefinition compDefinition = new CompositeComponentDefinition(element.getTagName(), source);\n   62: 		context.pushContainingComponent(compDefinition);\n   63  \n   64  		String orderAttribute = element.getAttribute(\"order\");\n   ..\n   95  		handlerMappingDef.getPropertyValues().add(\"urlMap\", urlMap);\n   96  \n   97: 		context.registerComponent(new BeanComponentDefinition(handlerMappingDef, handlerMappingName));\n   98: 		context.popAndRegisterContainingComponent();\n   99  		return null;\n  100  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\config\\MessageBrokerBeanDefinitionParser.java:\n   30  import org.springframework.beans.factory.config.CustomScopeConfigurer;\n   31  import org.springframework.beans.factory.config.RuntimeBeanReference;\n   32: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   33: import org.springframework.beans.factory.parsing.CompositeComponentDefinition;\n   34  import org.springframework.beans.factory.support.GenericBeanDefinition;\n   35  import org.springframework.beans.factory.support.ManagedList;\n   ..\n  118  \n  119  		Object source = context.extractSource(element);\n  120: 		CompositeComponentDefinition compDefinition = new CompositeComponentDefinition(element.getTagName(), source);\n  121: 		context.pushContainingComponent(compDefinition);\n  122  \n  123  		Element channelElem = DomUtils.getChildElementByTagName(element, \"client-inbound-channel\");\n  ...\n  166  		registerWebSocketMessageBrokerStats(broker, inChannel, outChannel, context, source);\n  167  \n  168: 		context.popAndRegisterContainingComponent();\n  169  		return null;\n  170  	}\n  ...\n  548  			validatorDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n  549  			String validatorName = parserContext.getReaderContext().registerWithGeneratedName(validatorDef);\n  550: 			parserContext.registerComponent(new BeanComponentDefinition(validatorDef, validatorName));\n  551  			return new RuntimeBeanReference(validatorName);\n  552  		}\n  ...\n  637  		beanDef.setRole(BeanDefinition.ROLE_INFRASTRUCTURE);\n  638  		context.getRegistry().registerBeanDefinition(name, beanDef);\n  639: 		context.registerComponent(new BeanComponentDefinition(beanDef, name));\n  640  	}\n  641  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\config\\WebSocketMessageBrokerStats.java:\n   35  /**\n   36   * A central class for aggregating information about internal state and counters\n   37:  * from key infrastructure components of the setup that comes with\n   38   * {@code @EnableWebSocketMessageBroker} for Java config and\n   39   * {@code <websocket:message-broker>} for XML.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\config\\WebSocketNamespaceUtils.java:\n   24  import org.springframework.beans.factory.config.BeanDefinition;\n   25  import org.springframework.beans.factory.config.RuntimeBeanReference;\n   26: import org.springframework.beans.factory.parsing.BeanComponentDefinition;\n   27  import org.springframework.beans.factory.support.ManagedList;\n   28  import org.springframework.beans.factory.support.RootBeanDefinition;\n   ..\n  166  			taskSchedulerDef.getPropertyValues().add(\"removeOnCancelPolicy\", true);\n  167  			context.getRegistry().registerBeanDefinition(schedulerName, taskSchedulerDef);\n  168: 			context.registerComponent(new BeanComponentDefinition(taskSchedulerDef, schedulerName));\n  169  		}\n  170  		return new RuntimeBeanReference(schedulerName);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\messaging\\AbstractSubProtocolEvent.java:\n   40  	/**\n   41  	 * Create a new AbstractSubProtocolEvent.\n   42: 	 * @param source the component that published the event (never {@code null})\n   43  	 * @param message the incoming message\n   44  	 */\n   ..\n   52  	/**\n   53  	 * Create a new AbstractSubProtocolEvent.\n   54: 	 * @param source the component that published the event (never {@code null})\n   55  	 * @param message the incoming message\n   56  	 */\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\messaging\\SessionConnectedEvent.java:\n   33  	/**\n   34  	 * Create a new SessionConnectedEvent.\n   35: 	 * @param source the component that published the event (never {@code null})\n   36  	 * @param message the connected message\n   37  	 */\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\messaging\\SessionConnectEvent.java:\n   37  	/**\n   38  	 * Create a new SessionConnectEvent.\n   39: 	 * @param source the component that published the event (never {@code null})\n   40  	 * @param message the connect message\n   41  	 */\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\messaging\\SessionDisconnectEvent.java:\n   43  	/**\n   44  	 * Create a new SessionDisconnectEvent.\n   45: 	 * @param source the component that published the event (never {@code null})\n   46  	 * @param message the message\n   47  	 * @param sessionId the disconnect message\n   ..\n   56  	/**\n   57  	 * Create a new SessionDisconnectEvent.\n   58: 	 * @param source the component that published the event (never {@code null})\n   59  	 * @param message the message\n   60  	 * @param sessionId the disconnect message\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\messaging\\WebSocketStompClient.java:\n   58  import org.springframework.web.socket.client.WebSocketClient;\n   59  import org.springframework.web.socket.sockjs.transport.SockJsSession;\n   60: import org.springframework.web.util.UriComponentsBuilder;\n   61  \n   62  /**\n   ..\n  252  \n  253  		Assert.notNull(url, \"'url' must not be null\");\n  254: 		URI uri = UriComponentsBuilder.fromUriString(url).buildAndExpand(uriVariables).encode().toUri();\n  255  		return connect(uri, handshakeHeaders, connectHeaders, handler);\n  256  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\server\\standard\\AbstractTyrusRequestUpgradeStrategy.java:\n   34  import javax.websocket.WebSocketContainer;\n   35  \n   36: import org.glassfish.tyrus.core.ComponentProviderService;\n   37  import org.glassfish.tyrus.core.RequestContext;\n   38  import org.glassfish.tyrus.core.TyrusEndpointWrapper;\n   ..\n  106  \n  107  \n  108: 	private final ComponentProviderService componentProvider = ComponentProviderService.create();\n  109  \n  110  \n  ...\n  172  		endpointConfig.setSubprotocols(Collections.singletonList(protocol));\n  173  		endpointConfig.setExtensions(extensions);\n  174: 		return createEndpoint(endpointConfig, this.componentProvider, container, engine);\n  175  	}\n  176  \n  ...\n  200  	}\n  201  \n  202: 	private Object createEndpoint(ServerEndpointRegistration registration, ComponentProviderService provider,\n  203  			WebSocketContainer container, TyrusWebSocketEngine engine) throws DeploymentException {\n  204  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\server\\standard\\SpringConfigurator.java:\n   27  \n   28  import org.springframework.core.annotation.AnnotationUtils;\n   29: import org.springframework.stereotype.Component;\n   30  import org.springframework.util.ClassUtils;\n   31  import org.springframework.util.ObjectUtils;\n   ..\n   78  		}\n   79  \n   80: 		Component ann = AnnotationUtils.findAnnotation(endpointClass, Component.class);\n   81  		if (ann != null && wac.containsBean(ann.value())) {\n   82  			T endpoint = wac.getBean(ann.value(), endpointClass);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\sockjs\\client\\InfoReceiver.java:\n   22  \n   23  /**\n   24:  * A component that can execute the SockJS \"Info\" request that needs to be\n   25   * performed before the SockJS session starts in order to check server endpoint\n   26   * capabilities such as whether the endpoint permits use of WebSocket.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\sockjs\\client\\SockJsClient.java:\n   44  import org.springframework.web.socket.sockjs.frame.SockJsMessageCodec;\n   45  import org.springframework.web.socket.sockjs.transport.TransportType;\n   46: import org.springframework.web.util.UriComponentsBuilder;\n   47  \n   48  /**\n   ..\n  233  \n  234  		Assert.notNull(uriTemplate, \"uriTemplate must not be null\");\n  235: 		URI uri = UriComponentsBuilder.fromUriString(uriTemplate).buildAndExpand(uriVars).encode().toUri();\n  236  		return doHandshake(handler, null, uri);\n  237  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\sockjs\\client\\SockJsUrlInfo.java:\n   23  import org.springframework.util.JdkIdGenerator;\n   24  import org.springframework.web.socket.sockjs.transport.TransportType;\n   25: import org.springframework.web.util.UriComponentsBuilder;\n   26  \n   27  /**\n   ..\n   78  \n   79  	public URI getInfoUrl() {\n   80: 		return UriComponentsBuilder.fromUri(this.sockJsUrl)\n   81  				.scheme(getScheme(TransportType.XHR))\n   82  				.pathSegment(\"info\")\n   ..\n   85  \n   86  	public URI getTransportUrl(TransportType transportType) {\n   87: 		return UriComponentsBuilder.fromUri(this.sockJsUrl)\n   88  				.scheme(getScheme(transportType))\n   89  				.pathSegment(getServerId())\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\main\\java\\org\\springframework\\web\\socket\\sockjs\\transport\\handler\\AbstractHttpSendingTransportHandler.java:\n   33  import org.springframework.web.socket.sockjs.transport.SockJsSessionFactory;\n   34  import org.springframework.web.socket.sockjs.transport.session.AbstractHttpSockJsSession;\n   35: import org.springframework.web.util.UriComponentsBuilder;\n   36  import org.springframework.web.util.UriUtils;\n   37  \n   ..\n  115  	protected final String getCallbackParam(ServerHttpRequest request) {\n  116  		String query = request.getURI().getQuery();\n  117: 		MultiValueMap<String, String> params = UriComponentsBuilder.newInstance().query(query).build().getQueryParams();\n  118  		String value = params.getFirst(\"c\");\n  119  		if (StringUtils.isEmpty(value)) {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\test\\java\\org\\springframework\\web\\socket\\client\\WebSocketConnectionManagerTests.java:\n   33  import org.springframework.web.socket.handler.TextWebSocketHandler;\n   34  import org.springframework.web.socket.handler.WebSocketHandlerDecorator;\n   35: import org.springframework.web.util.UriComponentsBuilder;\n   36  \n   37  import static org.junit.Assert.*;\n   ..\n  114  		@Override\n  115  		public ListenableFuture<WebSocketSession> doHandshake(WebSocketHandler handler, String uriTemplate, Object... uriVars) {\n  116: 			URI uri = UriComponentsBuilder.fromUriString(uriTemplate).buildAndExpand(uriVars).encode().toUri();\n  117  			return doHandshake(handler, null, uri);\n  118  		}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\test\\java\\org\\springframework\\web\\socket\\messaging\\StompWebSocketIntegrationTests.java:\n   31  import org.springframework.beans.factory.annotation.Autowired;\n   32  import org.springframework.context.annotation.Bean;\n   33: import org.springframework.context.annotation.ComponentScan;\n   34  import org.springframework.context.annotation.Configuration;\n   35  import org.springframework.context.annotation.Scope;\n   ..\n  317  \n  318  	@Configuration\n  319: 	@ComponentScan(\n  320  			basePackageClasses=StompWebSocketIntegrationTests.class,\n  321  			useDefaultFilters=false,\n  322: 			includeFilters=@ComponentScan.Filter(IntegrationTestController.class))\n  323  	static class TestMessageBrokerConfigurer extends AbstractWebSocketMessageBrokerConfigurer {\n  324  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\spring-websocket\\src\\test\\java\\org\\springframework\\web\\socket\\server\\standard\\SpringConfiguratorTests.java:\n   25  import org.springframework.beans.factory.annotation.Autowired;\n   26  import org.springframework.context.annotation.Bean;\n   27: import org.springframework.context.annotation.ComponentScan;\n   28  import org.springframework.context.annotation.Configuration;\n   29  import org.springframework.mock.web.test.MockServletContext;\n   30: import org.springframework.stereotype.Component;\n   31  import org.springframework.web.context.ContextLoader;\n   32  import org.springframework.web.context.support.AnnotationConfigWebApplicationContext;\n   ..\n   78  \n   79  	@Test\n   80: 	public void getEndpointSingletonByComponentName() throws Exception {\n   81: 		ComponentEchoEndpoint expected = this.webAppContext.getBean(ComponentEchoEndpoint.class);\n   82: 		ComponentEchoEndpoint actual = this.configurator.getEndpointInstance(ComponentEchoEndpoint.class);\n   83  		assertSame(expected, actual);\n   84  	}\n   ..\n   86  \n   87  	@Configuration\n   88: 	@ComponentScan(basePackageClasses=SpringConfiguratorTests.class)\n   89  	static class Config {\n   90  \n   ..\n  112  	}\n  113  \n  114: 	@Component(\"myComponentEchoEndpoint\")\n  115  	@ServerEndpoint(\"/echo\")\n  116: 	private static class ComponentEchoEndpoint {\n  117  \n  118  		@SuppressWarnings(\"unused\")\n  ...\n  120  \n  121  		@Autowired\n  122: 		public ComponentEchoEndpoint(EchoService service) {\n  123  			this.service = service;\n  124  		}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\appendix.adoc:\n 1655  ==== Using metadata-driven auto-proxying\n 1656  A particularly important type of autoproxying is driven by metadata. This produces a\n 1657: similar programming model to .NET `ServicedComponents`. Instead of using XML deployment\n 1658  descriptors as in EJB, configuration for transaction management and other enterprise\n 1659  services is held in source-level attributes.\n ....\n 1749  definitions will result in Spring automatically proxying all classes or methods with\n 1750  transaction attributes. You won't need to work directly with AOP, and the programming\n 1751: model is similar to that of .NET ServicedComponents.\n 1752  ====\n 1753  \n ....\n 3086  \n 3087  \n 3088: [[xsd-config-body-schemas-context-component-scan]]\n 3089: ===== <component-scan/>\n 3090  \n 3091  This element is detailed in <<beans-annotation-config>>.\n ....\n 3566  	<beans xmlns=\"http://www.springframework.org/schema/beans\"\n 3567  		xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n 3568: 		xmlns:foo=\"http://www.foo.com/schema/component\"\n 3569  		xsi:schemaLocation=\"\n 3570  			http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n 3571: 			http://www.foo.com/schema/component http://www.foo.com/schema/component/component.xsd\">\n 3572  \n 3573: 		<foo:component id=\"bionic-family\" name=\"Bionic-1\">\n 3574: 			<foo:component name=\"Mother-1\">\n 3575: 				<foo:component name=\"Karate-1\"/>\n 3576: 				<foo:component name=\"Sport-1\"/>\n 3577: 			</foo:component>\n 3578: 			<foo:component name=\"Rock-1\"/>\n 3579: 		</foo:component>\n 3580  \n 3581  	</beans>\n ....\n 3583  \n 3584  The above configuration actually nests custom extensions within each other. The class\n 3585: that is actually configured by the above `<foo:component/>` element is the `Component`\n 3586: class (shown directly below). Notice how the `Component` class does __not__ expose a\n 3587: setter method for the `'components'` property; this makes it hard (or rather impossible)\n 3588: to configure a bean definition for the `Component` class using setter injection.\n 3589  \n 3590  [source,java,indent=0]\n ....\n 3596  	import java.util.List;\n 3597  \n 3598: 	public class Component {\n 3599  \n 3600  		private String name;\n 3601: 		private List<Component> components = new ArrayList<Component> ();\n 3602  \n 3603: 		// mmm, there is no setter method for the 'components'\n 3604: 		public void addComponent(Component component) {\n 3605: 			this.components.add(component);\n 3606  		}\n 3607  \n 3608: 		public List<Component> getComponents() {\n 3609: 			return components;\n 3610  		}\n 3611  \n ....\n 3622  \n 3623  The typical solution to this issue is to create a custom `FactoryBean` that exposes a\n 3624: setter property for the `'components'` property.\n 3625  \n 3626  [source,java,indent=0]\n ....\n 3633  	import java.util.List;\n 3634  \n 3635: 	public class ComponentFactoryBean implements FactoryBean<Component> {\n 3636  \n 3637: 		private Component parent;\n 3638: 		private List<Component> children;\n 3639  \n 3640: 		public void setParent(Component parent) {\n 3641  			this.parent = parent;\n 3642  		}\n 3643  \n 3644: 		public void setChildren(List<Component> children) {\n 3645  			this.children = children;\n 3646  		}\n 3647  \n 3648: 		public Component getObject() throws Exception {\n 3649  			if (this.children != null && this.children.size() > 0) {\n 3650: 				for (Component child : children) {\n 3651: 					this.parent.addComponent(child);\n 3652  				}\n 3653  			}\n ....\n 3655  		}\n 3656  \n 3657: 		public Class<Component> getObjectType() {\n 3658: 			return Component.class;\n 3659  		}\n 3660  \n ....\n 3677  	<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n 3678  \n 3679: 	<xsd:schema xmlns=\"http://www.foo.com/schema/component\"\n 3680  			xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n 3681: 			targetNamespace=\"http://www.foo.com/schema/component\"\n 3682  			elementFormDefault=\"qualified\"\n 3683  			attributeFormDefault=\"unqualified\">\n 3684  \n 3685: 		<xsd:element name=\"component\">\n 3686  			<xsd:complexType>\n 3687  				<xsd:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n 3688: 					<xsd:element ref=\"component\"/>\n 3689  				</xsd:choice>\n 3690  				<xsd:attribute name=\"id\" type=\"xsd:ID\"/>\n ....\n 3705  	import org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n 3706  \n 3707: 	public class ComponentNamespaceHandler extends NamespaceHandlerSupport {\n 3708  \n 3709  		public void init() {\n 3710: 			registerBeanDefinitionParser(\"component\", new ComponentBeanDefinitionParser());\n 3711  		}\n 3712  \n ....\n 3715  \n 3716  Next up is the custom `BeanDefinitionParser`. Remember that what we are creating is a\n 3717: `BeanDefinition` describing a `ComponentFactoryBean`.\n 3718  \n 3719  [source,java,indent=0]\n ....\n 3733  	import java.util.List;\n 3734  \n 3735: 	public class ComponentBeanDefinitionParser extends AbstractBeanDefinitionParser {\n 3736  \n 3737  		protected AbstractBeanDefinition parseInternal(Element element, ParserContext parserContext) {\n 3738: 			return parseComponentElement(element);\n 3739  		}\n 3740  \n 3741: 		private static AbstractBeanDefinition parseComponentElement(Element element) {\n 3742: 			BeanDefinitionBuilder factory = BeanDefinitionBuilder.rootBeanDefinition(ComponentFactoryBean.class);\n 3743: 			factory.addPropertyValue(\"parent\", parseComponent(element));\n 3744  \n 3745: 			List<Element> childElements = DomUtils.getChildElementsByTagName(element, \"component\");\n 3746  			if (childElements != null && childElements.size() > 0) {\n 3747: 				parseChildComponents(childElements, factory);\n 3748  			}\n 3749  \n ....\n 3751  		}\n 3752  \n 3753: 		private static BeanDefinition parseComponent(Element element) {\n 3754: 			BeanDefinitionBuilder component = BeanDefinitionBuilder.rootBeanDefinition(Component.class);\n 3755: 			component.addPropertyValue(\"name\", element.getAttribute(\"name\"));\n 3756: 			return component.getBeanDefinition();\n 3757  		}\n 3758  \n 3759: 		private static void parseChildComponents(List<Element> childElements, BeanDefinitionBuilder factory) {\n 3760  			ManagedList<BeanDefinition> children = new ManagedList<BeanDefinition>(childElements.size());\n 3761  			for (Element element : childElements) {\n 3762: 				children.add(parseComponentElement(element));\n 3763  			}\n 3764  			factory.addPropertyValue(\"children\", children);\n ....\n 3774  ----\n 3775  # in 'META-INF/spring.handlers'\n 3776: http\\://www.foo.com/schema/component=com.foo.ComponentNamespaceHandler\n 3777  ----\n 3778  \n ....\n 3781  ----\n 3782  # in 'META-INF/spring.schemas'\n 3783: http\\://www.foo.com/schema/component/component.xsd=com/foo/component.xsd\n 3784  ----\n 3785  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\core-aop-api.adoc:\n 1372  === Using metadata-driven auto-proxying\n 1373  A particularly important type of auto-proxying is driven by metadata. This produces a\n 1374: similar programming model to .NET `ServicedComponents`. Instead of defining metadata in\n 1375  XML descriptors, configuration for transaction management and other enterprise services\n 1376  is held in source-level attributes.\n ....\n 1466  definitions will result in Spring automatically proxying all classes or methods with\n 1467  transaction attributes. You won't need to work directly with AOP, and the programming\n 1468: model is similar to that of .NET ServicedComponents.\n 1469  ====\n 1470  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\core-aop.adoc:\n   12  AOP literature.)\n   13  \n   14: One of the key components of Spring is the __AOP framework__. While the Spring IoC\n   15  container does not depend on AOP, meaning you do not need to use AOP if you don't want\n   16  to, AOP complements Spring IoC to provide a very capable middleware solution.\n   ..\n  303  declarations.\n  304  \n  305: .Autodetecting aspects through component scanning\n  306  [NOTE]\n  307  ====\n  ...\n  309  autodetect them through classpath scanning - just like any other Spring-managed bean.\n  310  However, note that the __@Aspect__ annotation is __not__ sufficient for autodetection in\n  311: the classpath: For that purpose, you need to add a separate __@Component__ annotation\n  312  (or alternatively a custom stereotype annotation that qualifies, as per the rules of\n  313: Spring's component scanner).\n  314  ====\n  315  \n  ...\n  472  \n  473  It is a best practice to build more complex pointcut expressions out of smaller named\n  474: components as shown above. When referring to pointcuts by name, normal Java visibility\n  475  rules apply (you can see private pointcuts in the same type, protected pointcuts in the\n  476  hierarchy, public pointcuts anywhere and so on). Visibility does not affect pointcut\n  ...\n  591  type. The name pattern matches the method name. You can use the `{asterisk}` wildcard as all or\n  592  part of a name pattern. If specifying a declaring type pattern\n  593: then include a trailing `.` to join it to the name pattern component.\n  594  The parameters pattern is slightly more complex: `()` matches a\n  595  method that takes no parameters, whereas `(..)` matches any number of parameters (zero\n  ...\n  797  pointcut declaration, AspectJ will rewrite it into an optimal form for the matching\n  798  process. What does this mean? Basically pointcuts are rewritten in DNF (Disjunctive\n  799: Normal Form) and the components of the pointcut are sorted such that those components\n  800  that are cheaper to evaluate are checked first. This means you do not have to worry\n  801  about understanding the performance of various pointcut designators and may supply them\n  ...\n 3094  Now to the Spring-specific portion of the configuration. We need to configure a\n 3095  `LoadTimeWeaver` (all explained later, just take it on trust for now). This load-time\n 3096: weaver is the essential component responsible for weaving the aspect configuration in\n 3097  one or more `META-INF/aop.xml` files into the classes in your application. The good\n 3098  thing is that it does not require a lot of configuration, as can be seen below (there\n ....\n 3265  [[aop-aj-ltw-spring]]\n 3266  ==== Spring configuration\n 3267: The key component in Spring's LTW support is the `LoadTimeWeaver` interface (in the\n 3268  `org.springframework.instrument.classloading` package), and the numerous implementations\n 3269  of it that ship with the Spring distribution. A `LoadTimeWeaver` is responsible for\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\core-beans.adoc:\n  440  [NOTE]\n  441  ====\n  442: With component scanning in the classpath, Spring generates bean names for unnamed\n  443: components, following the rules above: essentially, taking the simple class name\n  444  and turning its initial character to lower-case. However, in the (unusual) special\n  445  case when there is more than one character and both the first and second characters\n  ...\n  455  combination of up to one name specified by the `id` attribute, and any number of other\n  456  names in the `name` attribute. These names can be equivalent aliases to the same bean,\n  457: and are useful for some situations, such as allowing each component in an application to\n  458: refer to a common dependency by using a bean name that is specific to that component\n  459  itself.\n  460  \n  ...\n  488  ----\n  489  \n  490: Now each component and the main application can refer to the dataSource through a name\n  491  that is unique and guaranteed not to clash with any other definition (effectively\n  492  creating a namespace), yet they refer to the same bean.\n  ...\n  945  convert properties from one format to another. However, most Spring users do not work\n  946  with these classes directly (i.e., programmatically) but rather with XML `bean`\n  947: definitions, annotated components (i.e., classes annotated with `@Component`,\n  948  `@Controller`, etc.), or `@Bean` methods in Java-based `@Configuration` classes. These\n  949  sources are then converted internally into instances of `BeanDefinition` and used to\n  ...\n  958  \n  959  The Spring team generally advocates constructor injection as it enables one to implement\n  960: application components as _immutable objects_ and to ensure that required dependencies\n  961: are not `null`. Furthermore constructor-injected components are always returned to client\n  962  (calling) code in a fully initialized state. As a side note, a large number of constructor\n  963  arguments is a _bad code smell_, implying that the class likely has too many\n  ...\n 1787  \n 1788  You can use compound or nested property names when you set bean properties, as long as\n 1789: all components of the path except the final property name are not `null`. Consider the\n 1790  following bean definition.\n 1791  \n ....\n 2098  * Unit-testing a class that has an `abstract` method requires you to subclass the class\n 2099    yourself and to supply a stub implementation of the `abstract` method.\n 2100: * Concrete methods are also necessary for component scanning which requires concrete\n 2101    classes to pick up.\n 2102  * A further key limitation is that lookup methods won't work with factory methods and\n ....\n 2508  bean that is scoped to the request is discarded.\n 2509  \n 2510: When using annotation-driven components or Java Config, the `@RequestScope` annotation\n 2511: can be used to assign a component to the `request` scope.\n 2512  \n 2513  [source,java,indent=0]\n ....\n 2515  ----\n 2516  	**@RequestScope**\n 2517: 	@Component\n 2518  	public class LoginAction {\n 2519  		// ...\n ....\n 2543  `Session` is also discarded.\n 2544  \n 2545: When using annotation-driven components or Java Config, the `@SessionScope` annotation\n 2546: can be used to assign a component to the `session` scope.\n 2547  \n 2548  [source,java,indent=0]\n ....\n 2550  ----\n 2551  	**@SessionScope**\n 2552: 	@Component\n 2553  	public class UserPreferences {\n 2554  		// ...\n ....\n 2576  and it is actually exposed and therefore visible as a `ServletContext` attribute.\n 2577  \n 2578: When using annotation-driven components or Java Config, the `@ApplicationScope`\n 2579: annotation can be used to assign a component to the `application` scope.\n 2580  \n 2581  [source,java,indent=0]\n ....\n 2583  ----\n 2584  	**@ApplicationScope**\n 2585: 	@Component\n 2586  	public class AppPreferences {\n 2587  		// ...\n ....\n 3280  `Lifecycle` object that does not implement `SmartLifecycle` would be 0. Therefore, any\n 3281  negative phase value would indicate that an object should start before those standard\n 3282: components (and stop after them), and vice versa for any positive phase value.\n 3283  \n 3284  As you can see the stop method defined by `SmartLifecycle` accepts a callback. Any\n ....\n 3997  __dataSource__, which has __driver__ and __url__ properties.\n 3998  \n 3999: Compound property names are also supported, as long as every component of the path\n 4000  except the final property being overridden is already non-null (presumably initialized\n 4001  by the constructors). In this example...\n ....\n 4074  decide which strategy suits them better. Due to the way they are defined, annotations\n 4075  provide a lot of context in their declaration, leading to shorter and more concise\n 4076: configuration. However, XML excels at wiring up components without touching their source\n 4077  code or recompiling them. Some developers prefer having the wiring close to the source\n 4078  while others argue that annotated classes are no longer POJOs and, furthermore, that the\n ....\n 4081  No matter the choice, Spring can accommodate both styles and even mix them together.\n 4082  It's worth pointing out that through its <<beans-java,JavaConfig>> option, Spring allows\n 4083: annotations to be used in a non-invasive way, without touching the target components\n 4084  source code and that in terms of tooling, all configuration styles are supported by the\n 4085  https://spring.io/tools/sts[Spring Tool Suite].\n ....\n 4087  \n 4088  An alternative to XML setups is provided by annotation-based configuration which rely on\n 4089: the bytecode metadata for wiring up components instead of angle-bracket declarations.\n 4090  Instead of using XML to describe a bean wiring, the developer moves the configuration\n 4091: into the component class itself by using annotations on the relevant class, method, or\n 4092  field declaration. As mentioned in <<beans-factory-extension-bpp-examples-rabpp>>, using\n 4093  a `BeanPostProcessor` in conjunction with annotations is a common means of extending the\n ....\n 4577  fallback, always have narrowing semantics within the set of type matches; they do not\n 4578  semantically express a reference to a unique bean id. Good qualifier values are \"main\"\n 4579: or \"EMEA\" or \"persistent\", expressing characteristics of a specific component that are\n 4580  independent from the bean `id`, which may be auto-generated in case of an anonymous bean\n 4581  definition like the one in the preceding example.\n ....\n 4594  `@Autowired`, even if is technically capable of referring to a bean name through\n 4595  `@Qualifier` values. Instead, use the JSR-250 `@Resource` annotation, which is\n 4596: semantically defined to identify a specific target component by its unique name, with\n 4597  the declared type being irrelevant for the matching process. `@Autowired` has rather\n 4598  different semantics: After selecting candidate beans by type, the specified String\n ....\n 4610  As of 4.3, `@Autowired` also considers self references for injection, i.e. references\n 4611  back to the bean that is currently injected. Note that self injection is a fallback;\n 4612: regular dependencies on other components always have precedence. In that sense, self\n 4613  references do not participate in regular candidate selection and are therefore in\n 4614  particular never primary; on the contrary, they always end up as lowest precedence.\n ....\n 5078  \n 5079  [[beans-classpath-scanning]]\n 5080: == Classpath scanning and managed components\n 5081  Most examples in this chapter use XML to specify the configuration metadata that produces\n 5082  each `BeanDefinition` within the Spring container. The previous section\n ....\n 5085  bean definitions are explicitly defined in the XML file, while the annotations only drive\n 5086  the dependency injection. This section describes an option for implicitly detecting the\n 5087: __candidate components__ by scanning the classpath. Candidate components are classes that\n 5088  match against a filter criteria and have a corresponding bean definition registered with\n 5089  the container. This removes the need to use XML to perform bean registration; instead you\n 5090: can use annotations (for example `@Component`), AspectJ type expressions, or your own\n 5091  custom filter criteria to select which classes will have bean definitions registered with\n 5092  the container.\n ....\n 5103  \n 5104  [[beans-stereotype-annotations]]\n 5105: === @Component and further stereotype annotations\n 5106  \n 5107  The `@Repository` annotation is a marker for any class that fulfills the role or\n ....\n 5110  <<orm-exception-translation>>.\n 5111  \n 5112: Spring provides further stereotype annotations: `@Component`, `@Service`, and\n 5113: `@Controller`. `@Component` is a generic stereotype for any Spring-managed component.\n 5114: `@Repository`, `@Service`, and `@Controller` are specializations of `@Component` for\n 5115  more specific use cases, for example, in the persistence, service, and presentation\n 5116: layers, respectively. Therefore, you can annotate your component classes with\n 5117: `@Component`, but by annotating them with `@Repository`, `@Service`, or `@Controller`\n 5118  instead, your classes are more properly suited for processing by tools or associating\n 5119  with aspects. For example, these stereotype annotations make ideal targets for\n 5120  pointcuts. It is also possible that `@Repository`, `@Service`, and `@Controller` may\n 5121  carry additional semantics in future releases of the Spring Framework. Thus, if you are\n 5122: choosing between using `@Component` or `@Service` for your service layer, `@Service` is\n 5123  clearly the better choice. Similarly, as stated above, `@Repository` is already\n 5124  supported as a marker for automatic exception translation in your persistence layer.\n ....\n 5132  own code. A meta-annotation is simply an annotation that can be applied to another\n 5133  annotation. For example, the `@Service` annotation mentioned above is meta-annotated with\n 5134: `@Component`:\n 5135  \n 5136  [source,java,indent=0]\n ....\n 5140  	@Retention(RetentionPolicy.RUNTIME)\n 5141  	@Documented\n 5142: 	**@Component** // Spring will see this and treat @Service in the same way as @Component\n 5143  	public @interface Service {\n 5144  \n ....\n 5236  \n 5237  To autodetect these classes and register the corresponding beans, you need to add\n 5238: `@ComponentScan` to your `@Configuration` class, where the `basePackages` attribute\n 5239  is a common parent package for the two classes. (Alternatively, you can specify a\n 5240  comma/semicolon/space-separated list that includes the parent package of each class.)\n ....\n 5244  ----\n 5245  	@Configuration\n 5246: 	@ComponentScan(basePackages = \"org.example\")\n 5247  	public class AppConfig  {\n 5248      	...\n ....\n 5253  ====\n 5254  for concision, the above may have used the `value` attribute of the\n 5255: annotation, i.e. `@ComponentScan(\"org.example\")`\n 5256  ====\n 5257  \n ....\n 5270  			http://www.springframework.org/schema/context/spring-context.xsd\">\n 5271  \n 5272: 		<context:component-scan base-package=\"org.example\"/>\n 5273  \n 5274  	</beans>\n ....\n 5278  ====\n 5279  \n 5280: The use of `<context:component-scan>` implicitly enables the functionality of\n 5281  `<context:annotation-config>`. There is usually no need to include the\n 5282: `<context:annotation-config>` element when using `<context:component-scan>`.\n 5283  ====\n 5284  \n ....\n 5295  Furthermore, the `AutowiredAnnotationBeanPostProcessor` and\n 5296  `CommonAnnotationBeanPostProcessor` are both included implicitly when you use the\n 5297: component-scan element. That means that the two components are autodetected __and__\n 5298  wired together - all without any bean configuration metadata provided in XML.\n 5299  \n ....\n 5310  === Using filters to customize scanning\n 5311  \n 5312: By default, classes annotated with `@Component`, `@Repository`, `@Service`,\n 5313: `@Controller`, or a custom annotation that itself is annotated with `@Component` are the\n 5314: only detected candidate components. However, you can modify and extend this behavior\n 5315  simply by applying custom filters. Add them as __includeFilters__ or __excludeFilters__\n 5316: parameters of the `@ComponentScan` annotation (or as __include-filter__ or __exclude-filter__\n 5317: sub-elements of the `component-scan` element). Each filter element requires the `type`\n 5318  and `expression` attributes. The following table describes the filtering options.\n 5319  \n ....\n 5325  | annotation (default)\n 5326  | `org.example.SomeAnnotation`\n 5327: | An annotation to be present at the type level in target components.\n 5328  \n 5329  | assignable\n 5330  | `org.example.SomeClass`\n 5331: | A class (or interface) that the target components are assignable to (extend/implement).\n 5332  \n 5333  | aspectj\n 5334  | `org.example..*Service+`\n 5335: | An AspectJ type expression to be matched by the target components.\n 5336  \n 5337  | regex\n 5338  | `org\\.example\\.Default.*`\n 5339: | A regex expression to be matched by the target components class names.\n 5340  \n 5341  | custom\n ....\n 5352  ----\n 5353  	@Configuration\n 5354:     @ComponentScan(basePackages = \"org.example\",\n 5355      		includeFilters = @Filter(type = FilterType.REGEX, pattern = \".*Stub.*Repository\"),\n 5356      		excludeFilters = @Filter(Repository.class))\n ....\n 5366  ----\n 5367  	<beans>\n 5368: 		<context:component-scan base-package=\"org.example\">\n 5369  			<context:include-filter type=\"regex\"\n 5370  					expression=\".*Stub.*Repository\"/>\n 5371  			<context:exclude-filter type=\"annotation\"\n 5372  					expression=\"org.springframework.stereotype.Repository\"/>\n 5373: 		</context:component-scan>\n 5374  	</beans>\n 5375  ----\n ....\n 5378  ====\n 5379  You can also disable the default filters by setting `useDefaultFilters=false` on the annotation or\n 5380: providing `use-default-filters=\"false\"` as an attribute of the `<component-scan/>` element. This\n 5381: will in effect disable automatic detection of classes annotated with `@Component`, `@Repository`,\n 5382  `@Service`, `@Controller`, or `@Configuration`.\n 5383  ====\n ....\n 5386  \n 5387  [[beans-factorybeans-annotations]]\n 5388: === Defining bean metadata within components\n 5389  \n 5390: Spring components can also contribute bean definition metadata to the container. You do\n 5391  this with the same `@Bean` annotation used to define bean metadata within `@Configuration`\n 5392  annotated classes. Here is a simple example:\n ....\n 5395  [subs=\"verbatim,quotes\"]\n 5396  ----\n 5397: 	@Component\n 5398: 	public class FactoryMethodComponent {\n 5399  \n 5400  		@Bean\n ....\n 5405  \n 5406  		public void doWork() {\n 5407: 			// Component method implementation omitted\n 5408  		}\n 5409  \n ....\n 5411  ----\n 5412  \n 5413: This class is a Spring component that has application-specific code contained in its\n 5414  `doWork()` method. However, it also contributes a bean definition that has a factory\n 5415  method referring to the method `publicInstance()`. The `@Bean` annotation identifies the\n ....\n 5420  [TIP]\n 5421  ====\n 5422: In addition to its role for component initialization, the `@Lazy` annotation may also be\n 5423  placed on injection points marked with `@Autowired` or `@Inject`. In this context, it\n 5424  leads to the injection of a lazy-resolution proxy.\n ....\n 5431  [subs=\"verbatim,quotes\"]\n 5432  ----\n 5433: 	@Component\n 5434: 	public class FactoryMethodComponent {\n 5435  \n 5436  		private static int i;\n ....\n 5474  resolving expression text.\n 5475  \n 5476: The `@Bean` methods in a Spring component are processed differently than their\n 5477: counterparts inside a Spring `@Configuration` class. The difference is that `@Component`\n 5478  classes are not enhanced with CGLIB to intercept the invocation of methods and fields.\n 5479  CGLIB proxying is the means by which invoking methods or fields within `@Bean` methods\n ....\n 5482  container in order to provide the usual lifecycle management and proxying of Spring\n 5483  beans even when referring to other beans via programmatic calls to `@Bean` methods.\n 5484: In contrast, invoking a method or field in an `@Bean` method within a plain `@Component`\n 5485  class __has__ standard Java semantics, with no special CGLIB processing or other\n 5486  constraints applying.\n ....\n 5506  to be overridable, i.e. they must not be declared as `private` or `final`.\n 5507  \n 5508: `@Bean` methods will also be discovered on base classes of a given component or\n 5509  configuration class, as well as on Java 8 default methods declared in interfaces\n 5510: implemented by the component or configuration class. This allows for a lot of\n 5511  flexibility in composing complex configuration arrangements, with even multiple\n 5512  inheritance being possible through Java 8 default methods as of Spring 4.2.\n ....\n 5523  \n 5524  [[beans-scanning-name-generator]]\n 5525: === Naming autodetected components\n 5526  \n 5527: When a component is autodetected as part of the scanning process, its bean name is\n 5528  generated by the `BeanNameGenerator` strategy known to that scanner. By default, any\n 5529: Spring stereotype annotation (`@Component`, `@Repository`, `@Service`, and\n 5530  `@Controller`) that contains a _name_ `value` will thereby provide that name to the\n 5531  corresponding bean definition.\n 5532  \n 5533: If such an annotation contains no _name_ `value` or for any other detected component (such\n 5534  as those discovered by custom filters), the default bean name generator returns the\n 5535: uncapitalized non-qualified class name. For example, if the following two components\n 5536  were detected, the names would be `myMovieLister` and `movieFinderImpl`:\n 5537  \n ....\n 5567  ----\n 5568  	@Configuration\n 5569:     @ComponentScan(basePackages = \"org.example\", nameGenerator = MyNameGenerator.class)\n 5570      public class AppConfig {\n 5571      	...\n ....\n 5577  ----\n 5578  	<beans>\n 5579: 		<context:component-scan base-package=\"org.example\"\n 5580  			name-generator=\"org.example.MyNameGenerator\" />\n 5581  	</beans>\n ....\n 5583  \n 5584  As a general rule, consider specifying the name with the annotation whenever other\n 5585: components may be making explicit references to it. On the other hand, the\n 5586  auto-generated names are adequate whenever the container is responsible for wiring.\n 5587  \n ....\n 5589  \n 5590  [[beans-scanning-scope-resolver]]\n 5591: === Providing a scope for autodetected components\n 5592  \n 5593: As with Spring-managed components in general, the default and most common scope for\n 5594: autodetected components is `singleton`. However, sometimes you need a different scope\n 5595  which can be specified via the `@Scope` annotation. Simply provide the name of the scope\n 5596  within the annotation:\n ....\n 5622  ----\n 5623  	@Configuration\n 5624: 	@ComponentScan(basePackages = \"org.example\", scopeResolver = MyScopeResolver.class)\n 5625  	public class AppConfig {\n 5626      	...\n ....\n 5632  ----\n 5633  	<beans>\n 5634: 		<context:component-scan base-package=\"org.example\"\n 5635  				scope-resolver=\"org.example.MyScopeResolver\" />\n 5636  	</beans>\n ....\n 5639  When using certain non-singleton scopes, it may be necessary to generate proxies for the\n 5640  scoped objects. The reasoning is described in <<beans-factory-scopes-other-injection>>.\n 5641: For this purpose, a __scoped-proxy__ attribute is available on the component-scan\n 5642  element. The three possible values are: no, interfaces, and targetClass. For example,\n 5643  the following configuration will result in standard JDK dynamic proxies:\n ....\n 5647  ----\n 5648  	@Configuration\n 5649: 	@ComponentScan(basePackages = \"org.example\", scopedProxy = ScopedProxyMode.INTERFACES)\n 5650  	public class AppConfig {\n 5651      	...\n ....\n 5657  ----\n 5658  	<beans>\n 5659: 		<context:component-scan base-package=\"org.example\"\n 5660  			scoped-proxy=\"interfaces\" />\n 5661  	</beans>\n ....\n 5673  metadata was provided on the candidate bean definitions using the `qualifier` or `meta`\n 5674  sub-elements of the `bean` element in the XML. When relying upon classpath scanning for\n 5675: autodetection of components, you provide the qualifier metadata with type-level\n 5676  annotations on the candidate class. The following three examples demonstrate this\n 5677  technique:\n ....\n 5680  [subs=\"verbatim,quotes\"]\n 5681  ----\n 5682: 	@Component\n 5683  	**@Qualifier(\"Action\")**\n 5684  	public class ActionMovieCatalog implements MovieCatalog {\n ....\n 5690  [subs=\"verbatim,quotes\"]\n 5691  ----\n 5692: 	@Component\n 5693  	**@Genre(\"Action\")**\n 5694  	public class ActionMovieCatalog implements MovieCatalog {\n ....\n 5700  [subs=\"verbatim,quotes\"]\n 5701  ----\n 5702: 	@Component\n 5703  	**@Offline**\n 5704  	public class CachingMovieCatalog implements MovieCatalog {\n ....\n 5822  \n 5823  [[beans-named]]\n 5824: === @Named and @ManagedBean: standard equivalents to the @Component annotation\n 5825  \n 5826: Instead of `@Component`, `@javax.inject.Named` or `javax.annotation.ManagedBean` may be\n 5827  used as follows:\n 5828  \n ....\n 5847  ----\n 5848  \n 5849: It is very common to use `@Component` without specifying a name for the component.\n 5850  `@Named` can be used in a similar fashion:\n 5851  \n ....\n 5870  ----\n 5871  \n 5872: When using `@Named` or `@ManagedBean`, it is possible to use component scanning in the\n 5873  exact same way as when using Spring annotations:\n 5874  \n ....\n 5877  ----\n 5878  	@Configuration\n 5879: 	@ComponentScan(basePackages = \"org.example\")\n 5880  	public class AppConfig  {\n 5881      	...\n ....\n 5885  [NOTE]\n 5886  ====\n 5887: In contrast to `@Component`, the JSR-330 `@Named` and the JSR-250 `ManagedBean`\n 5888  annotations are not composable. Please use Spring's stereotype model for building custom\n 5889: component annotations.\n 5890  ====\n 5891  \n ....\n 5899  \n 5900  [[annotations-comparison]]\n 5901: .Spring component model elements vs. JSR-330 variants\n 5902  |===\n 5903  | Spring| javax.inject.*| javax.inject restrictions / comments\n ....\n 5907  | `@Inject` has no 'required' attribute; can be used with Java 8's `Optional` instead.\n 5908  \n 5909: | @Component\n 5910  | @Named / @ManagedBean\n 5911: | JSR-330 does not provide a composable model, just a way to identify named components.\n 5912  \n 5913  | @Scope(\"singleton\")\n ....\n 5963  with Spring's `<beans/>` XML configuration the `@Bean` annotation plays the same role as\n 5964  the `<bean/>` element. You can use `@Bean` annotated methods with any Spring\n 5965: `@Component`, however, they are most often used with `@Configuration` beans.\n 5966  \n 5967  Annotating a class with `@Configuration` indicates that its primary purpose is as a\n ....\n 5998  When `@Bean` methods are declared within classes that are __not__ annotated with\n 5999  `@Configuration` they are referred to as being processed in a 'lite' mode. For example,\n 6000: bean methods declared in a `@Component` or even in a __plain old class__ will be\n 6001  considered 'lite'.\n 6002  \n ....\n 6020  The sections below document Spring's `AnnotationConfigApplicationContext`, new in Spring\n 6021  3.0. This versatile `ApplicationContext` implementation is capable of accepting not only\n 6022: `@Configuration` classes as input, but also plain `@Component` classes and classes\n 6023  annotated with JSR-330 metadata.\n 6024  \n ....\n 6027  are also registered as bean definitions.\n 6028  \n 6029: When `@Component` and JSR-330 classes are provided, they are registered as bean\n 6030  definitions, and it is assumed that DI metadata such as `@Autowired` or `@Inject` are\n 6031  used within those classes where necessary.\n ....\n 6051  \n 6052  As mentioned above, `AnnotationConfigApplicationContext` is not limited to working only\n 6053: with `@Configuration` classes. Any `@Component` or JSR-330 annotated class may be supplied\n 6054  as input to the constructor. For example:\n 6055  \n ....\n 6090  \n 6091  [[beans-java-instantiating-container-scan]]\n 6092: ==== Enabling component scanning with scan(String...)\n 6093  \n 6094: To enable component scanning, just annotate your `@Configuration` class as follows:\n 6095  \n 6096  [source,java,indent=0]\n ....\n 6098  ----\n 6099  	@Configuration\n 6100: 	@ComponentScan(basePackages = \"com.acme\")\n 6101  	public class AppConfig  {\n 6102      	...\n ....\n 6114  ----\n 6115  	<beans>\n 6116: 		<context:component-scan base-package=\"com.acme\"/>\n 6117  	</beans>\n 6118  ----\n ....\n 6121  \n 6122  In the example above, the `com.acme` package will be scanned, looking for any\n 6123: `@Component`-annotated classes, and those classes will be registered as Spring bean\n 6124  definitions within the container. `AnnotationConfigApplicationContext` exposes the\n 6125: `scan(String...)` method to allow for the same component-scanning functionality:\n 6126  \n 6127  [source,java,indent=0]\n ....\n 6139  ====\n 6140  Remember that `@Configuration` classes are <<beans-meta-annotations,meta-annotated>>\n 6141: with `@Component`, so they are candidates for component-scanning! In the example above,\n 6142  assuming that `AppConfig` is declared within the `com.acme` package (or any package\n 6143  underneath), it will be picked up during the call to `scan()`, and upon `refresh()` all\n ....\n 6172  		<!-- Configuration locations must consist of one or more comma- or space-delimited\n 6173  			fully-qualified @Configuration classes. Fully-qualified packages may also be\n 6174: 			specified for component-scanning -->\n 6175  		<context-param>\n 6176  			<param-name>contextConfigLocation</param-name>\n ....\n 6223  \n 6224  You can use the `@Bean` annotation in a `@Configuration`-annotated or in a\n 6225: `@Component`-annotated class.\n 6226  \n 6227  \n ....\n 6573  This method of declaring inter-bean dependencies only works when the `@Bean` method is\n 6574  declared within a `@Configuration` class. You cannot declare inter-bean dependencies\n 6575: using plain `@Component` classes.\n 6576  ====\n 6577  \n ....\n 6689  \n 6690  If you prefer to avoid any CGLIB-imposed limitations, consider declaring your `@Bean`\n 6691: methods on non-`@Configuration` classes, e.g. on plain `@Component` classes instead.\n 6692  Cross-method calls between `@Bean` methods won't get intercepted then, so you'll have\n 6693  to exclusively rely on dependency injection at the constructor or method level there.\n ....\n 6753  [TIP]\n 6754  ====\n 6755: As of Spring Framework 4.2, `@Import` also supports references to regular component\n 6756  classes, analogous to the `AnnotationConfigApplicationContext.register` method.\n 6757: This is particularly useful if you'd like to avoid component scanning, using a few\n 6758: configuration classes as entry points for explicitly defining all your components.\n 6759  ====\n 6760  \n ....\n 7135  --\n 7136  \n 7137: .[[beans-java-combining-xml-centric-component-scan]] Using <context:component-scan/> to pick up `@Configuration` classes\n 7138  --\n 7139: Because `@Configuration` is meta-annotated with `@Component`, `@Configuration`-annotated\n 7140: classes are automatically candidates for component scanning. Using the same scenario as\n 7141: above, we can redefine `system-test-config.xml` to take advantage of component-scanning.\n 7142  Note that in this case, we don't need to explicitly declare\n 7143: `<context:annotation-config/>`, because `<context:component-scan/>` enables the same\n 7144  functionality.\n 7145  \n ....\n 7151  	<beans>\n 7152  		<!-- picks up and registers AppConfig as a bean definition -->\n 7153: 		<context:component-scan base-package=\"com.acme\"/>\n 7154  		<context:property-placeholder location=\"classpath:/com/acme/jdbc.properties\"/>\n 7155  \n ....\n 7310  \n 7311  The {api-spring-framework}/context/annotation/Profile.html[`@Profile`]\n 7312: annotation allows you to indicate that a component is eligible for registration\n 7313  when one or more specified profiles are active. Using our example above, we\n 7314  can rewrite the `dataSource` configuration as follows:\n ....\n 7402  If a `@Configuration` class is marked with `@Profile`, all of the `@Bean` methods and\n 7403  `@Import` annotations associated with that class will be bypassed unless one or more of\n 7404: the specified profiles are active. If a `@Component` or `@Configuration` class is marked\n 7405  with `@Profile({\"p1\", \"p2\"})`, that class will not be registered/processed unless\n 7406  profiles 'p1' and/or 'p2' have been activated. If a given profile is prefixed with the\n ....\n 8015    `ConfigurableApplicationContext` interface. \"Started\" here means that all `Lifecycle`\n 8016    beans receive an explicit start signal. Typically this signal is used to restart beans\n 8017:   after an explicit stop, but it may also be used to start components that have not been\n 8018:   configured for autostart , for example, components that have not already started on\n 8019    initialization.\n 8020  \n ....\n 8454  DataSources and JMS ConnectionFactory instances, and may also register with the\n 8455  platform's JMX server - all through Spring's standard transaction management and JNDI\n 8456: and JMX support facilities. Application components can also interact with the\n 8457  application server's JCA WorkManager through Spring's `TaskExecutor` abstraction.\n 8458  \n ....\n 8471  [NOTE]\n 8472  ====\n 8473: Such RAR deployment units are usually self-contained; they do not expose components to\n 8474  the outside world, not even to other modules of the same application. Interaction with a\n 8475  RAR-based ApplicationContext usually occurs through JMS destinations that it shares with\n ....\n 8490  such as `BeanFactoryAware`, `InitializingBean`, `DisposableBean`, are still present in\n 8491  Spring for the purposes of backward compatibility with the large number of third-party\n 8492: frameworks that integrate with Spring. Often third-party components that can not use\n 8493  more modern equivalents such as `@PostConstruct` or `@PreDestroy` in order to remain\n 8494  compatible with JDK 1.4 or to avoid a dependency on JSR-250.\n ....\n 8610  \n 8611  Looking up the application context in a service locator style is sometimes the only\n 8612: option for accessing shared Spring-managed components, such as in an EJB 2.1\n 8613  environment, or when you want to share a single ApplicationContext as a parent to\n 8614  WebApplicationContexts across WAR files. In this case you should look into using the\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\core-expressions.adoc:\n  292  It is possible to configure the SpEL expression parser using a parser configuration object \n  293  (`org.springframework.expression.spel.SpelParserConfiguration`). The configuration\n  294: object controls the behavior of some of the expression components. For example, if\n  295  indexing into an array or collection and the element at the specified index is `null`\n  296  it is possible to automatically create the element. This is useful when using expressions made up of a\n  ...\n  331  interpreted which provides a lot of dynamic flexibility during evaluation but\n  332  does not provide the optimum performance. For occasional expression usage\n  333: this is fine, but when used by other components like Spring Integration, \n  334  performance can be very important and there is no real need for the dynamism.\n  335  \n  ...\n  361  The compiler is not turned on by default, but there are two ways to turn\n  362  it on. It can be turned on using the parser configuration process discussed earlier or\n  363: via a system property when SpEL usage is embedded inside another component. This section\n  364  discusses both of these options.\n  365  \n  ...\n  410  \n  411  The second way to configure the compiler is for use when SpEL is embedded inside some other\n  412: component and it may not be possible to configure via a configuration object.\n  413  In these cases it is possible to use a system property. The property \n  414  `spring.expression.compiler.mode` can be set to one of the `SpelCompilerMode` \n  ...\n  977  The variable #this is always defined and refers to the current evaluation object\n  978  (against which unqualified references are resolved). The variable #root is always\n  979: defined and refers to the root context object. Although #this may vary as components of\n  980  an expression are evaluated, #root always refers to the root.\n  981  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\core-resources.adoc:\n  468  wildcards\n  469  \n  470: One use for this mechanism is when doing component-style application assembly. All\n  471: components can 'publish' context definition fragments to a well-known location path, and\n  472  when the final application context is created using the same path prefixed via\n  473: `classpath*:`, all component fragments will be picked up automatically.\n  474  \n  475  Note that this wildcarding is specific to use of resource paths in application context\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\data-access.adoc:\n 1937  will be bound to the commit phase of the transaction by default.\n 1938  \n 1939: Let's take an example to illustrate this concept. Assume that a component publish an order\n 1940  created event and we want to define a listener that should only handle that event once the\n 1941  transaction in which it has been published as committed successfully:\n ....\n 1944  [subs=\"verbatim,quotes\"]\n 1945  ----\n 1946: 	@Component\n 1947:     public class MyComponent {\n 1948  \n 1949      	@TransactionalEventListener\n ....\n 2104  The best way to guarantee that your Data Access Objects (DAOs) or repositories provide\n 2105  exception translation is to use the `@Repository` annotation. This annotation also\n 2106: allows the component scanning support to find and configure your DAOs and repositories\n 2107  without having to provide XML configuration entries for them.\n 2108  \n ....\n 2565  ----\n 2566  \n 2567: An alternative to explicit configuration is to use component-scanning and annotation\n 2568  support for dependency injection. In this case you annotate the class with `@Repository`\n 2569: (which makes it a candidate for component-scanning) and annotate the `DataSource` setter\n 2570  method with `@Autowired`.\n 2571  \n ....\n 2602  			http://www.springframework.org/schema/context/spring-context.xsd\">\n 2603  \n 2604: 		<!-- Scans within the base package of the application for @Component classes to configure as beans -->\n 2605: 		<context:component-scan base-package=\"org.springframework.docs.test\" />\n 2606  \n 2607  		<bean id=\"dataSource\" class=\"org.apache.commons.dbcp.BasicDataSource\" destroy-method=\"close\">\n ....\n 4892  \n 4893  If you need more control than you get from the XML namespace, you can simply use the\n 4894: `DataSourceInitializer` directly and define it as a component in your application.\n 4895  \n 4896  \n 4897: [[jdbc-client-component-initialization]]\n 4898: ===== Initialization of other components that depend on the database\n 4899  \n 4900  A large class of applications can just use the database initializer with no further\n ....\n 4905  The database initializer depends on a `DataSource` instance and executes the scripts\n 4906  provided in its initialization callback (analogous to an `init-method` in an XML bean\n 4907: definition, a `@PostConstruct` method in a component, or the `afterPropertiesSet()`\n 4908: method in a component that implements `InitializingBean`). If other beans depend on the\n 4909  same data source and also use the data source in an initialization callback, then there\n 4910  might be a problem because the data has not yet been initialized. A common example of\n ....\n 4920  * Make the cache initialize lazily on first usage, which improves application startup\n 4921    time.\n 4922: * Have your cache or a separate component that initializes the cache implement\n 4923    `Lifecycle` or `SmartLifecycle`. When the application context starts up a\n 4924    `SmartLifecycle` can be automatically started if its `autoStartup` flag is set, and a\n ....\n 4937    application modules, and ensure that the database and database initialization are\n 4938    listed first.\n 4939: * Separate the `DataSource` and the business components that use it, and control their\n 4940    startup order by putting them in separate `ApplicationContext` instances (e.g. the\n 4941    parent context contains the `DataSource`, and child context contains the business\n 4942:   components). This structure is common in Spring web applications but can be more\n 4943    generally applied.\n 4944  \n ....\n 6090  EntityManager proxy. The alternative, `PersistenceContextType.EXTENDED`, is a completely\n 6091  different affair: This results in a so-called extended EntityManager, which is __not\n 6092: thread-safe__ and hence must not be used in a concurrently accessed component such as a\n 6093  Spring-managed singleton bean. Extended EntityManagers are only supposed to be used in\n 6094: stateful components that, for example, reside in a session, with the lifecycle of the\n 6095  EntityManager not tied to a current transaction but rather being completely up to the\n 6096  application.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\integration.adoc:\n  373  \n  374  Under the hood, Spring uses either the standard facilities provided by the JDK or\n  375: Apache `HttpComponents` to perform HTTP calls. Use the latter if you need more\n  376  advanced and easier-to-use functionality. Refer to\n  377: http://hc.apache.org/httpcomponents-client-ga/[hc.apache.org/httpcomponents-client-ga/]\n  378  for more information.\n  379  \n  ...\n  476  As mentioned before, you can choose what HTTP client you want to use. By default, the\n  477  `HttpInvokerProxy` uses the JDK's HTTP functionality, but you can also use the Apache\n  478: `HttpComponents` client by setting the `httpInvokerRequestExecutor` property:\n  479  \n  480  [source,xml,indent=0]\n  ...\n  482  ----\n  483  	<property name=\"httpInvokerRequestExecutor\">\n  484: 		<bean class=\"org.springframework.remoting.httpinvoker.HttpComponentsHttpInvokerRequestExecutor\"/>\n  485  	</property>\n  486  ----\n  ...\n  955  ==== RestTemplate\n  956  Invoking RESTful services in Java is typically done using a helper class such as Apache\n  957: HttpComponents `HttpClient`. For common REST operations this approach is too low level as\n  958  shown below.\n  959  \n  ...\n 1037  like HTTP PATCH. However, note that the underlying HTTP library must also support the\n 1038  desired combination. The JDK `HttpURLConnection` does not support the `PATCH` method, but\n 1039: Apache HttpComponents HttpClient version 4.2 or later does. They also enable\n 1040  `RestTemplate` to read an HTTP response to a generic type (e.g. `List<Account>`), using a\n 1041  `ParameterizedTypeReference`, a new class that enables capturing and passing generic\n ....\n 1077  underlying implementation to create HTTP requests. This can be overridden by specifying\n 1078  an implementation of `ClientHttpRequestFactory`. Spring provides the implementation\n 1079: `HttpComponentsClientHttpRequestFactory` that uses the Apache HttpComponents\n 1080: `HttpClient` to create requests. `HttpComponentsClientHttpRequestFactory` is configured\n 1081  using an instance of `org.apache.http.client.HttpClient` which can in turn be configured\n 1082  with credentials information or connection pooling functionality.\n ....\n 1086  Note that the `java.net` implementation for HTTP requests may raise an exception when\n 1087  accessing the status of a response that represents an error (e.g. 401). If this is an\n 1088: issue, switch to `HttpComponentsClientHttpRequestFactory` instead.\n 1089  ====\n 1090: The previous example using Apache HttpComponents `HttpClient` directly rewritten to use\n 1091  the `RestTemplate` is shown below\n 1092  \n ....\n 1103  ----\n 1104  \n 1105: To use Apache HttpComponents instead of the native `java.net` functionality, construct\n 1106  the `RestTemplate` as follows:\n 1107  \n ....\n 1109  [subs=\"verbatim,quotes\"]\n 1110  ----\n 1111: 	RestTemplate template = new RestTemplate(new HttpComponentsClientHttpRequestFactory());\n 1112  ----\n 1113  \n ....\n 1115  ====\n 1116  Apache HttpClient supports gzip encoding. To use it,\n 1117: construct a `HttpComponentsClientHttpRequestFactory` like so:\n 1118  \n 1119  [source,java,indent=0]\n ....\n 1121  ----\n 1122  	HttpClient httpClient = HttpClientBuilder.create().build();\n 1123:     ClientHttpRequestFactory requestFactory = new HttpComponentsClientHttpRequestFactory(httpClient);\n 1124      RestTemplate restTemplate = new RestTemplate(requestFactory);\n 1125  ----\n ....\n 1176  expanded) `URI` multiple times.\n 1177  \n 1178: The `UriComponentsBuilder` class can be used to build and encode the `URI` including\n 1179  support for URI templates. For example you can start with a URL String:\n 1180  \n ....\n 1182  [subs=\"verbatim,quotes\"]\n 1183  ----\n 1184: 	UriComponents uriComponents = UriComponentsBuilder.fromUriString(\n 1185  			\"http://example.com/hotels/{hotel}/bookings/{booking}\").build()\n 1186  			.expand(\"42\", \"21\")\n 1187  			.encode();\n 1188  \n 1189: 	URI uri = uriComponents.toUri();\n 1190  ----\n 1191  \n 1192: Or specify each URI component individually:\n 1193  \n 1194  [source,java,indent=0]\n 1195  [subs=\"verbatim,quotes\"]\n 1196  ----\n 1197: 	UriComponents uriComponents = UriComponentsBuilder.newInstance()\n 1198  			.scheme(\"http\").host(\"example.com\").path(\"/hotels/{hotel}/bookings/{booking}\").build()\n 1199  			.expand(\"42\", \"21\")\n 1200  			.encode();\n 1201  \n 1202: 	URI uri = uriComponents.toUri();\n 1203  ----\n 1204  \n ....\n 1489  practice and use the EJB Business Methods Interface pattern, so that the EJB's local\n 1490  interface extends a non EJB-specific business methods interface. Let's call this\n 1491: business methods interface `MyComponent`.\n 1492  \n 1493  [source,java,indent=0]\n 1494  [subs=\"verbatim,quotes\"]\n 1495  ----\n 1496: 	public interface MyComponent {\n 1497  		...\n 1498  	}\n ....\n 1504  switch to a POJO (plain old Java object) implementation of the service if it makes sense\n 1505  to do so. Of course we'll also need to implement the local home interface and provide an\n 1506: implementation class that implements `SessionBean` and the `MyComponent` business\n 1507  methods interface. Now the only Java coding we'll need to do to hook up our web tier\n 1508: controller to the EJB implementation is to expose a setter method of type `MyComponent`\n 1509  on the controller. This will save the reference as an instance variable in the\n 1510  controller:\n ....\n 1513  [subs=\"verbatim,quotes\"]\n 1514  ----\n 1515: 	private MyComponent myComponent;\n 1516  \n 1517: 	public void setMyComponent(MyComponent myComponent) {\n 1518: 		this.myComponent = myComponent;\n 1519  	}\n 1520  ----\n ....\n 1524  (in the same context) configure a `LocalStatelessSessionProxyFactoryBean` instance,\n 1525  which will be the EJB proxy object. The configuration of the proxy, and setting of the\n 1526: `myComponent` property of the controller is done with a configuration entry such as:\n 1527  \n 1528  [source,xml,indent=0]\n 1529  [subs=\"verbatim,quotes\"]\n 1530  ----\n 1531: 	<bean id=\"myComponent\"\n 1532  			class=\"org.springframework.ejb.access.LocalStatelessSessionProxyFactoryBean\">\n 1533  		<property name=\"jndiName\" value=\"ejb/myBean\"/>\n 1534: 		<property name=\"businessInterface\" value=\"com.mycom.MyComponent\"/>\n 1535  	</bean>\n 1536  \n 1537  	<bean id=\"myController\" class=\"com.mycom.myController\">\n 1538: 		<property name=\"myComponent\" ref=\"myComponent\"/>\n 1539  	</bean>\n 1540  ----\n ....\n 1542  There's a lot of work happening behind the scenes, courtesy of the Spring AOP framework,\n 1543  although you aren't forced to work with AOP concepts to enjoy the results. The\n 1544: `myComponent` bean definition creates a proxy for the EJB, which implements the business\n 1545  method interface. The EJB local home is cached on startup, so there's only a single JNDI\n 1546  lookup. Each time the EJB is invoked, the proxy invokes the `classname` method on the\n 1547  local EJB and invokes the	corresponding business method on the EJB.\n 1548  \n 1549: The `myController` bean definition sets the `myComponent` property of the controller\n 1550  class to the EJB proxy.\n 1551  \n ....\n 1556  [subs=\"verbatim,quotes\"]\n 1557  ----\n 1558: 	<jee:local-slsb id=\"myComponent\" jndi-name=\"ejb/myBean\"\n 1559: 			business-interface=\"com.mycom.MyComponent\"/>\n 1560  \n 1561  	<bean id=\"myController\" class=\"com.mycom.myController\">\n 1562: 		<property name=\"myComponent\" ref=\"myComponent\"/>\n 1563  	</bean>\n 1564  ----\n ....\n 1567  code (or other EJB client code) has no dependence on the use of EJB. If we want to\n 1568  replace this EJB reference with a POJO or a mock object or other test stub, we could\n 1569: simply change the `myComponent` bean definition without changing a line of Java code.\n 1570  Additionally, we haven't had to write a single line of JNDI lookup or other EJB plumbing\n 1571  code as part of our application.\n ....\n 1626  Accessing EJB 2.x Session Beans and EJB 3 Session Beans via Spring is largely\n 1627  transparent. Spring's EJB accessors, including the `<jee:local-slsb>` and\n 1628: `<jee:remote-slsb>` facilities, transparently adapt to the actual component at runtime.\n 1629: They handle a home interface if found (EJB 2.x style), or perform straight component\n 1630  invocations if no home interface is available (EJB 3 style).\n 1631  \n 1632  Note: For EJB 3 Session Beans, you could effectively use a `JndiObjectFactoryBean` /\n 1633: `<jee:jndi-lookup>` as well, since fully usable component references are exposed for\n 1634  plain JNDI lookups there. Defining explicit `<jee:local-slsb>` / `<jee:remote-slsb>`\n 1635  lookups simply provides consistent and more explicit EJB access configuration.\n ....\n 1646  ==== EJB 3 injection interceptor\n 1647  For EJB 3 Session Beans and Message-Driven Beans, Spring provides a convenient\n 1648: interceptor that resolves Spring's `@Autowired` annotation in the EJB component\n 1649  class: `org.springframework.ejb.interceptor.SpringBeanAutowiringInterceptor`. This\n 1650: interceptor can be applied through an `@Interceptors` annotation in the EJB component\n 1651  class, or through an `interceptor-binding` XML element in the EJB deployment descriptor.\n 1652  \n ....\n 1660  		// automatically injected with a matching Spring bean\n 1661  		@Autowired\n 1662: 		private MyComponent myComp;\n 1663  \n 1664  		// for business method, delegate to POJO service impl.\n ....\n 1875  Quite often the destinations used in a JMS application are only known at runtime and\n 1876  therefore cannot be administratively created when the application is deployed. This is\n 1877: often because there is shared application logic between interacting system components\n 1878  that create destinations at runtime according to a well-known naming convention. Even\n 1879  though the creation of dynamic destinations is not part of the JMS specification, most\n ....\n 2282  ==== the MessageListenerAdapter\n 2283  \n 2284: The `MessageListenerAdapter` class is the final component in Spring's asynchronous\n 2285  messaging support: in a nutshell, it allows you to expose almost __any__ class as a MDP\n 2286  (there are of course some constraints).\n ....\n 2550  \n 2551  Spring also provides a generic JCA message endpoint manager which is not tied to JMS:\n 2552: `org.springframework.jca.endpoint.GenericMessageEndpointManager`. This component allows\n 2553  for using any message listener type (e.g. a CCI MessageListener) and any\n 2554  provider-specific ActivationSpec object. Check out your JCA provider's documentation to\n ....\n 2577  [subs=\"verbatim,quotes\"]\n 2578  ----\n 2579:     @Component\n 2580      public class MyService {\n 2581  \n ....\n 2695  [subs=\"verbatim,quotes\"]\n 2696  ----\n 2697: 	@Component\n 2698  	public class MyService {\n 2699  \n ....\n 3153  * The simple proxying of both local and remote MBean resources\n 3154  \n 3155: These features are designed to work without coupling your application components to\n 3156  either Spring or JMX interfaces and classes. Indeed, for the most part your application\n 3157  classes need not be aware of either Spring or JMX in order to take advantage of the\n ....\n 4622  \n 4623  Once you have got access to your `ConnectionFactory` instance, you can inject it into\n 4624: your components. These components can either be coded against the plain CCI API or\n 4625  leverage Spring's support classes for CCI access (e.g. `CciTemplate`).\n 4626  \n ....\n 5264  	</bean>\n 5265  \n 5266: 	<bean id=\"component\" class=\"mypackage.MyDaoImpl\">\n 5267  		<property name=\"connectionFactory\" ref=\"connectionFactory\"/>\n 5268  	</bean>\n ....\n 5277  	<jee:jndi-lookup id=\"connectionFactory\" jndi-name=\"eis/cicseci\"/>\n 5278  \n 5279: 	<bean id=\"component\" class=\"MyDaoImpl\">\n 5280  		<property name=\"connectionFactory\" ref=\"connectionFactory\"/>\n 5281  	</bean>\n ....\n 5529  	</bean>\n 5530  \n 5531: 	<bean id=\"component\" class=\"MyDaoImpl\">\n 5532  		<property name=\"connectionFactory\" ref=\"connectionFactory\"/>\n 5533  	</bean>\n ....\n 5553  	</bean>\n 5554  \n 5555: 	<bean id=\"component\" class=\"MyDaoImpl\">\n 5556  		<property name=\"connectionFactory\" ref=\"connectionFactory\"/>\n 5557  	</bean>\n ....\n 5640  	</bean>\n 5641  \n 5642: 	<bean id=\"component\" class=\"MyDaoImpl\">\n 5643  		<property name=\"connectionFactory\" ref=\"connectionFactory\"/>\n 5644  	</bean>\n ....\n 5653  	<jee:jndi-lookup id=\"connectionFactory\" jndi-name=\"eis/cicseci\"/>\n 5654  \n 5655: 	<bean id=\"component\" class=\"MyDaoImpl\">\n 5656  		<property name=\"connectionFactory\" ref=\"connectionFactory\"/>\n 5657  	</bean>\n ....\n 6081  thread pool.\n 6082  \n 6083: The `TaskExecutor` was originally created to give other Spring components an abstraction\n 6084: for thread pooling where needed. Components such as the `ApplicationEventMulticaster`,\n 6085  JMS's `AbstractMessageListenerContainer`, and Quartz integration all use the\n 6086  `TaskExecutor` abstraction to pool threads. However, if your beans need thread pooling\n ....\n 6114    This implementation is actually a subclass of Quartz's `SimpleThreadPool` which\n 6115    listens to Spring's lifecycle callbacks. This is typically used when you have a\n 6116:   thread pool that may need to be shared by both Quartz and non-Quartz components.\n 6117  * `ThreadPoolTaskExecutor`\n 6118    This implementation is the most commonly used one. It exposes bean properties for\n ....\n 6300  interface already defines methods for scheduling tasks at a fixed-rate or with a\n 6301  fixed-delay, those methods should be used directly whenever possible. The value of the\n 6302: `PeriodicTrigger` implementation is that it can be used within components that rely on\n 6303  the `Trigger` abstraction. For example, it may be convenient to allow periodic triggers,\n 6304  cron-based triggers, and even custom trigger implementations to be used interchangeably.\n 6305: Such a component could take advantage of dependency injection so that such `Triggers`\n 6306  could be configured externally and therefore easily modified or extended.\n 6307  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\overview.adoc:\n   90  application.\n   91  \n   92: The Spring Framework __Inversion of Control__ (IoC) component addresses this concern by\n   93: providing a formalized means of composing disparate components into a fully working\n   94  application ready for use. The Spring Framework codifies formalized design patterns as\n   95  first-class objects that you can integrate into your own application(s). Numerous\n   ..\n  230  ==== Test\n  231  The `spring-test` module supports the <<unit-testing,unit testing>> and\n  232: <<integration-testing,integration testing>> of Spring components with JUnit or TestNG. It\n  233  provides consistent <<testcontext-ctx-management,loading>> of Spring\n  234  ``ApplicationContext``s and <<testcontext-ctx-management-caching,caching>> of those\n  ...\n  293  features of Spring into your application (like dependency injection) you need to\n  294  assemble all the libraries needed (jar files) and get them onto your classpath at\n  295: runtime, and possibly at compile time. These dependencies are not virtual components\n  296  that are injected, but physical resources in a file system (typically). The process of\n  297  dependency management involves locating those resources, storing them and adding them to\n  ...\n  396  |org.springframework\n  397  |spring-test\n  398: |Support for unit testing and integration testing Spring components\n  399  \n  400  |org.springframework\n  ...\n  634  a choice of logging dependency. One of the goals of an application developer is often to\n  635  have unified logging configured in a central place for the whole application, including\n  636: all external components. This is more difficult than it might have been since there are so\n  637  many choices of logging framework.\n  638  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\testing.adoc:\n   34  objects>> (in conjunction with other valuable testing techniques) to test your code in\n   35  isolation. If you follow the architecture recommendations for Spring, the resulting\n   36: clean layering and componentization of your codebase will facilitate easier unit\n   37  testing. For example, you can test service layer objects by stubbing or mocking DAO or\n   38  Repository interfaces, without needing to access persistent data while running unit\n   ..\n  341  the classpath; whereas, annotated classes are typically `@Configuration` classes. However,\n  342  resource locations can also refer to files and scripts in the file system, and annotated\n  343: classes can be component classes, etc.\n  344  \n  345  [source,java,indent=0]\n  ...\n  859  ====\n  860  In the Spring TestContext Framework `@PostConstruct` and `@PreDestroy` may be used with\n  861: standard semantics on any application components configured in the `ApplicationContext`;\n  862  however, these lifecycle annotations have limited usage within an actual test class.\n  863  \n  ...\n 1534  \n 1535  * A class annotated with `@Configuration`\n 1536: * A component (i.e., a class annotated with `@Component`, `@Service`, `@Repository`, etc.)\n 1537  * A JSR-330 compliant class that is annotated with `javax.inject` annotations\n 1538  * Any other class that contains `@Bean`-methods\n ....\n 1593  `ApplicationContext` for your tests. For example, if you use XML configuration in\n 1594  production, you may decide that you want to use `@Configuration` classes to configure\n 1595: specific Spring-managed components for your tests, or vice versa.\n 1596  \n 1597  Furthermore, some third-party frameworks (like Spring Boot) provide first-class support\n ....\n 1611  classes to configure your tests, you will have to pick one as the __entry point__, and\n 1612  that one will have to include or import the other. For example, in XML or Groovy scripts\n 1613: you can include `@Configuration` classes via component scanning or define them as normal\n 1614  Spring beans; whereas, in a `@Configuration` class you can use `@ImportResource` to\n 1615  import XML configuration files or Groovy scripts. Note that this behavior is semantically\n ....\n 2362  Once you have a `WebApplicationContext` loaded for your test you might find that you\n 2363  need to interact with the web mocks -- for example, to set up your test fixture or to\n 2364: perform assertions after invoking your web component. The following example demonstrates\n 2365  which mocks can be autowired into your test instance. Note that the\n 2366  `WebApplicationContext` and `MockServletContext` are both cached across the test suite;\n ....\n 2488  root `WebApplicationContext` loaded via Spring's `ContextLoaderListener` and a child\n 2489  `WebApplicationContext` loaded via Spring's `DispatcherServlet`. This results in a\n 2490: parent-child context hierarchy where shared components and infrastructure configuration\n 2491  are declared in the root context and consumed in the child context by web-specific\n 2492: components. Another use case can be found in Spring Batch applications where you often\n 2493  have a parent context that provides configuration for shared batch infrastructure and a\n 2494  child context for the configuration of a specific batch job.\n ....\n 2805  * Inject the mock request or session into your test instance and prepare your test\n 2806    fixture as appropriate.\n 2807: * Invoke your web component that you retrieved from the configured\n 2808    `WebApplicationContext` (i.e., via dependency injection).\n 2809  * Perform assertions against the mocks.\n ....\n 4354  \n 4355  First, make sure that you have included a test dependency on `net.sourceforge.htmlunit:htmlunit`.\n 4356: In order to use HtmlUnit with Apache HttpComponents 4.5+, you will need to use HtmlUnit\n 4357  2.18 or higher.\n 4358  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\web-integration.adoc:\n  150  [[jsf]]\n  151  == JavaServer Faces 1.2\n  152: JavaServer Faces (JSF) is the JCP's standard component-based, event-driven web user\n  153  interface framework. As of Java EE 5, it is an official part of the Java EE umbrella.\n  154  \n  155: For a popular JSF runtime as well as for popular JSF component libraries, check out the\n  156  http://myfaces.apache.org/[Apache MyFaces project]. The MyFaces project also provides\n  157  common JSF extensions such as http://myfaces.apache.org/orchestra/[MyFaces Orchestra]:\n  ...\n  226  From the http://tapestry.apache.org/[Tapestry homepage]:\n  227  \n  228: Tapestry is a \"__Component oriented framework for creating dynamic, robust,\n  229  highly scalable web applications in Java.__\"\n  230  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\web-mvc.adoc:\n  254  With the above Servlet configuration in place, you will need to have a file called\n  255  `/WEB-INF/golfing-servlet.xml` in your application; this file will contain all of your\n  256: Spring Web MVC-specific components (beans). You can change the exact location of this\n  257  configuration file through a Servlet initialization parameter (see below for details).\n  258  \n  ...\n  530  You can define annotated controller beans explicitly, using a standard Spring bean\n  531  definition in the dispatcher's context. However, the `@Controller` stereotype also\n  532: allows for autodetection, aligned with Spring general support for detecting component\n  533  classes in the classpath and auto-registering bean definitions for them.\n  534  \n  535: To enable autodetection of such annotated controllers, you add component scanning to\n  536  your configuration. Use the __spring-context__ schema as shown in the following XML\n  537  snippet:\n  ...\n  551  			http://www.springframework.org/schema/context/spring-context.xsd\">\n  552  \n  553: 		<context:component-scan base-package=\"org.springframework.samples.petclinic.web\"/>\n  554  \n  555  		<!-- ... -->\n  ...\n 1367    processing as complete, which triggers the cleanup of session attributes that have\n 1368    been indicated by the `@SessionAttributes` annotation at the handler type level.\n 1369: * `org.springframework.web.util.UriComponentsBuilder` a builder for preparing a URL\n 1370    relative to the current request's host, port, scheme, context path, and the literal\n 1371    part of the servlet mapping.\n ....\n 2160  ==== Advising controllers with @ControllerAdvice and @RestControllerAdvice\n 2161  \n 2162: The `@ControllerAdvice` annotation is a component annotation allowing implementation\n 2163  classes to be auto-detected through classpath scanning. It is automatically enabled when\n 2164  using the MVC namespace or the MVC Java config.\n ....\n 3245  \n 3246  Spring MVC provides a mechanism for building and encoding a URI using\n 3247: `UriComponentsBuilder` and `UriComponents`.\n 3248  \n 3249  For example you can expand and encode a URI template string:\n ....\n 3252  [subs=\"verbatim,quotes\"]\n 3253  ----\n 3254: 	UriComponents uriComponents = UriComponentsBuilder.fromUriString(\n 3255  			\"http://example.com/hotels/{hotel}/bookings/{booking}\").build();\n 3256  \n 3257: 	URI uri = uriComponents.expand(\"42\", \"21\").encode().toUri();\n 3258  ----\n 3259  \n 3260: Note that `UriComponents` is immutable and the `expand()` and `encode()` operations\n 3261  return new instances if necessary.\n 3262  \n 3263: You can also expand and encode using individual URI components:\n 3264  \n 3265  [source,java,indent=0]\n 3266  [subs=\"verbatim,quotes\"]\n 3267  ----\n 3268: 	UriComponents uriComponents = UriComponentsBuilder.newInstance()\n 3269  			.scheme(\"http\").host(\"example.com\").path(\"/hotels/{hotel}/bookings/{booking}\").build()\n 3270  			.expand(\"42\", \"21\")\n ....\n 3272  ----\n 3273  \n 3274: In a Servlet environment the `ServletUriComponentsBuilder` sub-class provides static\n 3275  factory methods to copy available URL information from a Servlet requests:\n 3276  \n ....\n 3283  	// Replace the \"accountId\" query param\n 3284  \n 3285: 	ServletUriComponentsBuilder ucb = ServletUriComponentsBuilder.fromRequest(request)\n 3286  			.replaceQueryParam(\"accountId\", \"{id}\").build()\n 3287  			.expand(\"123\")\n ....\n 3298  	// Append \"/accounts\" to the path\n 3299  \n 3300: 	ServletUriComponentsBuilder ucb = ServletUriComponentsBuilder.fromContextPath(request)\n 3301  			.path(\"/accounts\").build()\n 3302  ----\n ....\n 3312  	// Append \"/accounts\" to the path\n 3313  \n 3314: 	ServletUriComponentsBuilder ucb = ServletUriComponentsBuilder.fromServletMapping(request)\n 3315  			.path(\"/accounts\").build()\n 3316  ----\n ....\n 3341  [subs=\"verbatim,quotes\"]\n 3342  ----\n 3343: 	UriComponents uriComponents = MvcUriComponentsBuilder\n 3344  		.fromMethodName(BookingController.class, \"getBooking\", 21).buildAndExpand(42);\n 3345  \n 3346: 	URI uri = uriComponents.encode().toUri();\n 3347  ----\n 3348  \n ....\n 3354  are relevant for constructing the URL.\n 3355  \n 3356: There are additional ways to use `MvcUriComponentsBuilder`. For example you can use a technique\n 3357  akin to mock testing through proxies to avoid referring to the controller method by name\n 3358: (the example assumes static import of `MvcUriComponentsBuilder.on`):\n 3359  \n 3360  [source,java,indent=0]\n 3361  [subs=\"verbatim,quotes\"]\n 3362  ----\n 3363: 	UriComponents uriComponents = MvcUriComponentsBuilder\n 3364  		.fromMethodCall(on(BookingController.class).getBooking(21)).buildAndExpand(42);\n 3365  \n 3366: 	URI uri = uriComponents.encode().toUri();\n 3367  ----\n 3368  \n 3369: The above examples use static methods in `MvcUriComponentsBuilder`. Internally they rely\n 3370: on `ServletUriComponentsBuilder` to prepare a base URL from the scheme, host, port,\n 3371  context path and servlet path of the current request. This works well in most cases,\n 3372  however sometimes it may be insufficient. For example you may be outside the context of\n ....\n 3376  \n 3377  For such cases you can use the static \"fromXxx\" overloaded methods that accept a\n 3378: `UriComponentsBuilder` to use base URL. Or you can create an instance of `MvcUriComponentsBuilder`\n 3379  with a base URL and then use the instance-based \"withXxx\" methods. For example:\n 3380  \n ....\n 3382  [subs=\"verbatim,quotes\"]\n 3383  ----\n 3384: 	UriComponentsBuilder base = ServletUriComponentsBuilder.fromCurrentContextPath().path(\"/en\");\n 3385: 	MvcUriComponentsBuilder builder = MvcUriComponentsBuilder.relativeTo(base);\n 3386  	builder.withMethodCall(on(BookingController.class).getBooking(21)).buildAndExpand(42);\n 3387  \n 3388: 	URI uri = uriComponents.encode().toUri();\n 3389  ----\n 3390  \n ....\n 3394  \n 3395  You can also build links to annotated controllers from views such as JSP, Thymeleaf,\n 3396: FreeMarker. This can be done using the `fromMappingName` method in `MvcUriComponentsBuilder`\n 3397  which refers to mappings by name.\n 3398  \n ....\n 3440  (i.e. META-INF/spring.tld). For more advanced cases (e.g. a custom base URL as explained\n 3441  in the previous section), it is easy to define your own function, or use a custom tag file,\n 3442: in order to use a specific instance of `MvcUriComponentsBuilder` with a custom base URL.\n 3443  \n 3444  \n ....\n 5730  [subs=\"verbatim,quotes\"]\n 5731  ----\n 5732: 	@Component\n 5733  	public class MyPostProcessor implements BeanPostProcessor {\n 5734  \n ....\n 5742  ----\n 5743  \n 5744: Note that `MyPostProcessor` needs to be included in an `<component scan/>` in order for\n 5745  it to be detected or if you prefer you can declare it explicitly with an XML bean\n 5746  declaration.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\web-reactive.adoc:\n   14  and event-driven and require a small number of threads to scale. A key aspect of that\n   15  definition is the concept of backpressure which is a mechanism to ensure producers\n   16: don't overwhelm consumers. For example in a pipeline of reactive components that extends\n   17  from the database to the HTTP socket when the HTTP client is slow the data\n   18  repository slows down or stops until capacity frees up.\n   ..\n   32  Spring Framework 5 embraces\n   33  https://github.com/reactive-streams/reactive-streams-jvm#reactive-streams[Reactive Streams]\n   34: as the contract for communicating backpressure across async components and\n   35  libraries. Reactive Streams is a specification created through industry collaboration that\n   36  has also been adopted in Java 9 as `java.util.concurrent.Flow`.\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\web-view.adoc:\n 1745  ----\n 1746  @EnableWebMvc\n 1747: @ComponentScan\n 1748  @Configuration\n 1749  public class WebConfig extends WebMvcConfigurerAdapter {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\web-websocket.adoc:\n 1259  to a destination can also be done from anywhere in the application with\n 1260  the help of a messaging template. For example, an HTTP POST handling method\n 1261: can broadcast a message to connected clients, or a service component may\n 1262  periodically broadcast stock quotes.\n 1263  \n ....\n 1394  \n 1395  What if you want to send messages to connected clients from any part of the\n 1396: application? Any application component can send messages to the `\"brokerChannel\"`.\n 1397  The easiest way to do that is to have a `SimpMessagingTemplate` injected, and\n 1398  use it to send messages. Typically it should be easy to have it injected by\n ....\n 1517  ====\n 1518  \n 1519: Furthermore, application components (e.g. HTTP request handling methods,\n 1520  business services, etc.) can also send messages to the broker relay, as described\n 1521  in <<websocket-stomp-handle-send>>, in order to broadcast messages to\n ....\n 1696  `\"/user/{username}/queue/position-updates\"`, which in turn will be translated\n 1697  by the `UserDestinationMessageHandler` into one or more destinations, one for each\n 1698: session associated with the user. This allows any component within the application to\n 1699  send messages targeting a specific user without necessarily knowing anything more\n 1700  than their name and the generic destination. This is also supported through an\n ....\n 1756  \n 1757  It is also possible to send a message to user destinations from any application\n 1758: component by injecting the `SimpMessagingTemplate` created by the Java config or\n 1759  XML namespace, for example (the bean name is `\"brokerMessagingTemplate\"` if required\n 1760  for qualification with `@Qualifier`):\n ....\n 1816  has reconnect logic and will re-establish the \"system\" connection to the broker\n 1817  when it comes back, hence this event is published whenever the state changes from connected\n 1818: to disconnected and vice versa. Components using the `SimpMessagingTemplate` should\n 1819  subscribe to this event and avoid sending messages at times when the broker is not\n 1820  available. In any case they should be prepared to handle `MessageDeliveryException`\n ....\n 1823  indicating the start of a new client session. The event contains the message representing the\n 1824  connect including the session id, user information (if any), and any custom headers the client\n 1825: may have sent. This is useful for tracking client sessions. Components subscribed\n 1826  to this event can wrap the contained message using `SimpMessageHeaderAccessor` or\n 1827  `StompMessageHeaderAccessor`.\n ....\n 1834  have been sent from the client, or it may also be automatically generated when the\n 1835  WebSocket session is closed. In some cases this event may be published more than once\n 1836: per session. Components should be idempotent with regard to multiple disconnect events.\n 1837  \n 1838  [NOTE]\n ....\n 2021  [subs=\"verbatim,quotes\"]\n 2022  ----\n 2023: @Component\n 2024  @Scope(scopeName = \"websocket\", proxyMode = ScopedProxyMode.TARGET_CLASS)\n 2025  public class MyBean {\n ....\n 2230  \n 2231  When using `@EnableWebSocketMessageBroker` or `<websocket:message-broker>` key\n 2232: infrastructure components automatically gather stats and counters that provide\n 2233  important insight into the internal state of the application. The configuration\n 2234  also declares a bean of type `WebSocketMessageBrokerStats` that gathers all\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\dist\\license.txt:\n  203  =======================================================================\n  204  \n  205: SPRING FRAMEWORK ${version} SUBCOMPONENTS:\n  206  \n  207: Spring Framework ${version} includes a number of subcomponents\n  208  with separate copyright notices and license terms. The product that\n  209  includes this file does not necessarily use all the open source\n  210: subcomponents referred to below. Your use of the source\n  211: code for these subcomponents is subject to the terms and\n  212  conditions of the following licenses.\n  213  \n  ...\n  258  =======================================================================\n  259  \n  260: To the extent any open source subcomponents are licensed under the EPL and/or\n  261  other similar licenses that require the source code and/or modifications to\n  262  source code to be made available (as would be noted above), you may obtain a\n  263  copy of the source code corresponding to the binaries for such open source\n  264: components and modifications thereto, if any, (the \"Source Files\"), by\n  265  downloading the Source Files from http://www.springsource.org/download, or by\n  266  sending a request, with your name and address to:\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\dist\\notice.txt:\n    6  the License.\n    7  \n    8: This product may include a number of subcomponents with separate\n    9  copyright notices and license terms. Your use of the source code for\n   10: these subcomponents is subject to the terms and conditions of the\n   11: subcomponent's license, as noted in the license.txt file.\n   12  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\test\\java\\com\\foo\\Component.java:\n   20  import java.util.List;\n   21  \n   22: public class Component {\n   23  	private String name;\n   24: 	private List<Component> components = new ArrayList<>();\n   25  \n   26: 	// mmm, there is no setter method for the 'components'\n   27: 	public void addComponent(Component component) {\n   28: 		this.components.add(component);\n   29  	}\n   30  \n   31: 	public List<Component> getComponents() {\n   32: 		return components;\n   33  	}\n   34  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\test\\java\\com\\foo\\ComponentBeanDefinitionParser.java:\n   28  import org.w3c.dom.Element;\n   29  \n   30: public class ComponentBeanDefinitionParser extends AbstractBeanDefinitionParser {\n   31  \n   32  	@Override\n   33  	protected AbstractBeanDefinition parseInternal(Element element,\n   34  			ParserContext parserContext) {\n   35: 		return parseComponentElement(element);\n   36  	}\n   37  \n   38: 	private static AbstractBeanDefinition parseComponentElement(Element element) {\n   39  		BeanDefinitionBuilder factory = BeanDefinitionBuilder\n   40: 				.rootBeanDefinition(ComponentFactoryBean.class);\n   41  \n   42: 		factory.addPropertyValue(\"parent\", parseComponent(element));\n   43  \n   44  		List<Element> childElements = DomUtils.getChildElementsByTagName(\n   45: 				element, \"component\");\n   46  		if (childElements != null && childElements.size() > 0) {\n   47: 			parseChildComponents(childElements, factory);\n   48  		}\n   49  \n   ..\n   51  	}\n   52  \n   53: 	private static BeanDefinition parseComponent(Element element) {\n   54: 		BeanDefinitionBuilder component = BeanDefinitionBuilder\n   55: 				.rootBeanDefinition(Component.class);\n   56: 		component.addPropertyValue(\"name\", element.getAttribute(\"name\"));\n   57: 		return component.getBeanDefinition();\n   58  	}\n   59  \n   60: 	private static void parseChildComponents(List<Element> childElements,\n   61  			BeanDefinitionBuilder factory) {\n   62  		ManagedList<BeanDefinition> children = new ManagedList<>(\n   63  				childElements.size());\n   64  		for (Element element : childElements) {\n   65: 			children.add(parseComponentElement(element));\n   66  		}\n   67  		factory.addPropertyValue(\"children\", children);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\test\\java\\com\\foo\\ComponentBeanDefinitionParserTests.java:\n   32   * @author Costin Leau\n   33   */\n   34: public class ComponentBeanDefinitionParserTests {\n   35  \n   36  	private static DefaultListableBeanFactory bf;\n   ..\n   39  	public static void setUpBeforeClass() throws Exception {\n   40  		bf = new DefaultListableBeanFactory();\n   41: 		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(\"com/foo/component-config.xml\"));\n   42  	}\n   43  \n   ..\n   47  	}\n   48  \n   49: 	private Component getBionicFamily() {\n   50: 		return bf.getBean(\"bionic-family\", Component.class);\n   51  	}\n   52  \n   53  	@Test\n   54  	public void testBionicBasic() throws Exception {\n   55: 		Component cp = getBionicFamily();\n   56  		assertThat(\"Bionic-1\", equalTo(cp.getName()));\n   57  	}\n   ..\n   59  	@Test\n   60  	public void testBionicFirstLevelChildren() throws Exception {\n   61: 		Component cp = getBionicFamily();\n   62: 		List<Component> components = cp.getComponents();\n   63: 		assertThat(2, equalTo(components.size()));\n   64: 		assertThat(\"Mother-1\", equalTo(components.get(0).getName()));\n   65: 		assertThat(\"Rock-1\", equalTo(components.get(1).getName()));\n   66  	}\n   67  \n   68  	@Test\n   69  	public void testBionicSecondLevenChildren() throws Exception {\n   70: 		Component cp = getBionicFamily();\n   71: 		List<Component> components = cp.getComponents().get(0).getComponents();\n   72: 		assertThat(2, equalTo(components.size()));\n   73: 		assertThat(\"Karate-1\", equalTo(components.get(0).getName()));\n   74: 		assertThat(\"Sport-1\", equalTo(components.get(1).getName()));\n   75  	}\n   76  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\test\\java\\com\\foo\\ComponentFactoryBean.java:\n   21  import org.springframework.beans.factory.FactoryBean;\n   22  \n   23: public class ComponentFactoryBean implements FactoryBean<Component> {\n   24: 	private Component parent;\n   25: 	private List<Component> children;\n   26  \n   27: 	public void setParent(Component parent) {\n   28  		this.parent = parent;\n   29  	}\n   30  \n   31: 	public void setChildren(List<Component> children) {\n   32  		this.children = children;\n   33  	}\n   34  \n   35  	@Override\n   36: 	public Component getObject() throws Exception {\n   37  		if (this.children != null && this.children.size() > 0) {\n   38: 			for (Component child : children) {\n   39: 				this.parent.addComponent(child);\n   40  			}\n   41  		}\n   ..\n   44  \n   45  	@Override\n   46: 	public Class<Component> getObjectType() {\n   47: 		return Component.class;\n   48  	}\n   49  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\test\\java\\com\\foo\\ComponentNamespaceHandler.java:\n   19  import org.springframework.beans.factory.xml.NamespaceHandlerSupport;\n   20  \n   21: public class ComponentNamespaceHandler extends NamespaceHandlerSupport {\n   22  	@Override\n   23  	public void init() {\n   24: 		registerBeanDefinitionParser(\"component\",\n   25: 				new ComponentBeanDefinitionParser());\n   26  	}\n   27  }\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\test\\java\\org\\springframework\\context\\annotation\\scope\\ClassPathBeanDefinitionScannerScopeIntegrationTests.java:\n   27  import org.springframework.mock.web.MockHttpServletRequest;\n   28  import org.springframework.mock.web.MockHttpSession;\n   29: import org.springframework.stereotype.Component;\n   30  import org.springframework.web.context.annotation.RequestScope;\n   31  import org.springframework.web.context.annotation.SessionScope;\n   ..\n  316  \n  317  \n  318: 	@Component\n  319  	static class SingletonScopedTestBean extends ScopedTestBean {\n  320  	}\n  ...\n  325  \n  326  \n  327: 	@Component\n  328  	@RequestScope(proxyMode = DEFAULT)\n  329  	static class RequestScopedTestBean extends ScopedTestBean implements AnotherScopeTestInterface {\n  ...\n  331  \n  332  \n  333: 	@Component\n  334  	@SessionScope(proxyMode = DEFAULT)\n  335  	static class SessionScopedTestBean extends ScopedTestBean implements AnotherScopeTestInterface {\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\test\\java\\org\\springframework\\core\\env\\EnvironmentSystemIntegrationTests.java:\n  153  \n  154  	@Test\n  155: 	public void classPathBeanDefinitionScanner_inheritsEnvironmentFromEnvironmentCapableBDR_scanProfileAnnotatedComponents() {\n  156  		GenericApplicationContext ctx = new GenericApplicationContext();\n  157  		ctx.setEnvironment(prodEnv);\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\test\\java\\org\\springframework\\core\\env\\scan2\\package-info.java:\n   27  \n   28  import org.springframework.context.annotation.Profile;\n   29: import org.springframework.stereotype.Component;\n   30  \n   31  @Profile(DEV_ENV_NAME)\n   32: @Component(DEV_BEAN_NAME)\n   33  class DevBean { }\n   34  \n   35  @Profile(PROD_ENV_NAME)\n   36: @Component(PROD_BEAN_NAME)\n   37  class ProdBean { }\n   38  \n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\test\\resources\\com\\foo\\component-config.xml:\n    2  <beans xmlns=\"http://www.springframework.org/schema/beans\"\n    3        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n    4:       xmlns:foo=\"http://www.foo.com/schema/component\"\n    5        xsi:schemaLocation=\"\n    6  http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd\n    7: http://www.foo.com/schema/component http://www.foo.com/schema/component/component.xsd\">\n    8  \n    9:    <foo:component id=\"bionic-family\" name=\"Bionic-1\">\n   10:       <foo:component name=\"Mother-1\">\n   11:       	<foo:component name=\"Karate-1\"/>\n   12:   		<foo:component name=\"Sport-1\"/>\n   13:       </foo:component>\n   14:       <foo:component name=\"Rock-1\"/>\n   15:    </foo:component>\n   16  \n   17  </beans>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\test\\resources\\com\\foo\\component.xsd:\n    1  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n    2  \n    3: <xsd:schema xmlns=\"http://www.foo.com/schema/component\"\n    4           xmlns:xsd=\"http://www.w3.org/2001/XMLSchema\"\n    5:          targetNamespace=\"http://www.foo.com/schema/component\"\n    6           elementFormDefault=\"qualified\"\n    7           attributeFormDefault=\"unqualified\">\n    8  \n    9:    <xsd:element name=\"component\">\n   10        <xsd:complexType>\n   11           <xsd:choice minOccurs=\"0\" maxOccurs=\"unbounded\">\n   12:             <xsd:element ref=\"component\"/>\n   13           </xsd:choice>\n   14           <xsd:attribute name=\"id\" type=\"xsd:ID\"/>\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\test\\resources\\META-INF\\spring.handlers:\n    1: http\\://www.foo.com/schema/component=com.foo.ComponentNamespaceHandler\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\test\\resources\\META-INF\\spring.schemas:\n    1: http\\://www.foo.com/schema/component/component.xsd=com/foo/component.xsd\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\test\\resources\\org\\springframework\\context\\annotation\\ltw\\ComponentScanningWithLTWTests.xml:\n    9  	default-autowire=\"byType\">\n   10  \n   11: 	<context:component-scan base-package=\"org.springframework.context.annotation\">\n   12  		<context:exclude-filter type=\"annotation\"\n   13  		                        expression=\"org.springframework.context.annotation.Configuration\"/>\n   14: 	</context:component-scan>\n   15  \n   16  	<context:load-time-weaver aspectj-weaving=\"off\"/>\n\n4688 matches across 498 files\n\n\nSearching 7551 files for \"getComponents()\"\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\asciidoc\\appendix.adoc:\n 3606  		}\n 3607  \n 3608: 		public List<Component> getComponents() {\n 3609  			return components;\n 3610  		}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\test\\java\\com\\foo\\Component.java:\n   29  	}\n   30  \n   31: 	public List<Component> getComponents() {\n   32  		return components;\n   33  	}\n\nD:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework\\src\\test\\java\\com\\foo\\ComponentBeanDefinitionParserTests.java:\n   60  	public void testBionicFirstLevelChildren() throws Exception {\n   61  		Component cp = getBionicFamily();\n   62: 		List<Component> components = cp.getComponents();\n   63  		assertThat(2, equalTo(components.size()));\n   64  		assertThat(\"Mother-1\", equalTo(components.get(0).getName()));\n   ..\n   69  	public void testBionicSecondLevenChildren() throws Exception {\n   70  		Component cp = getBionicFamily();\n   71: 		List<Component> components = cp.getComponents().get(0).getComponents();\n   72  		assertThat(2, equalTo(components.size()));\n   73  		assertThat(\"Karate-1\", equalTo(components.get(0).getName()));\n\n5 matches across 3 files\n",
					"settings":
					{
						"buffer_size": 764136,
						"line_ending": "Windows",
						"name": "Find Results",
						"scratch": true
					}
				},
				{
					"contents": "/*\n * Copyright 2002-2013 the original author or authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\npackage com.foo;\n\nimport static org.hamcrest.CoreMatchers.equalTo;\nimport static org.junit.Assert.assertThat;\n\nimport java.util.List;\n\nimport org.junit.AfterClass;\nimport org.junit.BeforeClass;\nimport org.junit.Test;\nimport org.springframework.beans.factory.support.DefaultListableBeanFactory;\nimport org.springframework.beans.factory.xml.XmlBeanDefinitionReader;\nimport org.springframework.core.io.ClassPathResource;\n\n/**\n * @author Costin Leau\n */\npublic class ComponentBeanDefinitionParserTests {\n\n	private static DefaultListableBeanFactory bf;\n\n	@BeforeClass\n	public static void setUpBeforeClass() throws Exception {\n		bf = new DefaultListableBeanFactory();\n		new XmlBeanDefinitionReader(bf).loadBeanDefinitions(new ClassPathResource(\"com/foo/component-config.xml\"));\n	}\n\n	@AfterClass\n	public static void tearDownAfterClass() throws Exception {\n		bf.destroySingletons();\n	}\n\n	private Component getBionicFamily() {\n		return bf.getBean(\"bionic-family\", Component.class);\n	\n	}\n\n	@Test\n	public void testBionicBasic() throws Exception {\n		Component cp = getBionicFamily();\n		assertThat(\"Bionic-1\", equalTo(cp.getName()));\n	}\n\n	@Test\n	public void testBionicFirstLevelChildren() throws Exception {\n		Component cp = getBionicFamily();\n		List<Component> components = cp.getComponents();\n		assertThat(2, equalTo(components.size()));\n		assertThat(\"Mother-1\", equalTo(components.get(0).getName()));\n		assertThat(\"Rock-1\", equalTo(components.get(1).getName()));\n	}\n\n	@Test\n	public void testBionicSecondLevenChildren() throws Exception {\n		Component cp = getBionicFamily();\n		List<Component> components = cp.getComponents().get(0).getComponents();\n		assertThat(2, equalTo(components.size()));\n		assertThat(\"Karate-1\", equalTo(components.get(0).getName()));\n		assertThat(\"Sport-1\", equalTo(components.get(1).getName()));\n	}\n}\n",
					"file": "/D/lujian/Documents/java-workspace/thirdparties/spring-framework/src/test/java/com/foo/ComponentBeanDefinitionParserTests.java",
					"file_size": 2511,
					"file_write_time": 131178008812975912,
					"settings":
					{
						"buffer_size": 2437,
						"line_ending": "Windows"
					}
				},
				{
					"file": "/D/lujian/Documents/java-workspace/thirdparties/spring-boot/spring-boot-samples/spring-boot-sample-web-jsp/src/main/webapp/WEB-INF/jsp/welcome.jsp",
					"settings":
					{
						"buffer_size": 409,
						"line_ending": "Windows"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
				[
					[
						[
							"Packages/C++/C++ Single File.sublime-build",
							""
						],
						[
							"Packages/C++/C++ Single File.sublime-build",
							"Run"
						]
					],
					[
						"Packages/C++/C++ Single File.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/C++/C++ Single File.sublime-build",
							""
						],
						[
							"Packages/C++/C++ Single File.sublime-build",
							"Run"
						],
						[
							"Packages/Makefile/Make.sublime-build",
							""
						],
						[
							"Packages/Makefile/Make.sublime-build",
							"Clean"
						]
					],
					[
						"Packages/C++/C++ Single File.sublime-build",
						"Run"
					]
				],
				[
					[
						[
							"Packages/Makefile/Make.sublime-build",
							""
						],
						[
							"Packages/Makefile/Make.sublime-build",
							"Clean"
						]
					],
					[
						"Packages/Makefile/Make.sublime-build",
						""
					]
				],
				[
					[
						[
							"Packages/User/CPP.sublime-build",
							""
						],
						[
							"Packages/User/CPP.sublime-build",
							"Run"
						]
					],
					[
						"Packages/User/CPP.sublime-build",
						""
					]
				]
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 392.0,
				"last_filter": ":w",
				"selected_items":
				[
					[
						":w",
						":w - Save"
					],
					[
						":e",
						":e - Revert"
					],
					[
						"mark",
						"Markdown Preview: Export HTML in Sublime Text"
					],
					[
						"Package Control: ",
						"Package Control: Install Package"
					],
					[
						"Package Control: ins",
						"Package Control: Install Package"
					],
					[
						"Package Control: Ins",
						"Package Control: Install Package"
					]
				],
				"width": 416.0
			},
			"console":
			{
				"height": 0.0,
				"history":
				[
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"expanded_folders":
			[
				"/D/lujian/Documents/java-workspace",
				"/D/lujian/Documents/java-workspace/thirdparties",
				"/D/lujian/Documents/java-workspace/thirdparties/spring-boot/spring-boot-samples",
				"/D/lujian/Documents/java-workspace/thirdparties/spring-boot/spring-boot-samples/spring-boot-sample-web-jsp"
			],
			"file_history":
			[
				"/D/lujian/Documents/java-workspace/thirdparties/spring-boot/spring-boot-samples/spring-boot-sample-web-ui/src/main/java/sample/web/ui/SampleWebUiApplication.java",
				"/D/lujian/Documents/java-workspace/thirdparties/spring-boot/spring-boot-samples/spring-boot-sample-web-jsp/pom.xml",
				"/D/lujian/Documents/java-workspace/thirdparties/spring-boot/spring-boot-samples/spring-boot-sample-tomcat-jsp/pom.xml",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/SetUIntValue.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/BlackboardAction.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/BehaviorTree.cs",
				"/E/SDMOBARefactor/ClientSolution/LitJson/LitJson/JsonMapper.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/CompareUIntValue.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/CompareValue.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/Entity/Role.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/Entity/Entity.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Decorator/ChildAgent.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/StateMachine/State/BehaviorTreeState.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Node.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/StateMachine/AIStateMachine.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Decorator/Repeater.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/SetValue.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Composite/Sequence.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Decorator/RepeatAgent.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Composite/Selector.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Blackboard.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Decorator/Entry.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Skill/FrameAction/SummonFrames.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Skill/FrameAction/FramesAction.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Skill/FrameAction/FrameAction.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Skill/FrameAction/CatchFrame.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Skill/FrameAction/CameraShakeFrames.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Skill/FrameAction/AttackFrames.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/SetIntValue.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/CompareIntValue.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/EqualBoolValue.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action/Blackboard/SetBoolValue.cs",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditorFieldArea.cs",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditorDictFieldArea.cs",
				"/E/SDMOBARefactor/ClientSolution/Lockstep/Code/BehaviorTree/Action.cs",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditorBlackboardArea.cs",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditor.cs",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditorCommandManager.cs",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditorTreeViewTopbar.cs",
				"/E/SDMOBARefactor/Assets/Editor/BoundsFieldDrawer.cs",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/User/Default (Windows).sublime-keymap",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditorTreeView.cs",
				"/E/SDMOBARefactor/Assets/Editor/BehaviorTreeEditor/BehaviorTreeEditorMenu.cs",
				"/E/behaviac/example/spaceship/data/bt/behaviors/ships/3_basic_move.xml",
				"/D/lujian/Documents/java-workspace/thirdparties/LeyeOA/WebContent/WEB-INF/web.xml",
				"/D/lujian/Documents/java-workspace/sql-lab/src/src/main/resources/application.properties",
				"/D/lujian/Documents/java-workspace/gs-gradle/initial/build.gradle",
				"/D/lujian/Documents/java-workspace/thirdparties/gradle/build.gradle",
				"/D/lujian/Documents/java-workspace/thirdparties/gradle/subprojects/ide/src/main/groovy/org/gradle/plugins/ide/idea/model/ModuleLibrary.java",
				"/D/lujian/Documents/java-workspace/thirdparties/gradle/README.md",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Installed Packages/Markdown Preview.sublime-package",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/Markdown Preview/MarkdownPreview.sublime-settings",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/User/MarkdownPreview.sublime-settings",
				"/D/lujian/Documents/java-workspace/thirdparties/gradle/buildSrc/src/main/groovy/org/gradle/build/docs/dsl/docbook/ClassDocExtensionsBuilder.java",
				"/D/lujian/Documents/java-workspace/thirdparties/struts-examples/annotations/src/main/java/example/actions/HelloAction.java",
				"/D/lujian/Documents/java-workspace/thirdparties/spring-mvc-showcase/src/main/webapp/WEB-INF/spring/appServlet/controllers.xml",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkmobile/server/ThinkPHP/Library/Think/Model.class.php",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkmobile/server/ThinkPHP/Library/Think/Think.class.php",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkshop/Application/Common/Model/CommonModel.class.php",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkshop/ThinkPHP/Library/Think/Model.class.php",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkshop/Application/Admin/Controller/GoodsController.class.php",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkshop/Application/index.html",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkshop/Application/Admin/index.html",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkshop/Application/Admin/View/index.html",
				"/D/lujian/Documents/php-workspace/thirdparty/thinkshop/Application/Admin/View/UserGroup/add_edit.html",
				"/D/lujian/Documents/php-workspace/sql-learning/vendor/autoload.php",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/vendor/composer/autoload_real.php",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/README.md",
				"/D/lujian/Documents/php-workspace/thirdparty/sqli-labs/sql-connections/db-creds.inc",
				"/D/lujian/Documents/php-workspace/sql-learning/composer.json",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/bootstrap/autoload.php",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/vendor/composer/autoload_psr4.php",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/vendor/composer/installed.json",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/vendor/composer/include_paths.php",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/vendor/composer/autoload_files.php",
				"/D/lujian/Documents/php-workspace/thirdparty/Fixhub/vendor/symfony/polyfill-mbstring/bootstrap.php",
				"/D/lujian/Applications/php-5.5.38-Win32-VC11-x86/php.ini-development",
				"/E/SDMOBARefactor/Assets/Shaders/xf_heat_distortion.shader",
				"/E/SDMOBARefactor/Assets/Shaders/Terrain3Layer.shader",
				"/E/SDMOBARefactor/Assets/Shaders/RimLight.shader",
				"/D/lujian/Documents/php-workspace/php-webim/README.md",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/MarkdownEditing/Bold and Italic Markers.tmPreferences",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/MarkdownEditing/Markdown.sublime-settings",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/Terminal/Terminal.sublime-settings",
				"/D/lujian/Documents/cpp-workspace/thirdparty/tfs/src/common/base_main.cpp",
				"/D/lujian/Documents/cpp-workspace/docgen/main.cpp",
				"/D/lujian/Documents/cpp-workspace/thirdparty/tfs/src/common/cdefine.h",
				"/D/lujian/Documents/cpp-workspace/test.lua",
				"/D/lujian/Documents/cpp-workspace/thirdparty/tfs/src/dataserver/bit_map.cpp",
				"/D/lujian/Documents/cpp-workspace/thirdparty/tfs/src/common/meta_server_define.cpp",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/CTags/Default.sublime-keymap",
				"/D/lujian/Documents/cpp-workspace/thirdparty/tfs/src/common/base_main.h",
				"/D/lujian/Documents/cpp-workspace/docgen/file_system/file.h",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/CTags/CTags.sublime-settings",
				"/D/lujian/Documents/Lu-Kye.github.io/blogs/windows/problems.md",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/User/CPP.sublime-build",
				"/D/lujian/Applications/php-5.6.25/INSTALL",
				"/D/lujian/Applications/php-5.6.25/README.md",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/Default/Preferences.sublime-settings",
				"/C/Users/lujian/AppData/Roaming/Sublime Text 3/Packages/User/Preferences.sublime-settings"
			],
			"find":
			{
				"height": 26.0
			},
			"find_in_files":
			{
				"height": 93.0,
				"where_history":
				[
					"D:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-framework",
					"E:\\SDMOBARefactor\\ClientSolution\\Lockstep\\Code\\BehaviorTree",
					"E:\\SDMOBARefactor\\ClientSolution\\Lockstep\\Code",
					"E:\\SDMOBARefactor\\ClientSolution\\Lockstep",
					"E:\\SDMOBARefactor\\Assets\\Scripts",
					"E:\\SDMOBARefactor\\ClientSolution\\Lockstep\\Code\\Entity",
					"E:\\SDMOBARefactor\\Assets\\Editor\\BehaviorTreeEditor",
					"D:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-mvc-showcase",
					"D:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-mvc-showcase\\src",
					"D:\\lujian\\Documents\\java-workspace\\thirdparties\\tomcat\\java\\org\\apache\\tomcat",
					"D:\\lujian\\Documents\\java-workspace\\thirdparties\\tomcat\\java\\org\\apache",
					"D:\\lujian\\Documents\\java-workspace\\thirdparties\\gradle\\buildSrc\\src\\main",
					"D:\\lujian\\Documents\\java-workspace\\thirdparties\\spring-mvc-showcase",
					"D:\\lujian\\Documents\\php-workspace\\thirdparty\\Fixhub\\resources",
					"D:\\lujian\\Documents\\php-workspace\\thirdparty\\Fixhub\\resources\\assets\\sass\\components",
					"D:\\lujian\\Documents\\cpp-workspace\\thirdparty\\tfs"
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"getComponents()",
					"Component",
					"Blackboard",
					"revaluate",
					"Target",
					"_target",
					"onTakeDamage",
					"WriteValue",
					"commandManager",
					"TreeViewCommandManager",
					"tab",
					"Save",
					"install",
					"JSP-Serv",
					"log",
					"log4j",
					"main(",
					"main",
					"APP_HOME",
					"idea",
					"markdown",
					"apply plugin",
					"plugin",
					"samples",
					"hideMode",
					"loadClass",
					"includeFile",
					"include",
					"require",
					"col-md-8",
					"EXIT_SUCCESS",
					"UNAME_S"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"folders":
			[
				{
					"path": "D:\\lujian\\Documents\\java-workspace"
				}
			],
			"groups":
			[
				{
					"selected": 2,
					"sheets":
					[
						{
							"buffer": 0,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 764136,
								"regions":
								{
									"match":
									{
										"flags": 112,
										"regions":
										[
											[
												296,
												305
											],
											[
												471,
												480
											],
											[
												550,
												559
											],
											[
												912,
												921
											],
											[
												1277,
												1286
											],
											[
												1617,
												1626
											],
											[
												1917,
												1926
											],
											[
												2018,
												2027
											],
											[
												2313,
												2322
											],
											[
												2602,
												2611
											],
											[
												2878,
												2887
											],
											[
												2992,
												3001
											],
											[
												3480,
												3489
											],
											[
												3915,
												3924
											],
											[
												4061,
												4070
											],
											[
												4211,
												4220
											],
											[
												4333,
												4342
											],
											[
												4369,
												4378
											],
											[
												4489,
												4498
											],
											[
												4667,
												4676
											],
											[
												5086,
												5095
											],
											[
												5444,
												5453
											],
											[
												5705,
												5714
											],
											[
												5966,
												5975
											],
											[
												6097,
												6106
											],
											[
												6233,
												6242
											],
											[
												6253,
												6262
											],
											[
												6295,
												6304
											],
											[
												6409,
												6418
											],
											[
												6419,
												6428
											],
											[
												6822,
												6831
											],
											[
												6921,
												6930
											],
											[
												7113,
												7122
											],
											[
												7149,
												7158
											],
											[
												7206,
												7215
											],
											[
												7243,
												7252
											],
											[
												7372,
												7381
											],
											[
												7891,
												7900
											],
											[
												8186,
												8195
											],
											[
												8245,
												8254
											],
											[
												8363,
												8372
											],
											[
												8528,
												8537
											],
											[
												8731,
												8740
											],
											[
												8766,
												8775
											],
											[
												9040,
												9049
											],
											[
												9075,
												9084
											],
											[
												9191,
												9200
											],
											[
												9217,
												9226
											],
											[
												9251,
												9260
											],
											[
												9396,
												9405
											],
											[
												9412,
												9421
											],
											[
												9613,
												9622
											],
											[
												9702,
												9711
											],
											[
												9734,
												9743
											],
											[
												10102,
												10111
											],
											[
												10245,
												10254
											],
											[
												10280,
												10289
											],
											[
												10681,
												10690
											],
											[
												10827,
												10836
											],
											[
												10983,
												10992
											],
											[
												11019,
												11028
											],
											[
												11141,
												11150
											],
											[
												11762,
												11771
											],
											[
												12180,
												12189
											],
											[
												12220,
												12229
											],
											[
												12628,
												12637
											],
											[
												12963,
												12972
											],
											[
												12981,
												12990
											],
											[
												13418,
												13427
											],
											[
												13802,
												13811
											],
											[
												14239,
												14248
											],
											[
												14316,
												14325
											],
											[
												14402,
												14411
											],
											[
												14726,
												14735
											],
											[
												14748,
												14757
											],
											[
												14793,
												14802
											],
											[
												14878,
												14887
											],
											[
												14951,
												14960
											],
											[
												14964,
												14973
											],
											[
												15008,
												15017
											],
											[
												15056,
												15065
											],
											[
												15101,
												15110
											],
											[
												15122,
												15131
											],
											[
												15225,
												15234
											],
											[
												15253,
												15262
											],
											[
												15291,
												15300
											],
											[
												15354,
												15363
											],
											[
												15376,
												15385
											],
											[
												15416,
												15425
											],
											[
												15483,
												15492
											],
											[
												15522,
												15531
											],
											[
												15542,
												15551
											],
											[
												15570,
												15579
											],
											[
												15602,
												15611
											],
											[
												15641,
												15650
											],
											[
												15690,
												15699
											],
											[
												15711,
												15720
											],
											[
												15805,
												15814
											],
											[
												16104,
												16113
											],
											[
												16126,
												16135
											],
											[
												16171,
												16180
											],
											[
												16256,
												16265
											],
											[
												16337,
												16346
											],
											[
												16350,
												16359
											],
											[
												16394,
												16403
											],
											[
												16434,
												16443
											],
											[
												16479,
												16488
											],
											[
												16500,
												16509
											],
											[
												16603,
												16612
											],
											[
												16631,
												16640
											],
											[
												16669,
												16678
											],
											[
												16732,
												16741
											],
											[
												16754,
												16763
											],
											[
												16793,
												16802
											],
											[
												16860,
												16869
											],
											[
												16899,
												16908
											],
											[
												16919,
												16928
											],
											[
												16947,
												16956
											],
											[
												16979,
												16988
											],
											[
												17017,
												17026
											],
											[
												17065,
												17074
											],
											[
												17086,
												17095
											],
											[
												17179,
												17188
											],
											[
												17386,
												17395
											],
											[
												17425,
												17434
											],
											[
												17460,
												17469
											],
											[
												17497,
												17506
											],
											[
												17518,
												17527
											],
											[
												17785,
												17794
											],
											[
												17807,
												17816
											],
											[
												17852,
												17861
											],
											[
												17937,
												17946
											],
											[
												18018,
												18027
											],
											[
												18031,
												18040
											],
											[
												18075,
												18084
											],
											[
												18115,
												18124
											],
											[
												18160,
												18169
											],
											[
												18181,
												18190
											],
											[
												18284,
												18293
											],
											[
												18312,
												18321
											],
											[
												18350,
												18359
											],
											[
												18413,
												18422
											],
											[
												18435,
												18444
											],
											[
												18474,
												18483
											],
											[
												18541,
												18550
											],
											[
												18580,
												18589
											],
											[
												18600,
												18609
											],
											[
												18628,
												18637
											],
											[
												18660,
												18669
											],
											[
												18698,
												18707
											],
											[
												18746,
												18755
											],
											[
												18767,
												18776
											],
											[
												18860,
												18869
											],
											[
												19067,
												19076
											],
											[
												19106,
												19115
											],
											[
												19141,
												19150
											],
											[
												19178,
												19187
											],
											[
												19199,
												19208
											],
											[
												19423,
												19432
											],
											[
												19445,
												19454
											],
											[
												19490,
												19499
											],
											[
												19575,
												19584
											],
											[
												19656,
												19665
											],
											[
												19669,
												19678
											],
											[
												19713,
												19722
											],
											[
												19753,
												19762
											],
											[
												19798,
												19807
											],
											[
												19819,
												19828
											],
											[
												19922,
												19931
											],
											[
												19950,
												19959
											],
											[
												19988,
												19997
											],
											[
												20051,
												20060
											],
											[
												20073,
												20082
											],
											[
												20111,
												20120
											],
											[
												20178,
												20187
											],
											[
												20217,
												20226
											],
											[
												20237,
												20246
											],
											[
												20265,
												20274
											],
											[
												20297,
												20306
											],
											[
												20334,
												20343
											],
											[
												20381,
												20390
											],
											[
												20402,
												20411
											],
											[
												20502,
												20511
											],
											[
												20786,
												20795
											],
											[
												20843,
												20852
											],
											[
												20882,
												20891
											],
											[
												20932,
												20941
											],
											[
												20960,
												20969
											],
											[
												20990,
												20999
											],
											[
												21041,
												21050
											],
											[
												21082,
												21091
											],
											[
												21132,
												21141
											],
											[
												21169,
												21178
											],
											[
												21208,
												21217
											],
											[
												21243,
												21252
											],
											[
												21270,
												21279
											],
											[
												21731,
												21740
											],
											[
												22000,
												22009
											],
											[
												22040,
												22049
											],
											[
												22106,
												22115
											],
											[
												22400,
												22409
											],
											[
												22436,
												22445
											],
											[
												22499,
												22508
											],
											[
												22697,
												22706
											],
											[
												22832,
												22841
											],
											[
												23016,
												23025
											],
											[
												23253,
												23262
											],
											[
												23277,
												23286
											],
											[
												23364,
												23373
											],
											[
												23436,
												23445
											],
											[
												23505,
												23514
											],
											[
												23522,
												23531
											],
											[
												23638,
												23647
											],
											[
												24031,
												24040
											],
											[
												24409,
												24418
											],
											[
												24663,
												24672
											],
											[
												25103,
												25112
											],
											[
												25686,
												25695
											],
											[
												26145,
												26154
											],
											[
												26631,
												26640
											],
											[
												27097,
												27106
											],
											[
												27678,
												27687
											],
											[
												28139,
												28148
											],
											[
												28206,
												28215
											],
											[
												28795,
												28804
											],
											[
												29010,
												29019
											],
											[
												29371,
												29380
											],
											[
												29790,
												29799
											],
											[
												30118,
												30127
											],
											[
												30467,
												30476
											],
											[
												30498,
												30507
											],
											[
												30734,
												30743
											],
											[
												30981,
												30990
											],
											[
												31041,
												31050
											],
											[
												31180,
												31189
											],
											[
												31351,
												31360
											],
											[
												31585,
												31594
											],
											[
												31832,
												31841
											],
											[
												32093,
												32102
											],
											[
												32291,
												32300
											],
											[
												32516,
												32525
											],
											[
												32698,
												32707
											],
											[
												32925,
												32934
											],
											[
												33463,
												33472
											],
											[
												33714,
												33723
											],
											[
												34053,
												34062
											],
											[
												34641,
												34650
											],
											[
												35026,
												35035
											],
											[
												35070,
												35079
											],
											[
												35109,
												35118
											],
											[
												35164,
												35173
											],
											[
												35184,
												35193
											],
											[
												35240,
												35249
											],
											[
												35362,
												35371
											],
											[
												35489,
												35498
											],
											[
												35635,
												35644
											],
											[
												35883,
												35892
											],
											[
												35952,
												35961
											],
											[
												36335,
												36344
											],
											[
												36695,
												36704
											],
											[
												37096,
												37105
											],
											[
												37179,
												37188
											],
											[
												37260,
												37269
											],
											[
												37364,
												37373
											],
											[
												37417,
												37426
											],
											[
												37453,
												37462
											],
											[
												37596,
												37605
											],
											[
												37623,
												37632
											],
											[
												37717,
												37726
											],
											[
												37787,
												37796
											],
											[
												37880,
												37889
											],
											[
												37926,
												37935
											],
											[
												38110,
												38119
											],
											[
												38156,
												38165
											],
											[
												38185,
												38194
											],
											[
												38206,
												38215
											],
											[
												38264,
												38273
											],
											[
												38274,
												38283
											],
											[
												38294,
												38303
											],
											[
												38331,
												38340
											],
											[
												38343,
												38352
											],
											[
												38403,
												38412
											],
											[
												38418,
												38427
											],
											[
												38489,
												38498
											],
											[
												38520,
												38529
											],
											[
												38576,
												38585
											],
											[
												38641,
												38650
											],
											[
												38672,
												38681
											],
											[
												38714,
												38723
											],
											[
												38737,
												38746
											],
											[
												38768,
												38777
											],
											[
												39019,
												39028
											],
											[
												39039,
												39048
											],
											[
												39059,
												39068
											],
											[
												39307,
												39316
											],
											[
												39327,
												39336
											],
											[
												39347,
												39356
											],
											[
												39398,
												39407
											],
											[
												39418,
												39427
											],
											[
												39686,
												39695
											],
											[
												39855,
												39864
											],
											[
												39904,
												39913
											],
											[
												39949,
												39958
											],
											[
												39979,
												39988
											],
											[
												40024,
												40033
											],
											[
												40044,
												40053
											],
											[
												40064,
												40073
											],
											[
												40480,
												40489
											],
											[
												40962,
												40971
											],
											[
												41360,
												41369
											],
											[
												41384,
												41393
											],
											[
												41480,
												41489
											],
											[
												41774,
												41783
											],
											[
												42343,
												42352
											],
											[
												42658,
												42667
											],
											[
												42678,
												42687
											],
											[
												42708,
												42717
											],
											[
												42760,
												42769
											],
											[
												42780,
												42789
											],
											[
												42836,
												42845
											],
											[
												42846,
												42855
											],
											[
												43099,
												43108
											],
											[
												43165,
												43174
											],
											[
												43454,
												43463
											],
											[
												43820,
												43829
											],
											[
												43959,
												43968
											],
											[
												44055,
												44064
											],
											[
												44235,
												44244
											],
											[
												44293,
												44302
											],
											[
												44648,
												44657
											],
											[
												44683,
												44692
											],
											[
												44774,
												44783
											],
											[
												44798,
												44807
											],
											[
												44818,
												44827
											],
											[
												45247,
												45256
											],
											[
												45492,
												45501
											],
											[
												45520,
												45529
											],
											[
												45863,
												45872
											],
											[
												45940,
												45949
											],
											[
												46026,
												46035
											],
											[
												46309,
												46318
											],
											[
												46340,
												46349
											],
											[
												46432,
												46441
											],
											[
												46465,
												46474
											],
											[
												46512,
												46521
											],
											[
												46556,
												46565
											],
											[
												46592,
												46601
											],
											[
												46678,
												46687
											],
											[
												46697,
												46706
											],
											[
												46727,
												46736
											],
											[
												46764,
												46773
											],
											[
												46790,
												46799
											],
											[
												46844,
												46853
											],
											[
												46877,
												46886
											],
											[
												46917,
												46926
											],
											[
												46953,
												46962
											],
											[
												47033,
												47042
											],
											[
												47064,
												47073
											],
											[
												47087,
												47096
											],
											[
												47147,
												47156
											],
											[
												47157,
												47166
											],
											[
												47177,
												47186
											],
											[
												47208,
												47217
											],
											[
												47238,
												47247
											],
											[
												47263,
												47272
											],
											[
												47299,
												47308
											],
											[
												47340,
												47349
											],
											[
												47359,
												47368
											],
											[
												47369,
												47378
											],
											[
												47441,
												47450
											],
											[
												47461,
												47470
											],
											[
												47534,
												47543
											],
											[
												47548,
												47557
											],
											[
												47568,
												47577
											],
											[
												47639,
												47648
											],
											[
												47683,
												47692
											],
											[
												47693,
												47702
											],
											[
												48138,
												48147
											],
											[
												48458,
												48467
											],
											[
												49029,
												49038
											],
											[
												49252,
												49261
											],
											[
												49454,
												49463
											],
											[
												49673,
												49682
											],
											[
												49912,
												49921
											],
											[
												50099,
												50108
											],
											[
												50140,
												50149
											],
											[
												50227,
												50236
											],
											[
												50392,
												50401
											],
											[
												50600,
												50609
											],
											[
												50766,
												50775
											],
											[
												50821,
												50830
											],
											[
												50953,
												50962
											],
											[
												51323,
												51332
											],
											[
												51500,
												51509
											],
											[
												51816,
												51825
											],
											[
												52241,
												52250
											],
											[
												52627,
												52636
											],
											[
												52904,
												52913
											],
											[
												52971,
												52980
											],
											[
												53431,
												53440
											],
											[
												53508,
												53517
											],
											[
												53775,
												53784
											],
											[
												53795,
												53804
											],
											[
												53840,
												53849
											],
											[
												53893,
												53902
											],
											[
												53929,
												53938
											],
											[
												53976,
												53985
											],
											[
												54069,
												54078
											],
											[
												54307,
												54316
											],
											[
												54392,
												54401
											],
											[
												54477,
												54486
											],
											[
												54568,
												54577
											],
											[
												54793,
												54802
											],
											[
												54864,
												54873
											],
											[
												54884,
												54893
											],
											[
												54929,
												54938
											],
											[
												54983,
												54992
											],
											[
												55019,
												55028
											],
											[
												55066,
												55075
											],
											[
												55159,
												55168
											],
											[
												55378,
												55387
											],
											[
												55453,
												55462
											],
											[
												55544,
												55553
											],
											[
												55757,
												55766
											],
											[
												56228,
												56237
											],
											[
												56417,
												56426
											],
											[
												56944,
												56953
											],
											[
												57193,
												57202
											],
											[
												57223,
												57232
											],
											[
												57252,
												57261
											],
											[
												57359,
												57368
											],
											[
												57455,
												57464
											],
											[
												57618,
												57627
											],
											[
												57646,
												57655
											],
											[
												57675,
												57684
											],
											[
												57764,
												57773
											],
											[
												57856,
												57865
											],
											[
												58313,
												58322
											],
											[
												58610,
												58619
											],
											[
												58631,
												58640
											],
											[
												58830,
												58839
											],
											[
												58850,
												58859
											],
											[
												58870,
												58879
											],
											[
												58907,
												58916
											],
											[
												58932,
												58941
											],
											[
												58963,
												58972
											],
											[
												59018,
												59027
											],
											[
												59041,
												59050
											],
											[
												59097,
												59106
											],
											[
												59162,
												59171
											],
											[
												59187,
												59196
											],
											[
												59232,
												59241
											],
											[
												59271,
												59280
											],
											[
												59341,
												59350
											],
											[
												59712,
												59721
											],
											[
												60129,
												60138
											],
											[
												60299,
												60308
											],
											[
												60332,
												60341
											],
											[
												60744,
												60753
											],
											[
												60921,
												60930
											],
											[
												60967,
												60976
											],
											[
												61154,
												61163
											],
											[
												61304,
												61313
											],
											[
												61359,
												61368
											],
											[
												61723,
												61732
											],
											[
												61840,
												61849
											],
											[
												61949,
												61958
											],
											[
												62108,
												62117
											],
											[
												62416,
												62425
											],
											[
												62587,
												62596
											],
											[
												62721,
												62730
											],
											[
												62800,
												62809
											],
											[
												62841,
												62850
											],
											[
												63240,
												63249
											],
											[
												63313,
												63322
											],
											[
												63359,
												63368
											],
											[
												63536,
												63545
											],
											[
												63739,
												63748
											],
											[
												63938,
												63947
											],
											[
												63991,
												64000
											],
											[
												64034,
												64043
											],
											[
												64452,
												64461
											],
											[
												64523,
												64532
											],
											[
												64710,
												64719
											],
											[
												64836,
												64845
											],
											[
												65026,
												65035
											],
											[
												65262,
												65271
											],
											[
												65661,
												65670
											],
											[
												66106,
												66115
											],
											[
												66425,
												66434
											],
											[
												66739,
												66748
											],
											[
												67052,
												67061
											],
											[
												67408,
												67417
											],
											[
												67534,
												67543
											],
											[
												67638,
												67647
											],
											[
												67778,
												67787
											],
											[
												67993,
												68002
											],
											[
												68040,
												68049
											],
											[
												68187,
												68196
											],
											[
												68233,
												68242
											],
											[
												68249,
												68258
											],
											[
												68373,
												68382
											],
											[
												68514,
												68523
											],
											[
												68672,
												68681
											],
											[
												68826,
												68835
											],
											[
												68860,
												68869
											],
											[
												69002,
												69011
											],
											[
												69058,
												69067
											],
											[
												69219,
												69228
											],
											[
												69365,
												69374
											],
											[
												69523,
												69532
											],
											[
												69678,
												69687
											],
											[
												69845,
												69854
											],
											[
												70026,
												70035
											],
											[
												70194,
												70203
											],
											[
												70350,
												70359
											],
											[
												70495,
												70504
											],
											[
												70707,
												70716
											],
											[
												70895,
												70904
											],
											[
												71066,
												71075
											],
											[
												71249,
												71258
											],
											[
												71436,
												71445
											],
											[
												71620,
												71629
											],
											[
												71706,
												71715
											],
											[
												71776,
												71785
											],
											[
												71896,
												71905
											],
											[
												71909,
												71918
											],
											[
												72055,
												72064
											],
											[
												72146,
												72155
											],
											[
												72226,
												72235
											],
											[
												72356,
												72365
											],
											[
												72441,
												72450
											],
											[
												72484,
												72493
											],
											[
												72677,
												72686
											],
											[
												72760,
												72769
											],
											[
												72803,
												72812
											],
											[
												72996,
												73005
											],
											[
												73196,
												73205
											],
											[
												73504,
												73513
											],
											[
												73547,
												73556
											],
											[
												73835,
												73844
											],
											[
												73989,
												73998
											],
											[
												74068,
												74077
											],
											[
												74447,
												74456
											],
											[
												74503,
												74512
											],
											[
												74607,
												74616
											],
											[
												74951,
												74960
											],
											[
												75017,
												75026
											],
											[
												75092,
												75101
											],
											[
												75128,
												75137
											],
											[
												75432,
												75441
											],
											[
												75836,
												75845
											],
											[
												75960,
												75969
											],
											[
												76115,
												76124
											],
											[
												76300,
												76309
											],
											[
												76504,
												76513
											],
											[
												76685,
												76694
											],
											[
												76814,
												76823
											],
											[
												77001,
												77010
											],
											[
												77419,
												77428
											],
											[
												77801,
												77810
											],
											[
												78183,
												78192
											],
											[
												78842,
												78851
											],
											[
												78928,
												78937
											],
											[
												79260,
												79269
											],
											[
												79308,
												79317
											],
											[
												79395,
												79404
											],
											[
												79413,
												79422
											],
											[
												79491,
												79500
											],
											[
												79509,
												79518
											],
											[
												79597,
												79606
											],
											[
												79615,
												79624
											],
											[
												79734,
												79743
											],
											[
												79945,
												79954
											],
											[
												79963,
												79972
											],
											[
												80226,
												80235
											],
											[
												80274,
												80283
											],
											[
												80361,
												80370
											],
											[
												80379,
												80388
											],
											[
												80457,
												80466
											],
											[
												80475,
												80484
											],
											[
												80563,
												80572
											],
											[
												80581,
												80590
											],
											[
												80701,
												80710
											],
											[
												80902,
												80911
											],
											[
												80920,
												80929
											],
											[
												81002,
												81011
											],
											[
												81020,
												81029
											],
											[
												81318,
												81327
											],
											[
												81763,
												81772
											],
											[
												82145,
												82154
											],
											[
												82655,
												82664
											],
											[
												82666,
												82675
											],
											[
												82803,
												82812
											],
											[
												82814,
												82823
											],
											[
												83072,
												83081
											],
											[
												83083,
												83092
											],
											[
												83286,
												83295
											],
											[
												83548,
												83557
											],
											[
												83822,
												83831
											],
											[
												83887,
												83896
											],
											[
												84098,
												84107
											],
											[
												84328,
												84337
											],
											[
												84699,
												84708
											],
											[
												84940,
												84949
											],
											[
												85047,
												85056
											],
											[
												85606,
												85615
											],
											[
												85617,
												85626
											],
											[
												86225,
												86234
											],
											[
												86311,
												86320
											],
											[
												86614,
												86623
											],
											[
												86699,
												86708
											],
											[
												86749,
												86758
											],
											[
												86837,
												86846
											],
											[
												86927,
												86936
											],
											[
												87051,
												87060
											],
											[
												87069,
												87078
											],
											[
												87174,
												87183
											],
											[
												87232,
												87241
											],
											[
												87623,
												87632
											],
											[
												88190,
												88199
											],
											[
												88421,
												88430
											],
											[
												88607,
												88616
											],
											[
												89130,
												89139
											],
											[
												89141,
												89150
											],
											[
												89424,
												89433
											],
											[
												89698,
												89707
											],
											[
												89966,
												89975
											],
											[
												89977,
												89986
											],
											[
												90320,
												90329
											],
											[
												90331,
												90340
											],
											[
												90678,
												90687
											],
											[
												91001,
												91010
											],
											[
												91533,
												91542
											],
											[
												91607,
												91616
											],
											[
												91940,
												91949
											],
											[
												92099,
												92108
											],
											[
												92142,
												92151
											],
											[
												92208,
												92217
											],
											[
												92308,
												92317
											],
											[
												92681,
												92690
											],
											[
												92754,
												92763
											],
											[
												93015,
												93024
											],
											[
												93031,
												93040
											],
											[
												93195,
												93204
											],
											[
												93351,
												93360
											],
											[
												93362,
												93371
											],
											[
												93607,
												93616
											],
											[
												93791,
												93800
											],
											[
												93947,
												93956
											],
											[
												93958,
												93967
											],
											[
												94209,
												94218
											],
											[
												94564,
												94573
											],
											[
												94591,
												94600
											],
											[
												94734,
												94743
											],
											[
												94912,
												94921
											],
											[
												95169,
												95178
											],
											[
												95475,
												95484
											],
											[
												95705,
												95714
											],
											[
												95716,
												95725
											],
											[
												95942,
												95951
											],
											[
												95953,
												95962
											],
											[
												96057,
												96066
											],
											[
												96068,
												96077
											],
											[
												96401,
												96410
											],
											[
												96472,
												96481
											],
											[
												96785,
												96794
											],
											[
												97116,
												97125
											],
											[
												97265,
												97274
											],
											[
												97482,
												97491
											],
											[
												97579,
												97588
											],
											[
												97670,
												97679
											],
											[
												97774,
												97783
											],
											[
												98038,
												98047
											],
											[
												98334,
												98343
											],
											[
												98530,
												98539
											],
											[
												98625,
												98634
											],
											[
												98788,
												98797
											],
											[
												99054,
												99063
											],
											[
												99291,
												99300
											],
											[
												99395,
												99404
											],
											[
												99615,
												99624
											],
											[
												99868,
												99877
											],
											[
												99927,
												99936
											],
											[
												100198,
												100207
											],
											[
												100395,
												100404
											],
											[
												100717,
												100726
											],
											[
												100776,
												100785
											],
											[
												101030,
												101039
											],
											[
												101423,
												101432
											],
											[
												101810,
												101819
											],
											[
												101955,
												101964
											],
											[
												102184,
												102193
											],
											[
												102363,
												102372
											],
											[
												102693,
												102702
											],
											[
												102903,
												102912
											],
											[
												102950,
												102959
											],
											[
												103166,
												103175
											],
											[
												103225,
												103234
											],
											[
												103389,
												103398
											],
											[
												103640,
												103649
											],
											[
												103980,
												103989
											],
											[
												104180,
												104189
											],
											[
												104484,
												104493
											],
											[
												104708,
												104717
											],
											[
												104864,
												104873
											],
											[
												105100,
												105109
											],
											[
												105323,
												105332
											],
											[
												105470,
												105479
											],
											[
												105661,
												105670
											],
											[
												105732,
												105741
											],
											[
												106170,
												106179
											],
											[
												106335,
												106344
											],
											[
												106491,
												106500
											],
											[
												106562,
												106571
											],
											[
												106833,
												106842
											],
											[
												107197,
												107206
											],
											[
												107474,
												107483
											],
											[
												107645,
												107654
											],
											[
												107703,
												107712
											],
											[
												107833,
												107842
											],
											[
												108099,
												108108
											],
											[
												108432,
												108441
											],
											[
												108657,
												108666
											],
											[
												108976,
												108985
											],
											[
												109220,
												109229
											],
											[
												109403,
												109412
											],
											[
												109500,
												109509
											],
											[
												109735,
												109744
											],
											[
												109956,
												109965
											],
											[
												110195,
												110204
											],
											[
												110502,
												110511
											],
											[
												110778,
												110787
											],
											[
												111089,
												111098
											],
											[
												111640,
												111649
											],
											[
												111726,
												111735
											],
											[
												111962,
												111971
											],
											[
												112087,
												112096
											],
											[
												112438,
												112447
											],
											[
												112595,
												112604
											],
											[
												112800,
												112809
											],
											[
												112848,
												112857
											],
											[
												113009,
												113018
											],
											[
												113027,
												113036
											],
											[
												113311,
												113320
											],
											[
												113329,
												113338
											],
											[
												113430,
												113439
											],
											[
												113671,
												113680
											],
											[
												114054,
												114063
											],
											[
												114159,
												114168
											],
											[
												114302,
												114311
											],
											[
												114513,
												114522
											],
											[
												114658,
												114667
											],
											[
												114691,
												114700
											],
											[
												114999,
												115008
											],
											[
												115391,
												115400
											],
											[
												115679,
												115688
											],
											[
												115931,
												115940
											],
											[
												116304,
												116313
											],
											[
												116319,
												116328
											],
											[
												116555,
												116564
											],
											[
												116976,
												116985
											],
											[
												117123,
												117132
											],
											[
												117223,
												117232
											],
											[
												117234,
												117243
											],
											[
												117316,
												117325
											],
											[
												117391,
												117400
											],
											[
												117569,
												117578
											],
											[
												117808,
												117817
											],
											[
												117871,
												117880
											],
											[
												117917,
												117926
											],
											[
												117932,
												117941
											],
											[
												118044,
												118053
											],
											[
												118223,
												118232
											],
											[
												118238,
												118247
											],
											[
												118409,
												118418
											],
											[
												118549,
												118558
											],
											[
												118768,
												118777
											],
											[
												119257,
												119266
											],
											[
												119823,
												119832
											],
											[
												120003,
												120012
											],
											[
												120033,
												120042
											],
											[
												120341,
												120350
											],
											[
												120579,
												120588
											],
											[
												120605,
												120614
											],
											[
												120676,
												120685
											],
											[
												120877,
												120886
											],
											[
												120938,
												120947
											],
											[
												121040,
												121049
											],
											[
												121062,
												121071
											],
											[
												121098,
												121107
											],
											[
												121262,
												121271
											],
											[
												121278,
												121287
											],
											[
												121346,
												121355
											],
											[
												121472,
												121481
											],
											[
												121498,
												121507
											],
											[
												122039,
												122048
											],
											[
												122266,
												122275
											],
											[
												122510,
												122519
											],
											[
												122733,
												122742
											],
											[
												122957,
												122966
											],
											[
												123312,
												123321
											],
											[
												123706,
												123715
											],
											[
												124010,
												124019
											],
											[
												124510,
												124519
											],
											[
												124604,
												124613
											],
											[
												124665,
												124674
											],
											[
												124955,
												124964
											],
											[
												125003,
												125012
											],
											[
												125255,
												125264
											],
											[
												125303,
												125312
											],
											[
												125603,
												125612
											],
											[
												126043,
												126052
											],
											[
												126194,
												126203
											],
											[
												126643,
												126652
											],
											[
												126936,
												126945
											],
											[
												127249,
												127258
											],
											[
												127422,
												127431
											],
											[
												127527,
												127536
											],
											[
												127631,
												127640
											],
											[
												127732,
												127741
											],
											[
												127829,
												127838
											],
											[
												127957,
												127966
											],
											[
												128314,
												128323
											],
											[
												128329,
												128338
											],
											[
												128457,
												128466
											],
											[
												128486,
												128495
											],
											[
												128532,
												128541
											],
											[
												129053,
												129062
											],
											[
												129306,
												129315
											],
											[
												129654,
												129663
											],
											[
												129665,
												129674
											],
											[
												129805,
												129814
											],
											[
												129963,
												129972
											],
											[
												130386,
												130395
											],
											[
												130742,
												130751
											],
											[
												131157,
												131166
											],
											[
												131542,
												131551
											],
											[
												131552,
												131561
											],
											[
												131699,
												131708
											],
											[
												131840,
												131849
											],
											[
												132010,
												132019
											],
											[
												132341,
												132350
											],
											[
												132488,
												132497
											],
											[
												132774,
												132783
											],
											[
												132834,
												132843
											],
											[
												133104,
												133113
											],
											[
												133362,
												133371
											],
											[
												133849,
												133858
											],
											[
												134176,
												134185
											],
											[
												134497,
												134506
											],
											[
												134982,
												134991
											],
											[
												135476,
												135485
											],
											[
												135602,
												135611
											],
											[
												135997,
												136006
											],
											[
												136008,
												136017
											],
											[
												136232,
												136241
											],
											[
												136406,
												136415
											],
											[
												136624,
												136633
											],
											[
												136958,
												136967
											],
											[
												137384,
												137393
											],
											[
												137716,
												137725
											],
											[
												138268,
												138277
											],
											[
												138575,
												138584
											],
											[
												138596,
												138605
											],
											[
												139149,
												139158
											],
											[
												139572,
												139581
											],
											[
												139604,
												139613
											],
											[
												139998,
												140007
											],
											[
												140333,
												140342
											],
											[
												140351,
												140360
											],
											[
												140732,
												140741
											],
											[
												141156,
												141165
											],
											[
												141490,
												141499
											],
											[
												141779,
												141788
											],
											[
												142043,
												142052
											],
											[
												142150,
												142159
											],
											[
												142260,
												142269
											],
											[
												142562,
												142571
											],
											[
												142741,
												142750
											],
											[
												142850,
												142859
											],
											[
												142962,
												142971
											],
											[
												143073,
												143082
											],
											[
												143121,
												143130
											],
											[
												143207,
												143216
											],
											[
												143358,
												143367
											],
											[
												143400,
												143409
											],
											[
												143844,
												143853
											],
											[
												143904,
												143913
											],
											[
												144089,
												144098
											],
											[
												144211,
												144220
											],
											[
												144298,
												144307
											],
											[
												144495,
												144504
											],
											[
												144734,
												144743
											],
											[
												144912,
												144921
											],
											[
												145196,
												145205
											],
											[
												145541,
												145550
											],
											[
												145750,
												145759
											],
											[
												146063,
												146072
											],
											[
												146247,
												146256
											],
											[
												146535,
												146544
											],
											[
												146597,
												146606
											],
											[
												146724,
												146733
											],
											[
												146853,
												146862
											],
											[
												146914,
												146923
											],
											[
												147377,
												147386
											],
											[
												147491,
												147500
											],
											[
												147627,
												147636
											],
											[
												147761,
												147770
											],
											[
												147837,
												147846
											],
											[
												148144,
												148153
											],
											[
												148285,
												148294
											],
											[
												148647,
												148656
											],
											[
												148981,
												148990
											],
											[
												149108,
												149117
											],
											[
												149131,
												149140
											],
											[
												149182,
												149191
											],
											[
												149231,
												149240
											],
											[
												149283,
												149292
											],
											[
												149319,
												149328
											],
											[
												149524,
												149533
											],
											[
												149752,
												149761
											],
											[
												149835,
												149844
											],
											[
												150049,
												150058
											],
											[
												150264,
												150273
											],
											[
												150492,
												150501
											],
											[
												150696,
												150705
											],
											[
												150837,
												150846
											],
											[
												151260,
												151269
											],
											[
												151781,
												151790
											],
											[
												152161,
												152170
											],
											[
												152285,
												152294
											],
											[
												152441,
												152450
											],
											[
												152589,
												152598
											],
											[
												152765,
												152774
											],
											[
												153115,
												153124
											],
											[
												153239,
												153248
											],
											[
												153395,
												153404
											],
											[
												153548,
												153557
											],
											[
												153729,
												153738
											],
											[
												154098,
												154107
											],
											[
												154613,
												154622
											],
											[
												155114,
												155123
											],
											[
												155562,
												155571
											],
											[
												155663,
												155672
											],
											[
												155821,
												155830
											],
											[
												156138,
												156147
											],
											[
												156545,
												156554
											],
											[
												156934,
												156943
											],
											[
												157516,
												157525
											],
											[
												158032,
												158041
											],
											[
												158127,
												158136
											],
											[
												158404,
												158413
											],
											[
												158805,
												158814
											],
											[
												159282,
												159291
											],
											[
												159594,
												159603
											],
											[
												159823,
												159832
											],
											[
												160159,
												160168
											],
											[
												160599,
												160608
											],
											[
												160685,
												160694
											],
											[
												160963,
												160972
											],
											[
												161045,
												161054
											],
											[
												161095,
												161104
											],
											[
												161183,
												161192
											],
											[
												161287,
												161296
											],
											[
												161446,
												161455
											],
											[
												161504,
												161513
											],
											[
												161680,
												161689
											],
											[
												161698,
												161707
											],
											[
												162073,
												162082
											],
											[
												162091,
												162100
											],
											[
												162458,
												162467
											],
											[
												162876,
												162885
											],
											[
												162894,
												162903
											],
											[
												163364,
												163373
											],
											[
												163795,
												163804
											],
											[
												164052,
												164061
											],
											[
												164099,
												164108
											],
											[
												164323,
												164332
											],
											[
												164416,
												164425
											],
											[
												164502,
												164511
											],
											[
												164546,
												164555
											],
											[
												164922,
												164931
											],
											[
												164933,
												164942
											],
											[
												165204,
												165213
											],
											[
												165445,
												165454
											],
											[
												165574,
												165583
											],
											[
												165660,
												165669
											],
											[
												165704,
												165713
											],
											[
												166043,
												166052
											],
											[
												166219,
												166228
											],
											[
												166528,
												166537
											],
											[
												166610,
												166619
											],
											[
												166645,
												166654
											],
											[
												166685,
												166694
											],
											[
												166780,
												166789
											],
											[
												167058,
												167067
											],
											[
												167234,
												167243
											],
											[
												167597,
												167606
											],
											[
												167608,
												167617
											],
											[
												167799,
												167808
											],
											[
												167967,
												167976
											],
											[
												168096,
												168105
											],
											[
												168182,
												168191
											],
											[
												168226,
												168235
											],
											[
												168594,
												168603
											],
											[
												168605,
												168614
											],
											[
												168790,
												168799
											],
											[
												168913,
												168922
											],
											[
												169039,
												169048
											],
											[
												169125,
												169134
											],
											[
												169169,
												169178
											],
											[
												169591,
												169600
											],
											[
												170043,
												170052
											],
											[
												170211,
												170220
											],
											[
												170335,
												170344
											],
											[
												170433,
												170442
											],
											[
												170812,
												170821
											],
											[
												170873,
												170882
											],
											[
												171235,
												171244
											],
											[
												171464,
												171473
											],
											[
												171579,
												171588
											],
											[
												171661,
												171670
											],
											[
												171872,
												171881
											],
											[
												172171,
												172180
											],
											[
												172381,
												172390
											],
											[
												172639,
												172648
											],
											[
												172837,
												172846
											],
											[
												173196,
												173205
											],
											[
												173497,
												173506
											],
											[
												173741,
												173750
											],
											[
												173957,
												173966
											],
											[
												174294,
												174303
											],
											[
												174379,
												174388
											],
											[
												174522,
												174531
											],
											[
												174607,
												174616
											],
											[
												175036,
												175045
											],
											[
												175509,
												175518
											],
											[
												175623,
												175632
											],
											[
												175870,
												175879
											],
											[
												175993,
												176002
											],
											[
												176323,
												176332
											],
											[
												176437,
												176446
											],
											[
												176469,
												176478
											],
											[
												176507,
												176516
											],
											[
												176846,
												176855
											],
											[
												176897,
												176906
											],
											[
												176929,
												176938
											],
											[
												176955,
												176964
											],
											[
												177012,
												177021
											],
											[
												177096,
												177105
											],
											[
												177352,
												177361
											],
											[
												177382,
												177391
											],
											[
												177443,
												177452
											],
											[
												177531,
												177540
											],
											[
												177806,
												177815
											],
											[
												178123,
												178132
											],
											[
												178243,
												178252
											],
											[
												178539,
												178548
											],
											[
												178777,
												178786
											],
											[
												179026,
												179035
											],
											[
												179291,
												179300
											],
											[
												179625,
												179634
											],
											[
												179704,
												179713
											],
											[
												179722,
												179731
											],
											[
												179765,
												179774
											],
											[
												180105,
												180114
											],
											[
												180243,
												180252
											],
											[
												180277,
												180286
											],
											[
												180410,
												180419
											],
											[
												180432,
												180441
											],
											[
												180478,
												180487
											],
											[
												180781,
												180790
											],
											[
												180864,
												180873
											],
											[
												180906,
												180915
											],
											[
												180997,
												181006
											],
											[
												181078,
												181087
											],
											[
												181404,
												181413
											],
											[
												181484,
												181493
											],
											[
												181521,
												181530
											],
											[
												181826,
												181835
											],
											[
												181853,
												181862
											],
											[
												182293,
												182302
											],
											[
												182416,
												182425
											],
											[
												182733,
												182742
											],
											[
												182760,
												182769
											],
											[
												183144,
												183153
											],
											[
												183235,
												183244
											],
											[
												183571,
												183580
											],
											[
												183837,
												183846
											],
											[
												184032,
												184041
											],
											[
												184198,
												184207
											],
											[
												184468,
												184477
											],
											[
												184646,
												184655
											],
											[
												184901,
												184910
											],
											[
												185086,
												185095
											],
											[
												185358,
												185367
											],
											[
												185556,
												185565
											],
											[
												185810,
												185819
											],
											[
												185991,
												186000
											],
											[
												186219,
												186228
											],
											[
												186403,
												186412
											],
											[
												186576,
												186585
											],
											[
												186665,
												186674
											],
											[
												186714,
												186723
											],
											[
												186761,
												186770
											],
											[
												186805,
												186814
											],
											[
												186857,
												186866
											],
											[
												186905,
												186914
											],
											[
												186990,
												186999
											],
											[
												187121,
												187130
											],
											[
												187170,
												187179
											],
											[
												187253,
												187262
											],
											[
												187297,
												187306
											],
											[
												187714,
												187723
											],
											[
												188086,
												188095
											],
											[
												188585,
												188594
											],
											[
												188885,
												188894
											],
											[
												189140,
												189149
											],
											[
												189476,
												189485
											],
											[
												189762,
												189771
											],
											[
												190064,
												190073
											],
											[
												190362,
												190371
											],
											[
												190616,
												190625
											],
											[
												190870,
												190879
											],
											[
												191202,
												191211
											],
											[
												191562,
												191571
											],
											[
												191847,
												191856
											],
											[
												192276,
												192285
											],
											[
												192559,
												192568
											],
											[
												192910,
												192919
											],
											[
												193271,
												193280
											],
											[
												193632,
												193641
											],
											[
												193995,
												194004
											],
											[
												194356,
												194365
											],
											[
												194565,
												194574
											],
											[
												195039,
												195048
											],
											[
												195348,
												195357
											],
											[
												195468,
												195477
											],
											[
												195514,
												195523
											],
											[
												195539,
												195548
											],
											[
												195929,
												195938
											],
											[
												195990,
												195999
											],
											[
												196055,
												196064
											],
											[
												196222,
												196231
											],
											[
												196447,
												196456
											],
											[
												196782,
												196791
											],
											[
												197140,
												197149
											],
											[
												197362,
												197371
											],
											[
												197639,
												197648
											],
											[
												197708,
												197717
											],
											[
												197795,
												197804
											],
											[
												197813,
												197822
											],
											[
												197938,
												197947
											],
											[
												197997,
												198006
											],
											[
												198105,
												198114
											],
											[
												198351,
												198360
											],
											[
												198410,
												198419
											],
											[
												198669,
												198678
											],
											[
												198833,
												198842
											],
											[
												198926,
												198935
											],
											[
												199000,
												199009
											],
											[
												199263,
												199272
											],
											[
												199322,
												199331
											],
											[
												199430,
												199439
											],
											[
												199565,
												199574
											],
											[
												199742,
												199751
											],
											[
												199801,
												199810
											],
											[
												199977,
												199986
											],
											[
												200169,
												200178
											],
											[
												200228,
												200237
											],
											[
												200401,
												200410
											],
											[
												200522,
												200531
											],
											[
												200769,
												200778
											],
											[
												200828,
												200837
											],
											[
												200937,
												200946
											],
											[
												201234,
												201243
											],
											[
												201293,
												201302
											],
											[
												201605,
												201614
											],
											[
												201765,
												201774
											],
											[
												201975,
												201984
											],
											[
												202034,
												202043
											],
											[
												202143,
												202152
											],
											[
												202440,
												202449
											],
											[
												202499,
												202508
											],
											[
												202811,
												202820
											],
											[
												203055,
												203064
											],
											[
												203371,
												203380
											],
											[
												203430,
												203439
											],
											[
												203539,
												203548
											],
											[
												203846,
												203855
											],
											[
												203905,
												203914
											],
											[
												204227,
												204236
											],
											[
												204387,
												204396
											],
											[
												204627,
												204636
											],
											[
												204713,
												204722
											],
											[
												204992,
												205001
											],
											[
												205051,
												205060
											],
											[
												205441,
												205450
											],
											[
												205534,
												205543
											],
											[
												205799,
												205808
											],
											[
												205858,
												205867
											],
											[
												206111,
												206120
											],
											[
												206358,
												206367
											],
											[
												206417,
												206426
											],
											[
												206525,
												206534
											],
											[
												206880,
												206889
											],
											[
												206939,
												206948
											],
											[
												207248,
												207257
											],
											[
												207412,
												207421
											],
											[
												207684,
												207693
											],
											[
												207743,
												207752
											],
											[
												207833,
												207842
											],
											[
												207969,
												207978
											],
											[
												208032,
												208041
											],
											[
												208091,
												208100
											],
											[
												208177,
												208186
											],
											[
												208497,
												208506
											],
											[
												208628,
												208637
											],
											[
												208931,
												208940
											],
											[
												208990,
												208999
											],
											[
												209156,
												209165
											],
											[
												209417,
												209426
											],
											[
												209476,
												209485
											],
											[
												209642,
												209651
											],
											[
												209885,
												209894
											],
											[
												209944,
												209953
											],
											[
												210115,
												210124
											],
											[
												210373,
												210382
											],
											[
												210432,
												210441
											],
											[
												210518,
												210527
											],
											[
												210685,
												210694
											],
											[
												210816,
												210825
											],
											[
												211099,
												211108
											],
											[
												211158,
												211167
											],
											[
												211244,
												211253
											],
											[
												211491,
												211500
											],
											[
												211622,
												211631
											],
											[
												211903,
												211912
											],
											[
												211962,
												211971
											],
											[
												212051,
												212060
											],
											[
												212151,
												212160
											],
											[
												212296,
												212305
											],
											[
												212355,
												212364
											],
											[
												212590,
												212599
											],
											[
												212690,
												212699
											],
											[
												212833,
												212842
											],
											[
												212892,
												212901
											],
											[
												213030,
												213039
											],
											[
												213158,
												213167
											],
											[
												213258,
												213267
											],
											[
												213529,
												213538
											],
											[
												213624,
												213633
											],
											[
												213929,
												213938
											],
											[
												213992,
												214001
											],
											[
												214087,
												214096
											],
											[
												214391,
												214400
											],
											[
												214458,
												214467
											],
											[
												214557,
												214566
											],
											[
												214802,
												214811
											],
											[
												214897,
												214906
											],
											[
												215147,
												215156
											],
											[
												215246,
												215255
											],
											[
												215465,
												215474
											],
											[
												215567,
												215576
											],
											[
												215790,
												215799
											],
											[
												215863,
												215872
											],
											[
												216148,
												216157
											],
											[
												216212,
												216221
											],
											[
												216404,
												216413
											],
											[
												216437,
												216446
											],
											[
												216510,
												216519
											],
											[
												216587,
												216596
											],
											[
												216679,
												216688
											],
											[
												216718,
												216727
											],
											[
												216797,
												216806
											],
											[
												216880,
												216889
											],
											[
												216955,
												216964
											],
											[
												216985,
												216994
											],
											[
												217055,
												217064
											],
											[
												217129,
												217138
											],
											[
												217408,
												217417
											],
											[
												217495,
												217504
											],
											[
												217616,
												217625
											],
											[
												217670,
												217679
											],
											[
												217990,
												217999
											],
											[
												218078,
												218087
											],
											[
												218199,
												218208
											],
											[
												218253,
												218262
											],
											[
												218575,
												218584
											],
											[
												218661,
												218670
											],
											[
												218885,
												218894
											],
											[
												219250,
												219259
											],
											[
												219392,
												219401
											],
											[
												219576,
												219585
											],
											[
												219630,
												219639
											],
											[
												219949,
												219958
											],
											[
												220091,
												220100
											],
											[
												220275,
												220284
											],
											[
												220329,
												220338
											],
											[
												220651,
												220660
											],
											[
												220726,
												220735
											],
											[
												220753,
												220762
											],
											[
												220789,
												220798
											],
											[
												221078,
												221087
											],
											[
												221153,
												221162
											],
											[
												221207,
												221216
											],
											[
												221237,
												221246
											],
											[
												221281,
												221290
											],
											[
												221314,
												221323
											],
											[
												221354,
												221363
											],
											[
												221403,
												221412
											],
											[
												221436,
												221445
											],
											[
												221717,
												221726
											],
											[
												221851,
												221860
											],
											[
												221878,
												221887
											],
											[
												221914,
												221923
											],
											[
												222274,
												222283
											],
											[
												222368,
												222377
											],
											[
												222395,
												222404
											],
											[
												222470,
												222479
											],
											[
												222601,
												222610
											],
											[
												222694,
												222703
											],
											[
												222969,
												222978
											],
											[
												223006,
												223015
											],
											[
												223076,
												223085
											],
											[
												223138,
												223147
											],
											[
												223539,
												223548
											],
											[
												223576,
												223585
											],
											[
												223646,
												223655
											],
											[
												223708,
												223717
											],
											[
												223916,
												223925
											],
											[
												223986,
												223995
											],
											[
												224260,
												224269
											],
											[
												224330,
												224339
											],
											[
												224516,
												224525
											],
											[
												224594,
												224603
											],
											[
												224681,
												224690
											],
											[
												224946,
												224955
											],
											[
												224999,
												225008
											],
											[
												225053,
												225062
											],
											[
												225194,
												225203
											],
											[
												225221,
												225230
											],
											[
												225316,
												225325
											],
											[
												225370,
												225379
											],
											[
												225402,
												225411
											],
											[
												225456,
												225465
											],
											[
												225802,
												225811
											],
											[
												225907,
												225916
											],
											[
												226112,
												226121
											],
											[
												226229,
												226238
											],
											[
												226536,
												226545
											],
											[
												226611,
												226620
											],
											[
												226720,
												226729
											],
											[
												226756,
												226765
											],
											[
												226821,
												226830
											],
											[
												226848,
												226857
											],
											[
												227072,
												227081
											],
											[
												227233,
												227242
											],
											[
												227464,
												227473
											],
											[
												227546,
												227555
											],
											[
												227700,
												227709
											],
											[
												227765,
												227774
											],
											[
												227905,
												227914
											],
											[
												228192,
												228201
											],
											[
												228293,
												228302
											],
											[
												228466,
												228475
											],
											[
												228550,
												228559
											],
											[
												228690,
												228699
											],
											[
												228983,
												228992
											],
											[
												229088,
												229097
											],
											[
												229227,
												229236
											],
											[
												229315,
												229324
											],
											[
												229455,
												229464
											],
											[
												229524,
												229533
											],
											[
												229632,
												229641
											],
											[
												229799,
												229808
											],
											[
												229853,
												229862
											],
											[
												229870,
												229879
											],
											[
												229924,
												229933
											],
											[
												229946,
												229955
											],
											[
												230054,
												230063
											],
											[
												230155,
												230164
											],
											[
												230297,
												230306
											],
											[
												230365,
												230374
											],
											[
												230568,
												230577
											],
											[
												230632,
												230641
											],
											[
												230975,
												230984
											],
											[
												231129,
												231138
											],
											[
												231194,
												231203
											],
											[
												231301,
												231310
											],
											[
												231574,
												231583
											],
											[
												231866,
												231875
											],
											[
												232225,
												232234
											],
											[
												232307,
												232316
											],
											[
												232419,
												232428
											],
											[
												232618,
												232627
											],
											[
												232808,
												232817
											],
											[
												232926,
												232935
											],
											[
												233048,
												233057
											],
											[
												233369,
												233378
											],
											[
												233700,
												233709
											],
											[
												234054,
												234063
											],
											[
												234429,
												234438
											],
											[
												234814,
												234823
											],
											[
												234930,
												234939
											],
											[
												235040,
												235049
											],
											[
												235303,
												235312
											],
											[
												235419,
												235428
											],
											[
												235529,
												235538
											],
											[
												235741,
												235750
											],
											[
												235929,
												235938
											],
											[
												236131,
												236140
											],
											[
												236263,
												236272
											],
											[
												236345,
												236354
											],
											[
												236442,
												236451
											],
											[
												236490,
												236499
											],
											[
												236606,
												236615
											],
											[
												236633,
												236642
											],
											[
												236716,
												236725
											],
											[
												236822,
												236831
											],
											[
												236920,
												236929
											],
											[
												237037,
												237046
											],
											[
												237117,
												237126
											],
											[
												237229,
												237238
											],
											[
												237317,
												237326
											],
											[
												237394,
												237403
											],
											[
												237581,
												237590
											],
											[
												237789,
												237798
											],
											[
												237870,
												237879
											],
											[
												238140,
												238149
											],
											[
												238249,
												238258
											],
											[
												238337,
												238346
											],
											[
												238452,
												238461
											],
											[
												238639,
												238648
											],
											[
												238742,
												238751
											],
											[
												238816,
												238825
											],
											[
												239073,
												239082
											],
											[
												239143,
												239152
											],
											[
												239397,
												239406
											],
											[
												239479,
												239488
											],
											[
												239725,
												239734
											],
											[
												239816,
												239825
											],
											[
												239997,
												240006
											],
											[
												240048,
												240057
											],
											[
												240140,
												240149
											],
											[
												240291,
												240300
											],
											[
												240332,
												240341
											],
											[
												240424,
												240433
											],
											[
												240599,
												240608
											],
											[
												240930,
												240939
											],
											[
												241020,
												241029
											],
											[
												241108,
												241117
											],
											[
												241196,
												241205
											],
											[
												241223,
												241232
											],
											[
												241382,
												241391
											],
											[
												241503,
												241512
											],
											[
												241682,
												241691
											],
											[
												242067,
												242076
											],
											[
												242201,
												242210
											],
											[
												242303,
												242312
											],
											[
												242374,
												242383
											],
											[
												242480,
												242489
											],
											[
												242649,
												242658
											],
											[
												242796,
												242805
											],
											[
												242854,
												242863
											],
											[
												243156,
												243165
											],
											[
												243267,
												243276
											],
											[
												243675,
												243684
											],
											[
												243984,
												243993
											],
											[
												244450,
												244459
											],
											[
												244620,
												244629
											],
											[
												244777,
												244786
											],
											[
												244880,
												244889
											],
											[
												245164,
												245173
											],
											[
												245284,
												245293
											],
											[
												245531,
												245540
											],
											[
												245644,
												245653
											],
											[
												245992,
												246001
											],
											[
												246299,
												246308
											],
											[
												246448,
												246457
											],
											[
												246729,
												246738
											],
											[
												246841,
												246850
											],
											[
												247163,
												247172
											],
											[
												247595,
												247604
											],
											[
												247771,
												247780
											],
											[
												247864,
												247873
											],
											[
												248323,
												248332
											],
											[
												248521,
												248530
											],
											[
												248752,
												248761
											],
											[
												249206,
												249215
											],
											[
												249680,
												249689
											],
											[
												249798,
												249807
											],
											[
												249808,
												249817
											],
											[
												249907,
												249916
											],
											[
												249923,
												249932
											],
											[
												249960,
												249969
											],
											[
												250048,
												250057
											],
											[
												250108,
												250117
											],
											[
												250135,
												250144
											],
											[
												250472,
												250481
											],
											[
												250563,
												250572
											],
											[
												250890,
												250899
											],
											[
												251306,
												251315
											],
											[
												251374,
												251383
											],
											[
												251619,
												251628
											],
											[
												251734,
												251743
											],
											[
												252075,
												252084
											],
											[
												252480,
												252489
											],
											[
												252507,
												252516
											],
											[
												252747,
												252756
											],
											[
												252959,
												252968
											],
											[
												253111,
												253120
											],
											[
												253312,
												253321
											],
											[
												253457,
												253466
											],
											[
												253668,
												253677
											],
											[
												253831,
												253840
											],
											[
												254032,
												254041
											],
											[
												254188,
												254197
											],
											[
												254456,
												254465
											],
											[
												254472,
												254481
											],
											[
												254510,
												254519
											],
											[
												254557,
												254566
											],
											[
												254693,
												254702
											],
											[
												254836,
												254845
											],
											[
												254905,
												254914
											],
											[
												255052,
												255061
											],
											[
												255212,
												255221
											],
											[
												255390,
												255399
											],
											[
												255626,
												255635
											],
											[
												255677,
												255686
											],
											[
												255698,
												255707
											],
											[
												255955,
												255964
											],
											[
												256092,
												256101
											],
											[
												256214,
												256223
											],
											[
												256261,
												256270
											],
											[
												256406,
												256415
											],
											[
												256541,
												256550
											],
											[
												256645,
												256654
											],
											[
												256700,
												256709
											],
											[
												256832,
												256841
											],
											[
												256908,
												256917
											],
											[
												257335,
												257344
											],
											[
												257433,
												257442
											],
											[
												257700,
												257709
											],
											[
												257840,
												257849
											],
											[
												258007,
												258016
											],
											[
												258393,
												258402
											],
											[
												258506,
												258515
											],
											[
												258602,
												258611
											],
											[
												258695,
												258704
											],
											[
												258801,
												258810
											],
											[
												258880,
												258889
											],
											[
												258976,
												258985
											],
											[
												259452,
												259461
											],
											[
												259511,
												259520
											],
											[
												259588,
												259597
											],
											[
												259803,
												259812
											],
											[
												259861,
												259870
											],
											[
												259937,
												259946
											],
											[
												260041,
												260050
											],
											[
												260162,
												260171
											],
											[
												260540,
												260549
											],
											[
												260942,
												260951
											],
											[
												260969,
												260978
											],
											[
												260980,
												260989
											],
											[
												261023,
												261032
											],
											[
												261388,
												261397
											],
											[
												261415,
												261424
											],
											[
												261426,
												261435
											],
											[
												261518,
												261527
											],
											[
												261562,
												261571
											],
											[
												261902,
												261911
											],
											[
												261979,
												261988
											],
											[
												262171,
												262180
											],
											[
												262280,
												262289
											],
											[
												262413,
												262422
											],
											[
												262441,
												262450
											],
											[
												262587,
												262596
											],
											[
												262702,
												262711
											],
											[
												262862,
												262871
											],
											[
												262977,
												262986
											],
											[
												263021,
												263030
											],
											[
												263110,
												263119
											],
											[
												263410,
												263419
											],
											[
												263525,
												263534
											],
											[
												263685,
												263694
											],
											[
												263800,
												263809
											],
											[
												263844,
												263853
											],
											[
												264192,
												264201
											],
											[
												264414,
												264423
											],
											[
												264501,
												264510
											],
											[
												264786,
												264795
											],
											[
												264845,
												264854
											],
											[
												264885,
												264894
											],
											[
												265001,
												265010
											],
											[
												265106,
												265115
											],
											[
												265427,
												265436
											],
											[
												265454,
												265463
											],
											[
												265897,
												265906
											],
											[
												266089,
												266098
											],
											[
												266224,
												266233
											],
											[
												266259,
												266268
											],
											[
												266506,
												266515
											],
											[
												266653,
												266662
											],
											[
												266729,
												266738
											],
											[
												266825,
												266834
											],
											[
												266974,
												266983
											],
											[
												267048,
												267057
											],
											[
												267140,
												267149
											],
											[
												267413,
												267422
											],
											[
												267519,
												267528
											],
											[
												267669,
												267678
											],
											[
												267828,
												267837
											],
											[
												267923,
												267932
											],
											[
												268026,
												268035
											],
											[
												268149,
												268158
											],
											[
												268256,
												268265
											],
											[
												268377,
												268386
											],
											[
												268783,
												268792
											],
											[
												268874,
												268883
											],
											[
												268969,
												268978
											],
											[
												269105,
												269114
											],
											[
												269511,
												269520
											],
											[
												269685,
												269694
											],
											[
												269832,
												269841
											],
											[
												269939,
												269948
											],
											[
												269984,
												269993
											],
											[
												270326,
												270335
											],
											[
												270500,
												270509
											],
											[
												270643,
												270652
											],
											[
												271015,
												271024
											],
											[
												271098,
												271107
											],
											[
												271492,
												271501
											],
											[
												271702,
												271711
											],
											[
												271813,
												271822
											],
											[
												271856,
												271865
											],
											[
												272162,
												272171
											],
											[
												272343,
												272352
											],
											[
												272684,
												272693
											],
											[
												272711,
												272720
											],
											[
												272741,
												272750
											],
											[
												273128,
												273137
											],
											[
												273225,
												273234
											],
											[
												273349,
												273358
											],
											[
												273486,
												273495
											],
											[
												273613,
												273622
											],
											[
												273721,
												273730
											],
											[
												273846,
												273855
											],
											[
												273975,
												273984
											],
											[
												274100,
												274109
											],
											[
												274246,
												274255
											],
											[
												274439,
												274448
											],
											[
												274644,
												274653
											],
											[
												274818,
												274827
											],
											[
												275001,
												275010
											],
											[
												275198,
												275207
											],
											[
												275325,
												275334
											],
											[
												275459,
												275468
											],
											[
												275582,
												275591
											],
											[
												275906,
												275915
											],
											[
												276090,
												276099
											],
											[
												276371,
												276380
											],
											[
												276479,
												276488
											],
											[
												276625,
												276634
											],
											[
												276658,
												276667
											],
											[
												276728,
												276737
											],
											[
												276908,
												276917
											],
											[
												276941,
												276950
											],
											[
												276994,
												277003
											],
											[
												277098,
												277107
											],
											[
												277147,
												277156
											],
											[
												277235,
												277244
											],
											[
												277464,
												277473
											],
											[
												277497,
												277506
											],
											[
												277550,
												277559
											],
											[
												277654,
												277663
											],
											[
												277703,
												277712
											],
											[
												277791,
												277800
											],
											[
												277970,
												277979
											],
											[
												278003,
												278012
											],
											[
												278056,
												278065
											],
											[
												278160,
												278169
											],
											[
												278209,
												278218
											],
											[
												278298,
												278307
											],
											[
												278416,
												278425
											],
											[
												278449,
												278458
											],
											[
												278502,
												278511
											],
											[
												278606,
												278615
											],
											[
												278655,
												278664
											],
											[
												278735,
												278744
											],
											[
												278829,
												278838
											],
											[
												278870,
												278879
											],
											[
												278903,
												278912
											],
											[
												278956,
												278965
											],
											[
												279179,
												279188
											],
											[
												279212,
												279221
											],
											[
												279265,
												279274
											],
											[
												279375,
												279384
											],
											[
												279589,
												279598
											],
											[
												279634,
												279643
											],
											[
												279940,
												279949
											],
											[
												280042,
												280051
											],
											[
												280147,
												280156
											],
											[
												280184,
												280193
											],
											[
												280445,
												280454
											],
											[
												280482,
												280491
											],
											[
												280754,
												280763
											],
											[
												280791,
												280800
											],
											[
												281054,
												281063
											],
											[
												281091,
												281100
											],
											[
												281349,
												281358
											],
											[
												281386,
												281395
											],
											[
												281829,
												281838
											],
											[
												282043,
												282052
											],
											[
												282284,
												282293
											],
											[
												282306,
												282315
											],
											[
												282450,
												282459
											],
											[
												282698,
												282707
											],
											[
												282901,
												282910
											],
											[
												283105,
												283114
											],
											[
												283356,
												283365
											],
											[
												283378,
												283387
											],
											[
												283861,
												283870
											],
											[
												284136,
												284145
											],
											[
												284348,
												284357
											],
											[
												284673,
												284682
											],
											[
												284750,
												284759
											],
											[
												284994,
												285003
											],
											[
												285030,
												285039
											],
											[
												285050,
												285059
											],
											[
												285084,
												285093
											],
											[
												285135,
												285144
											],
											[
												285160,
												285169
											],
											[
												285247,
												285256
											],
											[
												285283,
												285292
											],
											[
												285303,
												285312
											],
											[
												285337,
												285346
											],
											[
												285396,
												285405
											],
											[
												285421,
												285430
											],
											[
												285509,
												285518
											],
											[
												285545,
												285554
											],
											[
												285565,
												285574
											],
											[
												285599,
												285608
											],
											[
												285659,
												285668
											],
											[
												285684,
												285693
											],
											[
												285938,
												285947
											],
											[
												286108,
												286117
											],
											[
												286592,
												286601
											],
											[
												286799,
												286808
											],
											[
												286848,
												286857
											],
											[
												287071,
												287080
											],
											[
												287103,
												287112
											],
											[
												287219,
												287228
											],
											[
												287604,
												287613
											],
											[
												287710,
												287719
											],
											[
												288171,
												288180
											],
											[
												288469,
												288478
											],
											[
												288721,
												288730
											],
											[
												289092,
												289101
											],
											[
												289133,
												289142
											],
											[
												289173,
												289182
											],
											[
												289214,
												289223
											],
											[
												289360,
												289369
											],
											[
												289540,
												289549
											],
											[
												289619,
												289628
											],
											[
												289710,
												289719
											],
											[
												290038,
												290047
											],
											[
												290452,
												290461
											],
											[
												290922,
												290931
											],
											[
												291329,
												291338
											],
											[
												291705,
												291714
											],
											[
												292087,
												292096
											],
											[
												292422,
												292431
											],
											[
												292795,
												292804
											],
											[
												293178,
												293187
											],
											[
												293378,
												293387
											],
											[
												293441,
												293450
											],
											[
												293662,
												293671
											],
											[
												293831,
												293840
											],
											[
												294235,
												294244
											],
											[
												294711,
												294720
											],
											[
												295136,
												295145
											],
											[
												295332,
												295341
											],
											[
												295395,
												295404
											],
											[
												295616,
												295625
											],
											[
												295785,
												295794
											],
											[
												296105,
												296114
											],
											[
												296398,
												296407
											],
											[
												296486,
												296495
											],
											[
												296573,
												296582
											],
											[
												296787,
												296796
											],
											[
												297041,
												297050
											],
											[
												297420,
												297429
											],
											[
												297713,
												297722
											],
											[
												297801,
												297810
											],
											[
												297888,
												297897
											],
											[
												298102,
												298111
											],
											[
												298356,
												298365
											],
											[
												298745,
												298754
											],
											[
												299038,
												299047
											],
											[
												299126,
												299135
											],
											[
												299213,
												299222
											],
											[
												299427,
												299436
											],
											[
												299681,
												299690
											],
											[
												300052,
												300061
											],
											[
												300345,
												300354
											],
											[
												300433,
												300442
											],
											[
												300520,
												300529
											],
											[
												300734,
												300743
											],
											[
												300988,
												300997
											],
											[
												301404,
												301413
											],
											[
												301660,
												301669
											],
											[
												301748,
												301757
											],
											[
												302025,
												302034
											],
											[
												302318,
												302327
											],
											[
												302406,
												302415
											],
											[
												302681,
												302690
											],
											[
												302974,
												302983
											],
											[
												303062,
												303071
											],
											[
												303392,
												303401
											],
											[
												303648,
												303657
											],
											[
												303736,
												303745
											],
											[
												304113,
												304122
											],
											[
												304406,
												304415
											],
											[
												304494,
												304503
											],
											[
												304581,
												304590
											],
											[
												304795,
												304804
											],
											[
												305049,
												305058
											],
											[
												305503,
												305512
											],
											[
												305622,
												305631
											],
											[
												306045,
												306054
											],
											[
												306509,
												306518
											],
											[
												307018,
												307027
											],
											[
												307377,
												307386
											],
											[
												307746,
												307755
											],
											[
												308131,
												308140
											],
											[
												308492,
												308501
											],
											[
												308691,
												308700
											],
											[
												309055,
												309064
											],
											[
												309280,
												309289
											],
											[
												309647,
												309656
											],
											[
												310027,
												310036
											],
											[
												310383,
												310392
											],
											[
												310610,
												310619
											],
											[
												310975,
												310984
											],
											[
												311201,
												311210
											],
											[
												311554,
												311563
											],
											[
												311923,
												311932
											],
											[
												312134,
												312143
											],
											[
												312435,
												312444
											],
											[
												312462,
												312471
											],
											[
												312782,
												312791
											],
											[
												313144,
												313153
											],
											[
												313633,
												313642
											],
											[
												314049,
												314058
											],
											[
												314540,
												314549
											],
											[
												314869,
												314878
											],
											[
												314965,
												314974
											],
											[
												315314,
												315323
											],
											[
												315681,
												315690
											],
											[
												316009,
												316018
											],
											[
												316528,
												316537
											],
											[
												316634,
												316643
											],
											[
												316984,
												316993
											],
											[
												317064,
												317073
											],
											[
												317213,
												317222
											],
											[
												317649,
												317658
											],
											[
												317868,
												317877
											],
											[
												318349,
												318358
											],
											[
												318726,
												318735
											],
											[
												318780,
												318789
											],
											[
												318823,
												318832
											],
											[
												319240,
												319249
											],
											[
												319372,
												319381
											],
											[
												319440,
												319449
											],
											[
												319669,
												319678
											],
											[
												319849,
												319858
											],
											[
												319997,
												320006
											],
											[
												320420,
												320429
											],
											[
												320876,
												320885
											],
											[
												321246,
												321255
											],
											[
												321778,
												321787
											],
											[
												322071,
												322080
											],
											[
												322153,
												322162
											],
											[
												322427,
												322436
											],
											[
												322844,
												322853
											],
											[
												323052,
												323061
											],
											[
												323377,
												323386
											],
											[
												323412,
												323421
											],
											[
												323684,
												323693
											],
											[
												323958,
												323967
											],
											[
												324330,
												324339
											],
											[
												324377,
												324386
											],
											[
												324682,
												324691
											],
											[
												325008,
												325017
											],
											[
												325132,
												325141
											],
											[
												325281,
												325290
											],
											[
												325490,
												325499
											],
											[
												325728,
												325737
											],
											[
												325888,
												325897
											],
											[
												325904,
												325913
											],
											[
												326081,
												326090
											],
											[
												326214,
												326223
											],
											[
												326295,
												326304
											],
											[
												326337,
												326346
											],
											[
												326503,
												326512
											],
											[
												326646,
												326655
											],
											[
												326816,
												326825
											],
											[
												326915,
												326924
											],
											[
												326962,
												326971
											],
											[
												327050,
												327059
											],
											[
												327092,
												327101
											],
											[
												327134,
												327143
											],
											[
												327304,
												327313
											],
											[
												327389,
												327398
											],
											[
												327545,
												327554
											],
											[
												327689,
												327698
											],
											[
												327704,
												327713
											],
											[
												327757,
												327766
											],
											[
												327803,
												327812
											],
											[
												327976,
												327985
											],
											[
												328001,
												328010
											],
											[
												328191,
												328200
											],
											[
												328287,
												328296
											],
											[
												328427,
												328436
											],
											[
												328604,
												328613
											],
											[
												328638,
												328647
											],
											[
												328656,
												328665
											],
											[
												328744,
												328753
											],
											[
												328816,
												328825
											],
											[
												328841,
												328850
											],
											[
												328882,
												328891
											],
											[
												328898,
												328907
											],
											[
												328982,
												328991
											],
											[
												329081,
												329090
											],
											[
												329465,
												329474
											],
											[
												329916,
												329925
											],
											[
												330349,
												330358
											],
											[
												330799,
												330808
											],
											[
												331011,
												331020
											],
											[
												331262,
												331271
											],
											[
												331459,
												331468
											],
											[
												331801,
												331810
											],
											[
												332051,
												332060
											],
											[
												332389,
												332398
											],
											[
												332600,
												332609
											],
											[
												332842,
												332851
											],
											[
												333147,
												333156
											],
											[
												333198,
												333207
											],
											[
												333266,
												333275
											],
											[
												333286,
												333295
											],
											[
												333405,
												333414
											],
											[
												333456,
												333465
											],
											[
												333612,
												333621
											],
											[
												333635,
												333644
											],
											[
												333755,
												333764
											],
											[
												333806,
												333815
											],
											[
												333865,
												333874
											],
											[
												333879,
												333888
											],
											[
												334289,
												334298
											],
											[
												334568,
												334577
											],
											[
												334668,
												334677
											],
											[
												334862,
												334871
											],
											[
												334897,
												334906
											],
											[
												334964,
												334973
											],
											[
												335066,
												335075
											],
											[
												335101,
												335110
											],
											[
												335178,
												335187
											],
											[
												335392,
												335401
											],
											[
												335435,
												335444
											],
											[
												335494,
												335503
											],
											[
												335532,
												335541
											],
											[
												335642,
												335651
											],
											[
												335685,
												335694
											],
											[
												335754,
												335763
											],
											[
												335792,
												335801
											],
											[
												335996,
												336005
											],
											[
												336031,
												336040
											],
											[
												336216,
												336225
											],
											[
												336305,
												336314
											],
											[
												336327,
												336336
											],
											[
												336520,
												336529
											],
											[
												336617,
												336626
											],
											[
												336639,
												336648
											],
											[
												336733,
												336742
											],
											[
												336776,
												336785
											],
											[
												336945,
												336954
											],
											[
												336980,
												336989
											],
											[
												337207,
												337216
											],
											[
												337242,
												337251
											],
											[
												337405,
												337414
											],
											[
												337483,
												337492
											],
											[
												337505,
												337514
											],
											[
												337676,
												337685
											],
											[
												337762,
												337771
											],
											[
												337784,
												337793
											],
											[
												337866,
												337875
											],
											[
												337909,
												337918
											],
											[
												338149,
												338158
											],
											[
												338269,
												338278
											],
											[
												338542,
												338551
											],
											[
												338816,
												338825
											],
											[
												338844,
												338853
											],
											[
												339137,
												339146
											],
											[
												339161,
												339170
											],
											[
												339390,
												339399
											],
											[
												339442,
												339451
											],
											[
												339640,
												339649
											],
											[
												339690,
												339699
											],
											[
												339802,
												339811
											],
											[
												339949,
												339958
											],
											[
												340016,
												340025
											],
											[
												340394,
												340403
											],
											[
												340639,
												340648
											],
											[
												340725,
												340734
											],
											[
												340777,
												340786
											],
											[
												340871,
												340880
											],
											[
												340969,
												340978
											],
											[
												341062,
												341071
											],
											[
												341183,
												341192
											],
											[
												341273,
												341282
											],
											[
												341365,
												341374
											],
											[
												341522,
												341531
											],
											[
												341606,
												341615
											],
											[
												341684,
												341693
											],
											[
												341789,
												341798
											],
											[
												341872,
												341881
											],
											[
												341975,
												341984
											],
											[
												342059,
												342068
											],
											[
												342159,
												342168
											],
											[
												342203,
												342212
											],
											[
												342275,
												342284
											],
											[
												342311,
												342320
											],
											[
												342376,
												342385
											],
											[
												342428,
												342437
											],
											[
												342492,
												342501
											],
											[
												342543,
												342552
											],
											[
												342611,
												342620
											],
											[
												342717,
												342726
											],
											[
												342798,
												342807
											],
											[
												342872,
												342881
											],
											[
												342948,
												342957
											],
											[
												343050,
												343059
											],
											[
												343124,
												343133
											],
											[
												343215,
												343224
											],
											[
												343588,
												343597
											],
											[
												343907,
												343916
											],
											[
												343963,
												343972
											],
											[
												344023,
												344032
											],
											[
												344204,
												344213
											],
											[
												344214,
												344223
											],
											[
												344302,
												344311
											],
											[
												344343,
												344352
											],
											[
												344386,
												344395
											],
											[
												344573,
												344582
											],
											[
												344583,
												344592
											],
											[
												344656,
												344665
											],
											[
												344697,
												344706
											],
											[
												344740,
												344749
											],
											[
												344869,
												344878
											],
											[
												344879,
												344888
											],
											[
												344936,
												344945
											],
											[
												345040,
												345049
											],
											[
												345083,
												345092
											],
											[
												345216,
												345225
											],
											[
												345226,
												345235
											],
											[
												345287,
												345296
											],
											[
												345410,
												345419
											],
											[
												345453,
												345462
											],
											[
												345668,
												345677
											],
											[
												345687,
												345696
											],
											[
												345697,
												345706
											],
											[
												345750,
												345759
											],
											[
												345806,
												345815
											],
											[
												345840,
												345849
											],
											[
												345993,
												346002
											],
											[
												346003,
												346012
											],
											[
												346061,
												346070
											],
											[
												346117,
												346126
											],
											[
												346156,
												346165
											],
											[
												346286,
												346295
											],
											[
												346296,
												346305
											],
											[
												346342,
												346351
											],
											[
												346383,
												346392
											],
											[
												346493,
												346502
											],
											[
												346653,
												346662
											],
											[
												346810,
												346819
											],
											[
												346824,
												346833
											],
											[
												346840,
												346849
											],
											[
												346879,
												346888
											],
											[
												346924,
												346933
											],
											[
												347015,
												347024
											],
											[
												347041,
												347050
											],
											[
												347115,
												347124
											],
											[
												347517,
												347526
											],
											[
												347576,
												347585
											],
											[
												347744,
												347753
											],
											[
												347754,
												347763
											],
											[
												347800,
												347809
											],
											[
												347841,
												347850
											],
											[
												347862,
												347871
											],
											[
												347883,
												347892
											],
											[
												347916,
												347925
											],
											[
												347962,
												347971
											],
											[
												347994,
												348003
											],
											[
												348016,
												348025
											],
											[
												348099,
												348108
											],
											[
												348258,
												348267
											],
											[
												348268,
												348277
											],
											[
												348314,
												348323
											],
											[
												348355,
												348364
											],
											[
												348469,
												348478
											],
											[
												348490,
												348499
											],
											[
												348528,
												348537
											],
											[
												348601,
												348610
											],
											[
												348644,
												348653
											],
											[
												348666,
												348675
											],
											[
												348712,
												348721
											],
											[
												348743,
												348752
											],
											[
												348809,
												348818
											],
											[
												348851,
												348860
											],
											[
												349025,
												349034
											],
											[
												349051,
												349060
											],
											[
												349067,
												349076
											],
											[
												349118,
												349127
											],
											[
												349175,
												349184
											],
											[
												349225,
												349234
											],
											[
												349251,
												349260
											],
											[
												349372,
												349381
											],
											[
												349410,
												349419
											],
											[
												349497,
												349506
											],
											[
												349717,
												349726
											],
											[
												349754,
												349763
											],
											[
												349815,
												349824
											],
											[
												349848,
												349857
											],
											[
												349921,
												349930
											],
											[
												349968,
												349977
											],
											[
												349994,
												350003
											],
											[
												350056,
												350065
											],
											[
												350095,
												350104
											],
											[
												350291,
												350300
											],
											[
												350305,
												350314
											],
											[
												350321,
												350330
											],
											[
												350360,
												350369
											],
											[
												350405,
												350414
											],
											[
												350496,
												350505
											],
											[
												350522,
												350531
											],
											[
												350609,
												350618
											],
											[
												350813,
												350822
											],
											[
												350838,
												350847
											],
											[
												350887,
												350896
											],
											[
												350908,
												350917
											],
											[
												350969,
												350978
											],
											[
												351016,
												351025
											],
											[
												351042,
												351051
											],
											[
												351096,
												351105
											],
											[
												351508,
												351517
											],
											[
												351586,
												351595
											],
											[
												351785,
												351794
											],
											[
												351795,
												351804
											],
											[
												351841,
												351850
											],
											[
												351882,
												351891
											],
											[
												352054,
												352063
											],
											[
												352194,
												352203
											],
											[
												352215,
												352224
											],
											[
												352260,
												352269
											],
											[
												352333,
												352342
											],
											[
												352459,
												352468
											],
											[
												352481,
												352490
											],
											[
												352515,
												352524
											],
											[
												352537,
												352546
											],
											[
												352583,
												352592
											],
											[
												352614,
												352623
											],
											[
												352680,
												352689
											],
											[
												352722,
												352731
											],
											[
												352791,
												352800
											],
											[
												352902,
												352911
											],
											[
												353038,
												353047
											],
											[
												353201,
												353210
											],
											[
												353292,
												353301
											],
											[
												353382,
												353391
											],
											[
												353492,
												353501
											],
											[
												353608,
												353617
											],
											[
												353699,
												353708
											],
											[
												353779,
												353788
											],
											[
												353853,
												353862
											],
											[
												354185,
												354194
											],
											[
												354258,
												354267
											],
											[
												354402,
												354411
											],
											[
												354561,
												354570
											],
											[
												354634,
												354643
											],
											[
												354779,
												354788
											],
											[
												354910,
												354919
											],
											[
												355147,
												355156
											],
											[
												355489,
												355498
											],
											[
												355782,
												355791
											],
											[
												356025,
												356034
											],
											[
												356044,
												356053
											],
											[
												356414,
												356423
											],
											[
												356644,
												356653
											],
											[
												356899,
												356908
											],
											[
												356988,
												356997
											],
											[
												357062,
												357071
											],
											[
												357295,
												357304
											],
											[
												357387,
												357396
											],
											[
												357461,
												357470
											],
											[
												357792,
												357801
											],
											[
												357942,
												357951
											],
											[
												358139,
												358148
											],
											[
												358406,
												358415
											],
											[
												358491,
												358500
											],
											[
												358791,
												358800
											],
											[
												358926,
												358935
											],
											[
												359111,
												359120
											],
											[
												359603,
												359612
											],
											[
												360002,
												360011
											],
											[
												360238,
												360247
											],
											[
												360599,
												360608
											],
											[
												360925,
												360934
											],
											[
												361276,
												361285
											],
											[
												361592,
												361601
											],
											[
												361921,
												361930
											],
											[
												362056,
												362065
											],
											[
												362299,
												362308
											],
											[
												362622,
												362631
											],
											[
												363037,
												363046
											],
											[
												363377,
												363386
											],
											[
												363684,
												363693
											],
											[
												364020,
												364029
											],
											[
												364464,
												364473
											],
											[
												364728,
												364737
											],
											[
												365015,
												365024
											],
											[
												365302,
												365311
											],
											[
												365628,
												365637
											],
											[
												365967,
												365976
											],
											[
												366139,
												366148
											],
											[
												366388,
												366397
											],
											[
												366544,
												366553
											],
											[
												366579,
												366588
											],
											[
												366696,
												366705
											],
											[
												366874,
												366883
											],
											[
												366990,
												366999
											],
											[
												367211,
												367220
											],
											[
												367674,
												367683
											],
											[
												367991,
												368000
											],
											[
												368403,
												368412
											],
											[
												368821,
												368830
											],
											[
												369115,
												369124
											],
											[
												369476,
												369485
											],
											[
												369679,
												369688
											],
											[
												369783,
												369792
											],
											[
												369913,
												369922
											],
											[
												369947,
												369956
											],
											[
												370077,
												370086
											],
											[
												370099,
												370108
											],
											[
												370481,
												370490
											],
											[
												370724,
												370733
											],
											[
												370780,
												370789
											],
											[
												370895,
												370904
											],
											[
												371027,
												371036
											],
											[
												371162,
												371171
											],
											[
												371191,
												371200
											],
											[
												371306,
												371315
											],
											[
												371362,
												371371
											],
											[
												371376,
												371385
											],
											[
												371486,
												371495
											],
											[
												371542,
												371551
											],
											[
												371756,
												371765
											],
											[
												371874,
												371883
											],
											[
												371927,
												371936
											],
											[
												372232,
												372241
											],
											[
												372509,
												372518
											],
											[
												372766,
												372775
											],
											[
												372813,
												372822
											],
											[
												373037,
												373046
											],
											[
												373130,
												373139
											],
											[
												373216,
												373225
											],
											[
												373260,
												373269
											],
											[
												373619,
												373628
											],
											[
												373879,
												373888
											],
											[
												374157,
												374166
											],
											[
												374438,
												374447
											],
											[
												374645,
												374654
											],
											[
												374737,
												374746
											],
											[
												374846,
												374855
											],
											[
												375106,
												375115
											],
											[
												375198,
												375207
											],
											[
												375531,
												375540
											],
											[
												375575,
												375584
											],
											[
												375611,
												375620
											],
											[
												375767,
												375776
											],
											[
												376053,
												376062
											],
											[
												376185,
												376194
											],
											[
												376260,
												376269
											],
											[
												376519,
												376528
											],
											[
												376697,
												376706
											],
											[
												376887,
												376896
											],
											[
												377047,
												377056
											],
											[
												377301,
												377310
											],
											[
												377392,
												377401
											],
											[
												377810,
												377819
											],
											[
												378202,
												378211
											],
											[
												378295,
												378304
											],
											[
												378627,
												378636
											],
											[
												378697,
												378706
											],
											[
												378920,
												378929
											],
											[
												379139,
												379148
											],
											[
												379354,
												379363
											],
											[
												379573,
												379582
											],
											[
												379792,
												379801
											],
											[
												380007,
												380016
											],
											[
												380232,
												380241
											],
											[
												380505,
												380514
											],
											[
												380669,
												380678
											],
											[
												380703,
												380712
											],
											[
												380738,
												380747
											],
											[
												380924,
												380933
											],
											[
												381107,
												381116
											],
											[
												381287,
												381296
											],
											[
												381468,
												381477
											],
											[
												381651,
												381660
											],
											[
												381831,
												381840
											],
											[
												382016,
												382025
											],
											[
												382287,
												382296
											],
											[
												382538,
												382547
											],
											[
												382978,
												382987
											],
											[
												383490,
												383499
											],
											[
												383666,
												383675
											],
											[
												384040,
												384049
											],
											[
												384299,
												384308
											],
											[
												384425,
												384434
											],
											[
												384608,
												384617
											],
											[
												384772,
												384781
											],
											[
												385242,
												385251
											],
											[
												385751,
												385760
											],
											[
												385885,
												385894
											],
											[
												386008,
												386017
											],
											[
												386379,
												386388
											],
											[
												386999,
												387008
											],
											[
												387503,
												387512
											],
											[
												387648,
												387657
											],
											[
												387965,
												387974
											],
											[
												388027,
												388036
											],
											[
												388096,
												388105
											],
											[
												388533,
												388542
											],
											[
												388622,
												388631
											],
											[
												388794,
												388803
											],
											[
												388954,
												388963
											],
											[
												389189,
												389198
											],
											[
												389673,
												389682
											],
											[
												390193,
												390202
											],
											[
												390567,
												390576
											],
											[
												390861,
												390870
											],
											[
												390923,
												390932
											],
											[
												391302,
												391311
											],
											[
												391545,
												391554
											],
											[
												392009,
												392018
											],
											[
												392095,
												392104
											],
											[
												392392,
												392401
											],
											[
												392451,
												392460
											],
											[
												392569,
												392578
											],
											[
												392859,
												392868
											],
											[
												392877,
												392886
											],
											[
												393021,
												393030
											],
											[
												393164,
												393173
											],
											[
												393182,
												393191
											],
											[
												393631,
												393640
											],
											[
												393717,
												393726
											],
											[
												393995,
												394004
											],
											[
												394076,
												394085
											],
											[
												394126,
												394135
											],
											[
												394214,
												394223
											],
											[
												394318,
												394327
											],
											[
												394477,
												394486
											],
											[
												394535,
												394544
											],
											[
												394819,
												394828
											],
											[
												394837,
												394846
											],
											[
												395254,
												395263
											],
											[
												395405,
												395414
											],
											[
												395488,
												395497
											],
											[
												395569,
												395578
											],
											[
												395662,
												395671
											],
											[
												395745,
												395754
											],
											[
												395832,
												395841
											],
											[
												395930,
												395939
											],
											[
												396384,
												396393
											],
											[
												396496,
												396505
											],
											[
												396705,
												396714
											],
											[
												396792,
												396801
											],
											[
												397229,
												397238
											],
											[
												397431,
												397440
											],
											[
												397533,
												397542
											],
											[
												397628,
												397637
											],
											[
												397739,
												397748
											],
											[
												398167,
												398176
											],
											[
												398253,
												398262
											],
											[
												398492,
												398501
											],
											[
												398571,
												398580
											],
											[
												398628,
												398637
											],
											[
												398716,
												398725
											],
											[
												398773,
												398782
											],
											[
												398861,
												398870
											],
											[
												398918,
												398927
											],
											[
												399006,
												399015
											],
											[
												399122,
												399131
											],
											[
												399253,
												399262
											],
											[
												399363,
												399372
											],
											[
												399488,
												399497
											],
											[
												399549,
												399558
											],
											[
												399642,
												399651
											],
											[
												399703,
												399712
											],
											[
												399796,
												399805
											],
											[
												399857,
												399866
											],
											[
												399992,
												400001
											],
											[
												400045,
												400054
											],
											[
												400107,
												400116
											],
											[
												400188,
												400197
											],
											[
												400303,
												400312
											],
											[
												400399,
												400408
											],
											[
												400419,
												400428
											],
											[
												400699,
												400708
											],
											[
												400863,
												400872
											],
											[
												400894,
												400903
											],
											[
												401138,
												401147
											],
											[
												401262,
												401271
											],
											[
												401412,
												401421
											],
											[
												401462,
												401471
											],
											[
												401502,
												401511
											],
											[
												401554,
												401563
											],
											[
												401589,
												401598
											],
											[
												401633,
												401642
											],
											[
												401667,
												401676
											],
											[
												401698,
												401707
											],
											[
												401868,
												401877
											],
											[
												401902,
												401911
											],
											[
												401949,
												401958
											],
											[
												402127,
												402136
											],
											[
												402158,
												402167
											],
											[
												402225,
												402234
											],
											[
												402256,
												402265
											],
											[
												402295,
												402304
											],
											[
												402318,
												402327
											],
											[
												402389,
												402398
											],
											[
												402409,
												402418
											],
											[
												402429,
												402438
											],
											[
												402477,
												402486
											],
											[
												402492,
												402501
											],
											[
												402747,
												402756
											],
											[
												402981,
												402990
											],
											[
												403473,
												403482
											],
											[
												403987,
												403996
											],
											[
												404543,
												404552
											],
											[
												405083,
												405092
											],
											[
												405559,
												405568
											],
											[
												406042,
												406051
											],
											[
												406579,
												406588
											],
											[
												406983,
												406992
											],
											[
												407031,
												407040
											],
											[
												407506,
												407515
											],
											[
												407580,
												407589
											],
											[
												407874,
												407883
											],
											[
												407890,
												407899
											],
											[
												408245,
												408254
											],
											[
												408646,
												408655
											],
											[
												408673,
												408682
											],
											[
												408878,
												408887
											],
											[
												409124,
												409133
											],
											[
												409334,
												409343
											],
											[
												409793,
												409802
											],
											[
												410262,
												410271
											],
											[
												410587,
												410596
											],
											[
												410870,
												410879
											],
											[
												410974,
												410983
											],
											[
												411373,
												411382
											],
											[
												411765,
												411774
											],
											[
												412153,
												412162
											],
											[
												412500,
												412509
											],
											[
												413004,
												413013
											],
											[
												413092,
												413101
											],
											[
												413103,
												413112
											],
											[
												413583,
												413592
											],
											[
												413641,
												413650
											],
											[
												413806,
												413815
											],
											[
												413820,
												413829
											],
											[
												413836,
												413845
											],
											[
												413978,
												413987
											],
											[
												414081,
												414090
											],
											[
												414293,
												414302
											],
											[
												414442,
												414451
											],
											[
												414492,
												414501
											],
											[
												414523,
												414532
											],
											[
												414622,
												414631
											],
											[
												414676,
												414685
											],
											[
												414837,
												414846
											],
											[
												414851,
												414860
											],
											[
												414947,
												414956
											],
											[
												415116,
												415125
											],
											[
												415188,
												415197
											],
											[
												415416,
												415425
											],
											[
												415430,
												415439
											],
											[
												415497,
												415506
											],
											[
												415690,
												415699
											],
											[
												415704,
												415713
											],
											[
												415880,
												415889
											],
											[
												415951,
												415960
											],
											[
												415965,
												415974
											],
											[
												416040,
												416049
											],
											[
												416182,
												416191
											],
											[
												416196,
												416205
											],
											[
												416275,
												416284
											],
											[
												416716,
												416725
											],
											[
												416941,
												416950
											],
											[
												417149,
												417158
											],
											[
												417625,
												417634
											],
											[
												417718,
												417727
											],
											[
												418157,
												418166
											],
											[
												418380,
												418389
											],
											[
												418694,
												418703
											],
											[
												419114,
												419123
											],
											[
												419338,
												419347
											],
											[
												419491,
												419500
											],
											[
												419639,
												419648
											],
											[
												419813,
												419822
											],
											[
												419995,
												420004
											],
											[
												420207,
												420216
											],
											[
												420268,
												420277
											],
											[
												420595,
												420604
											],
											[
												420668,
												420677
											],
											[
												420989,
												420998
											],
											[
												421159,
												421168
											],
											[
												421326,
												421335
											],
											[
												421525,
												421534
											],
											[
												421763,
												421772
											],
											[
												421995,
												422004
											],
											[
												422023,
												422032
											],
											[
												422418,
												422427
											],
											[
												422443,
												422452
											],
											[
												422786,
												422795
											],
											[
												422844,
												422853
											],
											[
												422881,
												422890
											],
											[
												423023,
												423032
											],
											[
												423079,
												423088
											],
											[
												423107,
												423116
											],
											[
												423154,
												423163
											],
											[
												423218,
												423227
											],
											[
												423309,
												423318
											],
											[
												423617,
												423626
											],
											[
												423829,
												423838
											],
											[
												423935,
												423944
											],
											[
												423991,
												424000
											],
											[
												424108,
												424117
											],
											[
												424402,
												424411
											],
											[
												424681,
												424690
											],
											[
												425057,
												425066
											],
											[
												425358,
												425367
											],
											[
												425667,
												425676
											],
											[
												425707,
												425716
											],
											[
												425798,
												425807
											],
											[
												425854,
												425863
											],
											[
												426080,
												426089
											],
											[
												426170,
												426179
											],
											[
												426226,
												426235
											],
											[
												426541,
												426550
											],
											[
												426811,
												426820
											],
											[
												426867,
												426876
											],
											[
												426895,
												426904
											],
											[
												427021,
												427030
											],
											[
												427136,
												427145
											],
											[
												427416,
												427425
											],
											[
												427479,
												427488
											],
											[
												427520,
												427529
											],
											[
												427564,
												427573
											],
											[
												427874,
												427883
											],
											[
												428127,
												428136
											],
											[
												428233,
												428242
											],
											[
												428435,
												428444
											],
											[
												428901,
												428910
											],
											[
												429156,
												429165
											],
											[
												429566,
												429575
											],
											[
												429902,
												429911
											],
											[
												430271,
												430280
											],
											[
												430496,
												430505
											],
											[
												430565,
												430574
											],
											[
												430894,
												430903
											],
											[
												430963,
												430972
											],
											[
												431141,
												431150
											],
											[
												431260,
												431269
											],
											[
												431411,
												431420
											],
											[
												431475,
												431484
											],
											[
												431553,
												431562
											],
											[
												431919,
												431928
											],
											[
												432156,
												432165
											],
											[
												432166,
												432175
											],
											[
												432182,
												432191
											],
											[
												432440,
												432449
											],
											[
												432708,
												432717
											],
											[
												432985,
												432994
											],
											[
												433211,
												433220
											],
											[
												433263,
												433272
											],
											[
												433370,
												433379
											],
											[
												433499,
												433508
											],
											[
												433591,
												433600
											],
											[
												433696,
												433705
											],
											[
												433844,
												433853
											],
											[
												433897,
												433906
											],
											[
												433949,
												433958
											],
											[
												434143,
												434152
											],
											[
												434331,
												434340
											],
											[
												434535,
												434544
											],
											[
												434745,
												434754
											],
											[
												435039,
												435048
											],
											[
												435165,
												435174
											],
											[
												435527,
												435536
											],
											[
												435727,
												435736
											],
											[
												436239,
												436248
											],
											[
												436430,
												436439
											],
											[
												436915,
												436924
											],
											[
												437291,
												437300
											],
											[
												437465,
												437474
											],
											[
												437738,
												437747
											],
											[
												438263,
												438272
											],
											[
												438621,
												438630
											],
											[
												438843,
												438852
											],
											[
												438986,
												438995
											],
											[
												439424,
												439433
											],
											[
												439834,
												439843
											],
											[
												440036,
												440045
											],
											[
												440492,
												440501
											],
											[
												441133,
												441142
											],
											[
												441219,
												441228
											],
											[
												441532,
												441541
											],
											[
												441550,
												441559
											],
											[
												441785,
												441794
											],
											[
												441803,
												441812
											],
											[
												442060,
												442069
											],
											[
												442108,
												442117
											],
											[
												442195,
												442204
											],
											[
												442213,
												442222
											],
											[
												442291,
												442300
											],
											[
												442309,
												442318
											],
											[
												442397,
												442406
											],
											[
												442415,
												442424
											],
											[
												442501,
												442510
											],
											[
												442880,
												442889
											],
											[
												443137,
												443146
											],
											[
												443242,
												443251
											],
											[
												443402,
												443411
											],
											[
												443534,
												443543
											],
											[
												443672,
												443681
											],
											[
												443833,
												443842
											],
											[
												443881,
												443890
											],
											[
												444042,
												444051
											],
											[
												444136,
												444145
											],
											[
												444227,
												444236
											],
											[
												444362,
												444371
											],
											[
												444502,
												444511
											],
											[
												444874,
												444883
											],
											[
												444951,
												444960
											],
											[
												445181,
												445190
											],
											[
												445217,
												445226
											],
											[
												445237,
												445246
											],
											[
												445271,
												445280
											],
											[
												445324,
												445333
											],
											[
												445350,
												445359
											],
											[
												445637,
												445646
											],
											[
												445959,
												445968
											],
											[
												446488,
												446497
											],
											[
												447107,
												447116
											],
											[
												447308,
												447317
											],
											[
												447921,
												447930
											],
											[
												448116,
												448125
											],
											[
												448729,
												448738
											],
											[
												448925,
												448934
											],
											[
												449549,
												449558
											],
											[
												449729,
												449738
											],
											[
												450197,
												450206
											],
											[
												450332,
												450341
											],
											[
												450519,
												450528
											],
											[
												450602,
												450611
											],
											[
												450777,
												450786
											],
											[
												451031,
												451040
											],
											[
												451297,
												451306
											],
											[
												451479,
												451488
											],
											[
												451786,
												451795
											],
											[
												451872,
												451881
											],
											[
												451912,
												451921
											],
											[
												452059,
												452068
											],
											[
												452111,
												452120
											],
											[
												452301,
												452310
											],
											[
												452447,
												452456
											],
											[
												452620,
												452629
											],
											[
												452880,
												452889
											],
											[
												453137,
												453146
											],
											[
												453473,
												453482
											],
											[
												453661,
												453670
											],
											[
												454009,
												454018
											],
											[
												454102,
												454111
											],
											[
												454255,
												454264
											],
											[
												454337,
												454346
											],
											[
												454499,
												454508
											],
											[
												454901,
												454910
											],
											[
												454994,
												455003
											],
											[
												455087,
												455096
											],
											[
												455257,
												455266
											],
											[
												455357,
												455366
											],
											[
												455517,
												455526
											],
											[
												455842,
												455851
											],
											[
												456227,
												456236
											],
											[
												456261,
												456270
											],
											[
												456462,
												456471
											],
											[
												456614,
												456623
											],
											[
												456827,
												456836
											],
											[
												456940,
												456949
											],
											[
												457103,
												457112
											],
											[
												457310,
												457319
											],
											[
												457555,
												457564
											],
											[
												457666,
												457675
											],
											[
												457913,
												457922
											],
											[
												458331,
												458340
											],
											[
												458424,
												458433
											],
											[
												458510,
												458519
											],
											[
												458672,
												458681
											],
											[
												458744,
												458753
											],
											[
												458901,
												458910
											],
											[
												459273,
												459282
											],
											[
												459376,
												459385
											],
											[
												459495,
												459504
											],
											[
												459629,
												459638
											],
											[
												459827,
												459836
											],
											[
												460154,
												460163
											],
											[
												460452,
												460461
											],
											[
												460756,
												460765
											],
											[
												461349,
												461358
											],
											[
												461856,
												461865
											],
											[
												461901,
												461910
											],
											[
												462145,
												462154
											],
											[
												462345,
												462354
											],
											[
												462575,
												462584
											],
											[
												462774,
												462783
											],
											[
												463023,
												463032
											],
											[
												463230,
												463239
											],
											[
												463363,
												463372
											],
											[
												463855,
												463864
											],
											[
												464003,
												464012
											],
											[
												464493,
												464502
											],
											[
												464970,
												464979
											],
											[
												465391,
												465400
											],
											[
												465545,
												465554
											],
											[
												465556,
												465565
											],
											[
												465747,
												465756
											],
											[
												466161,
												466170
											],
											[
												466512,
												466521
											],
											[
												466866,
												466875
											],
											[
												466952,
												466961
											],
											[
												466996,
												467005
											],
											[
												467339,
												467348
											],
											[
												467811,
												467820
											],
											[
												468292,
												468301
											],
											[
												468594,
												468603
											],
											[
												468906,
												468915
											],
											[
												469288,
												469297
											],
											[
												469671,
												469680
											],
											[
												470007,
												470016
											],
											[
												470371,
												470380
											],
											[
												470707,
												470716
											],
											[
												471071,
												471080
											],
											[
												471576,
												471585
											],
											[
												471587,
												471596
											],
											[
												472022,
												472031
											],
											[
												472474,
												472483
											],
											[
												472696,
												472705
											],
											[
												472988,
												472997
											],
											[
												473420,
												473429
											],
											[
												473680,
												473689
											],
											[
												473940,
												473949
											],
											[
												474293,
												474302
											],
											[
												474845,
												474854
											],
											[
												474903,
												474912
											],
											[
												475090,
												475099
											],
											[
												475104,
												475113
											],
											[
												475120,
												475129
											],
											[
												475200,
												475209
											],
											[
												475257,
												475266
											],
											[
												475354,
												475363
											],
											[
												475651,
												475660
											],
											[
												476222,
												476231
											],
											[
												476605,
												476614
											],
											[
												476829,
												476838
											],
											[
												477091,
												477100
											],
											[
												477613,
												477622
											],
											[
												477673,
												477682
											],
											[
												477955,
												477964
											],
											[
												477991,
												478000
											],
											[
												478180,
												478189
											],
											[
												478582,
												478591
											],
											[
												478698,
												478707
											],
											[
												478723,
												478732
											],
											[
												478989,
												478998
											],
											[
												479391,
												479400
											],
											[
												479507,
												479516
											],
											[
												479685,
												479694
											],
											[
												480079,
												480088
											],
											[
												480344,
												480353
											],
											[
												480461,
												480470
											],
											[
												480802,
												480811
											],
											[
												480841,
												480850
											],
											[
												480881,
												480890
											],
											[
												481114,
												481123
											],
											[
												481318,
												481327
											],
											[
												481357,
												481366
											],
											[
												481389,
												481398
											],
											[
												481774,
												481783
											],
											[
												482184,
												482193
											],
											[
												482242,
												482251
											],
											[
												482347,
												482356
											],
											[
												482559,
												482568
											],
											[
												482709,
												482718
											],
											[
												483104,
												483113
											],
											[
												483559,
												483568
											],
											[
												483754,
												483763
											],
											[
												484139,
												484148
											],
											[
												484469,
												484478
											],
											[
												484979,
												484988
											],
											[
												485145,
												485154
											],
											[
												485159,
												485168
											],
											[
												485175,
												485184
											],
											[
												485253,
												485262
											],
											[
												485338,
												485347
											],
											[
												485418,
												485427
											],
											[
												485502,
												485511
											],
											[
												485828,
												485837
											],
											[
												486211,
												486220
											],
											[
												486520,
												486529
											],
											[
												486856,
												486865
											],
											[
												486877,
												486886
											],
											[
												486904,
												486913
											],
											[
												486948,
												486957
											],
											[
												486962,
												486971
											],
											[
												486994,
												487003
											],
											[
												487057,
												487066
											],
											[
												487201,
												487210
											],
											[
												487222,
												487231
											],
											[
												487249,
												487258
											],
											[
												487293,
												487302
											],
											[
												487307,
												487316
											],
											[
												487339,
												487348
											],
											[
												487402,
												487411
											],
											[
												487475,
												487484
											],
											[
												487707,
												487716
											],
											[
												487732,
												487741
											],
											[
												487784,
												487793
											],
											[
												487815,
												487824
											],
											[
												488036,
												488045
											],
											[
												488066,
												488075
											],
											[
												488269,
												488278
											],
											[
												488299,
												488308
											],
											[
												488508,
												488517
											],
											[
												488522,
												488531
											],
											[
												488652,
												488661
											],
											[
												488935,
												488944
											],
											[
												489098,
												489107
											],
											[
												489120,
												489129
											],
											[
												489272,
												489281
											],
											[
												489496,
												489505
											],
											[
												489564,
												489573
											],
											[
												489652,
												489661
											],
											[
												489735,
												489744
											],
											[
												489977,
												489986
											],
											[
												490170,
												490179
											],
											[
												490266,
												490275
											],
											[
												490365,
												490374
											],
											[
												490497,
												490506
											],
											[
												490655,
												490664
											],
											[
												490827,
												490836
											],
											[
												490911,
												490920
											],
											[
												490996,
												491005
											],
											[
												491055,
												491064
											],
											[
												491217,
												491226
											],
											[
												491307,
												491316
											],
											[
												491629,
												491638
											],
											[
												491838,
												491847
											],
											[
												492058,
												492067
											],
											[
												492231,
												492240
											],
											[
												492426,
												492435
											],
											[
												492506,
												492515
											],
											[
												492696,
												492705
											],
											[
												492868,
												492877
											],
											[
												493063,
												493072
											],
											[
												493226,
												493235
											],
											[
												493409,
												493418
											],
											[
												493539,
												493548
											],
											[
												493594,
												493603
											],
											[
												493654,
												493663
											],
											[
												493819,
												493828
											],
											[
												493934,
												493943
											],
											[
												494011,
												494020
											],
											[
												494107,
												494116
											],
											[
												494259,
												494268
											],
											[
												494396,
												494405
											],
											[
												494461,
												494470
											],
											[
												494537,
												494546
											],
											[
												494611,
												494620
											],
											[
												494681,
												494690
											],
											[
												494730,
												494739
											],
											[
												494902,
												494911
											],
											[
												494990,
												494999
											],
											[
												495292,
												495301
											],
											[
												495485,
												495494
											],
											[
												495617,
												495626
											],
											[
												495744,
												495753
											],
											[
												495828,
												495837
											],
											[
												496009,
												496018
											],
											[
												496140,
												496149
											],
											[
												496256,
												496265
											],
											[
												496277,
												496286
											],
											[
												496488,
												496497
											],
											[
												496698,
												496707
											],
											[
												496772,
												496781
											],
											[
												496807,
												496816
											],
											[
												497076,
												497085
											],
											[
												497183,
												497192
											],
											[
												497381,
												497390
											],
											[
												497584,
												497593
											],
											[
												497720,
												497729
											],
											[
												497844,
												497853
											],
											[
												497928,
												497937
											],
											[
												497949,
												497958
											],
											[
												498097,
												498106
											],
											[
												498122,
												498131
											],
											[
												498218,
												498227
											],
											[
												498335,
												498344
											],
											[
												498447,
												498456
											],
											[
												498518,
												498527
											],
											[
												498631,
												498640
											],
											[
												498722,
												498731
											],
											[
												498817,
												498826
											],
											[
												498882,
												498891
											],
											[
												498975,
												498984
											],
											[
												498996,
												499005
											],
											[
												499198,
												499207
											],
											[
												499250,
												499259
											],
											[
												499430,
												499439
											],
											[
												499455,
												499464
											],
											[
												499560,
												499569
											],
											[
												499783,
												499792
											],
											[
												500095,
												500104
											],
											[
												500247,
												500256
											],
											[
												500413,
												500422
											],
											[
												500526,
												500535
											],
											[
												500822,
												500831
											],
											[
												500962,
												500971
											],
											[
												501063,
												501072
											],
											[
												501084,
												501093
											],
											[
												501350,
												501359
											],
											[
												501413,
												501422
											],
											[
												501538,
												501547
											],
											[
												501593,
												501602
											],
											[
												501627,
												501636
											],
											[
												501679,
												501688
											],
											[
												501694,
												501703
											],
											[
												501734,
												501743
											],
											[
												501762,
												501771
											],
											[
												501777,
												501786
											],
											[
												501820,
												501829
											],
											[
												501852,
												501861
											],
											[
												501869,
												501878
											],
											[
												502019,
												502028
											],
											[
												502033,
												502042
											],
											[
												502054,
												502063
											],
											[
												502102,
												502111
											],
											[
												502302,
												502311
											],
											[
												502316,
												502325
											],
											[
												502337,
												502346
											],
											[
												502380,
												502389
											],
											[
												502500,
												502509
											],
											[
												502591,
												502600
											],
											[
												502609,
												502618
											],
											[
												502647,
												502656
											],
											[
												502686,
												502695
											],
											[
												502700,
												502709
											],
											[
												502721,
												502730
											],
											[
												502753,
												502762
											],
											[
												502772,
												502781
											],
											[
												502837,
												502846
											],
											[
												502863,
												502872
											],
											[
												502965,
												502974
											],
											[
												502979,
												502988
											],
											[
												503000,
												503009
											],
											[
												503029,
												503038
											],
											[
												503119,
												503128
											],
											[
												503192,
												503201
											],
											[
												503211,
												503220
											],
											[
												503249,
												503258
											],
											[
												503288,
												503297
											],
											[
												503302,
												503311
											],
											[
												503323,
												503332
											],
											[
												503356,
												503365
											],
											[
												503375,
												503384
											],
											[
												503445,
												503454
											],
											[
												503472,
												503481
											],
											[
												503553,
												503562
											],
											[
												503574,
												503583
											],
											[
												503622,
												503631
											],
											[
												503636,
												503645
											],
											[
												503657,
												503666
											],
											[
												503686,
												503695
											],
											[
												503705,
												503714
											],
											[
												503836,
												503845
											],
											[
												503856,
												503865
											],
											[
												503876,
												503885
											],
											[
												504000,
												504009
											],
											[
												504162,
												504171
											],
											[
												504299,
												504308
											],
											[
												504320,
												504329
											],
											[
												504577,
												504586
											],
											[
												504728,
												504737
											],
											[
												504750,
												504759
											],
											[
												504919,
												504928
											],
											[
												505115,
												505124
											],
											[
												505267,
												505276
											],
											[
												505372,
												505381
											],
											[
												505449,
												505458
											],
											[
												505543,
												505552
											],
											[
												505612,
												505621
											],
											[
												505725,
												505734
											],
											[
												505846,
												505855
											],
											[
												505867,
												505876
											],
											[
												506075,
												506084
											],
											[
												506151,
												506160
											],
											[
												506180,
												506189
											],
											[
												506548,
												506557
											],
											[
												506568,
												506577
											],
											[
												506648,
												506657
											],
											[
												506882,
												506891
											],
											[
												506978,
												506987
											],
											[
												507119,
												507128
											],
											[
												507263,
												507272
											],
											[
												507353,
												507362
											],
											[
												507454,
												507463
											],
											[
												507545,
												507554
											],
											[
												507592,
												507601
											],
											[
												507730,
												507739
											],
											[
												507831,
												507840
											],
											[
												507963,
												507972
											],
											[
												508100,
												508109
											],
											[
												508371,
												508380
											],
											[
												508418,
												508427
											],
											[
												508812,
												508821
											],
											[
												508859,
												508868
											],
											[
												509211,
												509220
											],
											[
												509258,
												509267
											],
											[
												509559,
												509568
											],
											[
												509602,
												509611
											],
											[
												509800,
												509809
											],
											[
												509895,
												509904
											],
											[
												510047,
												510056
											],
											[
												510163,
												510172
											],
											[
												510190,
												510199
											],
											[
												510284,
												510293
											],
											[
												510305,
												510314
											],
											[
												510424,
												510433
											],
											[
												510648,
												510657
											],
											[
												511035,
												511044
											],
											[
												511050,
												511059
											],
											[
												511112,
												511121
											],
											[
												511220,
												511229
											],
											[
												511388,
												511397
											],
											[
												511722,
												511731
											],
											[
												511877,
												511886
											],
											[
												512098,
												512107
											],
											[
												512300,
												512309
											],
											[
												512367,
												512376
											],
											[
												512463,
												512472
											],
											[
												512594,
												512603
											],
											[
												512615,
												512624
											],
											[
												512805,
												512814
											],
											[
												512861,
												512870
											],
											[
												512918,
												512927
											],
											[
												513120,
												513129
											],
											[
												513176,
												513185
											],
											[
												513230,
												513239
											],
											[
												513265,
												513274
											],
											[
												513508,
												513517
											],
											[
												513564,
												513573
											],
											[
												513613,
												513622
											],
											[
												513648,
												513657
											],
											[
												513840,
												513849
											],
											[
												514036,
												514045
											],
											[
												514092,
												514101
											],
											[
												514292,
												514301
											],
											[
												514327,
												514336
											],
											[
												514488,
												514497
											],
											[
												514822,
												514831
											],
											[
												514993,
												515002
											],
											[
												515052,
												515061
											],
											[
												515272,
												515281
											],
											[
												515307,
												515316
											],
											[
												515504,
												515513
											],
											[
												515834,
												515843
											],
											[
												515917,
												515926
											],
											[
												516193,
												516202
											],
											[
												516348,
												516357
											],
											[
												516383,
												516392
											],
											[
												516545,
												516554
											],
											[
												516583,
												516592
											],
											[
												516648,
												516657
											],
											[
												516689,
												516698
											],
											[
												516799,
												516808
											],
											[
												516837,
												516846
											],
											[
												516928,
												516937
											],
											[
												517047,
												517056
											],
											[
												517088,
												517097
											],
											[
												517187,
												517196
											],
											[
												517300,
												517309
											],
											[
												517514,
												517523
											],
											[
												517707,
												517716
											],
											[
												517815,
												517824
											],
											[
												517877,
												517886
											],
											[
												518044,
												518053
											],
											[
												518240,
												518249
											],
											[
												518354,
												518363
											],
											[
												518416,
												518425
											],
											[
												518682,
												518691
											],
											[
												518736,
												518745
											],
											[
												518804,
												518813
											],
											[
												518916,
												518925
											],
											[
												518981,
												518990
											],
											[
												519021,
												519030
											],
											[
												519107,
												519116
											],
											[
												519155,
												519164
											],
											[
												519393,
												519402
											],
											[
												519556,
												519565
											],
											[
												519812,
												519821
											],
											[
												519860,
												519869
											],
											[
												520000,
												520009
											],
											[
												520056,
												520065
											],
											[
												520090,
												520099
											],
											[
												520108,
												520117
											],
											[
												520155,
												520164
											],
											[
												520203,
												520212
											],
											[
												520224,
												520233
											],
											[
												520238,
												520247
											],
											[
												520252,
												520261
											],
											[
												520293,
												520302
											],
											[
												520309,
												520318
											],
											[
												520352,
												520361
											],
											[
												520372,
												520381
											],
											[
												520591,
												520600
											],
											[
												520639,
												520648
											],
											[
												520741,
												520750
											],
											[
												520945,
												520954
											],
											[
												520993,
												521002
											],
											[
												521254,
												521263
											],
											[
												521302,
												521311
											],
											[
												521557,
												521566
											],
											[
												521605,
												521614
											],
											[
												521879,
												521888
											],
											[
												521927,
												521936
											],
											[
												522159,
												522168
											],
											[
												522207,
												522216
											],
											[
												522533,
												522542
											],
											[
												522581,
												522590
											],
											[
												522671,
												522680
											],
											[
												522913,
												522922
											],
											[
												522961,
												522970
											],
											[
												523240,
												523249
											],
											[
												523484,
												523493
											],
											[
												523532,
												523541
											],
											[
												523875,
												523884
											],
											[
												523923,
												523932
											],
											[
												524161,
												524170
											],
											[
												524209,
												524218
											],
											[
												524484,
												524493
											],
											[
												524554,
												524563
											],
											[
												524831,
												524840
											],
											[
												524879,
												524888
											],
											[
												525207,
												525216
											],
											[
												525277,
												525286
											],
											[
												525576,
												525585
											],
											[
												525624,
												525633
											],
											[
												525896,
												525905
											],
											[
												525961,
												525970
											],
											[
												526208,
												526217
											],
											[
												526353,
												526362
											],
											[
												526476,
												526485
											],
											[
												526536,
												526545
											],
											[
												526616,
												526625
											],
											[
												526674,
												526683
											],
											[
												526755,
												526764
											],
											[
												526795,
												526804
											],
											[
												526835,
												526844
											],
											[
												526936,
												526945
											],
											[
												526968,
												526977
											],
											[
												527033,
												527042
											],
											[
												527119,
												527128
											],
											[
												527188,
												527197
											],
											[
												527399,
												527408
											],
											[
												527454,
												527463
											],
											[
												527498,
												527507
											],
											[
												527550,
												527559
											],
											[
												527650,
												527659
											],
											[
												527864,
												527873
											],
											[
												527919,
												527928
											],
											[
												527963,
												527972
											],
											[
												528015,
												528024
											],
											[
												528222,
												528231
											],
											[
												528423,
												528432
											],
											[
												528602,
												528611
											],
											[
												528684,
												528693
											],
											[
												528695,
												528704
											],
											[
												528750,
												528759
											],
											[
												528767,
												528776
											],
											[
												528818,
												528827
											],
											[
												528832,
												528841
											],
											[
												528844,
												528853
											],
											[
												528889,
												528898
											],
											[
												528922,
												528931
											],
											[
												528941,
												528950
											],
											[
												528992,
												529001
											],
											[
												529049,
												529058
											],
											[
												529070,
												529079
											],
											[
												529107,
												529116
											],
											[
												529151,
												529160
											],
											[
												529218,
												529227
											],
											[
												529233,
												529242
											],
											[
												529252,
												529261
											],
											[
												529332,
												529341
											],
											[
												529389,
												529398
											],
											[
												529442,
												529451
											],
											[
												529481,
												529490
											],
											[
												529662,
												529671
											],
											[
												529694,
												529703
											],
											[
												529839,
												529848
											],
											[
												530050,
												530059
											],
											[
												530069,
												530078
											],
											[
												530162,
												530171
											],
											[
												530214,
												530223
											],
											[
												530253,
												530262
											],
											[
												530409,
												530418
											],
											[
												530441,
												530450
											],
											[
												530592,
												530601
											],
											[
												530698,
												530707
											],
											[
												530720,
												530729
											],
											[
												530816,
												530825
											],
											[
												530871,
												530880
											],
											[
												530913,
												530922
											],
											[
												531246,
												531255
											],
											[
												531260,
												531269
											],
											[
												531466,
												531475
											],
											[
												531482,
												531491
											],
											[
												531693,
												531702
											],
											[
												531712,
												531721
											],
											[
												531733,
												531742
											],
											[
												531778,
												531787
											],
											[
												531796,
												531805
											],
											[
												531817,
												531826
											],
											[
												531861,
												531870
											],
											[
												531989,
												531998
											],
											[
												532008,
												532017
											],
											[
												532029,
												532038
											],
											[
												532079,
												532088
											],
											[
												532097,
												532106
											],
											[
												532118,
												532127
											],
											[
												532162,
												532171
											],
											[
												532566,
												532575
											],
											[
												532962,
												532971
											],
											[
												533148,
												533157
											],
											[
												533570,
												533579
											],
											[
												533590,
												533599
											],
											[
												533633,
												533642
											],
											[
												533843,
												533852
											],
											[
												533863,
												533872
											],
											[
												533909,
												533918
											],
											[
												534120,
												534129
											],
											[
												534140,
												534149
											],
											[
												534185,
												534194
											],
											[
												534388,
												534397
											],
											[
												534408,
												534417
											],
											[
												534449,
												534458
											],
											[
												534652,
												534661
											],
											[
												534672,
												534681
											],
											[
												534713,
												534722
											],
											[
												534911,
												534920
											],
											[
												534931,
												534940
											],
											[
												534972,
												534981
											],
											[
												535180,
												535189
											],
											[
												535200,
												535209
											],
											[
												535244,
												535253
											],
											[
												535452,
												535461
											],
											[
												535472,
												535481
											],
											[
												535514,
												535523
											],
											[
												535725,
												535734
											],
											[
												535745,
												535754
											],
											[
												535792,
												535801
											],
											[
												536005,
												536014
											],
											[
												536025,
												536034
											],
											[
												536070,
												536079
											],
											[
												536357,
												536366
											],
											[
												536629,
												536638
											],
											[
												536667,
												536676
											],
											[
												536719,
												536728
											],
											[
												536739,
												536748
											],
											[
												536973,
												536982
											],
											[
												537298,
												537307
											],
											[
												537476,
												537485
											],
											[
												537543,
												537552
											],
											[
												537598,
												537607
											],
											[
												537624,
												537633
											],
											[
												537843,
												537852
											],
											[
												538176,
												538185
											],
											[
												538458,
												538467
											],
											[
												539024,
												539033
											],
											[
												539328,
												539337
											],
											[
												539546,
												539555
											],
											[
												539717,
												539726
											],
											[
												539786,
												539795
											],
											[
												539902,
												539911
											],
											[
												539950,
												539959
											],
											[
												540184,
												540193
											],
											[
												540242,
												540251
											],
											[
												540364,
												540373
											],
											[
												540412,
												540421
											],
											[
												540593,
												540602
											],
											[
												540642,
												540651
											],
											[
												541093,
												541102
											],
											[
												541296,
												541305
											],
											[
												541500,
												541509
											],
											[
												541549,
												541558
											],
											[
												541762,
												541771
											],
											[
												541805,
												541814
											],
											[
												541987,
												541996
											],
											[
												542036,
												542045
											],
											[
												542290,
												542299
											],
											[
												542339,
												542348
											],
											[
												542523,
												542532
											],
											[
												542572,
												542581
											],
											[
												542757,
												542766
											],
											[
												542885,
												542894
											],
											[
												542928,
												542937
											],
											[
												543262,
												543271
											],
											[
												543710,
												543719
											],
											[
												543911,
												543920
											],
											[
												543982,
												543991
											],
											[
												544413,
												544422
											],
											[
												544869,
												544878
											],
											[
												545018,
												545027
											],
											[
												545074,
												545083
											],
											[
												545275,
												545284
											],
											[
												545331,
												545340
											],
											[
												545529,
												545538
											],
											[
												545585,
												545594
											],
											[
												545768,
												545777
											],
											[
												545835,
												545844
											],
											[
												546145,
												546154
											],
											[
												546212,
												546221
											],
											[
												546403,
												546412
											],
											[
												546470,
												546479
											],
											[
												546743,
												546752
											],
											[
												546799,
												546808
											],
											[
												547343,
												547352
											],
											[
												547689,
												547698
											],
											[
												547780,
												547789
											],
											[
												547891,
												547900
											],
											[
												548296,
												548305
											],
											[
												548617,
												548626
											],
											[
												549064,
												549073
											],
											[
												549345,
												549354
											],
											[
												549721,
												549730
											],
											[
												550064,
												550073
											],
											[
												550400,
												550409
											],
											[
												550800,
												550809
											],
											[
												550913,
												550922
											],
											[
												551116,
												551125
											],
											[
												551168,
												551177
											],
											[
												551605,
												551614
											],
											[
												551737,
												551746
											],
											[
												551852,
												551861
											],
											[
												551883,
												551892
											],
											[
												551928,
												551937
											],
											[
												552259,
												552268
											],
											[
												552290,
												552299
											],
											[
												552389,
												552398
											],
											[
												552521,
												552530
											],
											[
												552710,
												552719
											],
											[
												552733,
												552742
											],
											[
												553013,
												553022
											],
											[
												553264,
												553273
											],
											[
												553287,
												553296
											],
											[
												553570,
												553579
											],
											[
												553593,
												553602
											],
											[
												553943,
												553952
											],
											[
												554055,
												554064
											],
											[
												554274,
												554283
											],
											[
												554297,
												554306
											],
											[
												554549,
												554558
											],
											[
												554828,
												554837
											],
											[
												555088,
												555097
											],
											[
												555445,
												555454
											],
											[
												555468,
												555477
											],
											[
												555694,
												555703
											],
											[
												555805,
												555814
											],
											[
												556059,
												556068
											],
											[
												556283,
												556292
											],
											[
												556306,
												556315
											],
											[
												556527,
												556536
											],
											[
												556561,
												556570
											],
											[
												556802,
												556811
											],
											[
												556839,
												556848
											],
											[
												557117,
												557126
											],
											[
												557140,
												557149
											],
											[
												557401,
												557410
											],
											[
												557424,
												557433
											],
											[
												557711,
												557720
											],
											[
												557734,
												557743
											],
											[
												557950,
												557959
											],
											[
												557973,
												557982
											],
											[
												558214,
												558223
											],
											[
												558237,
												558246
											],
											[
												558465,
												558474
											],
											[
												558488,
												558497
											],
											[
												558710,
												558719
											],
											[
												558733,
												558742
											],
											[
												558952,
												558961
											],
											[
												558975,
												558984
											],
											[
												559195,
												559204
											],
											[
												559218,
												559227
											],
											[
												559438,
												559447
											],
											[
												559461,
												559470
											],
											[
												559705,
												559714
											],
											[
												559728,
												559737
											],
											[
												559971,
												559980
											],
											[
												559994,
												560003
											],
											[
												560244,
												560253
											],
											[
												560267,
												560276
											],
											[
												560324,
												560333
											],
											[
												560346,
												560355
											],
											[
												560381,
												560390
											],
											[
												560555,
												560564
											],
											[
												560586,
												560595
											],
											[
												560638,
												560647
											],
											[
												560831,
												560840
											],
											[
												560862,
												560871
											],
											[
												560907,
												560916
											],
											[
												561112,
												561121
											],
											[
												561143,
												561152
											],
											[
												561208,
												561217
											],
											[
												561396,
												561405
											],
											[
												561427,
												561436
											],
											[
												561499,
												561508
											],
											[
												561698,
												561707
											],
											[
												561729,
												561738
											],
											[
												561812,
												561821
											],
											[
												561987,
												561996
											],
											[
												562018,
												562027
											],
											[
												562092,
												562101
											],
											[
												562265,
												562274
											],
											[
												562296,
												562305
											],
											[
												562375,
												562384
											],
											[
												562580,
												562589
											],
											[
												562594,
												562603
											],
											[
												562610,
												562619
											],
											[
												562703,
												562712
											],
											[
												562806,
												562815
											],
											[
												562837,
												562846
											],
											[
												562971,
												562980
											],
											[
												563130,
												563139
											],
											[
												563342,
												563351
											],
											[
												563373,
												563382
											],
											[
												563501,
												563510
											],
											[
												563654,
												563663
											],
											[
												563895,
												563904
											],
											[
												563926,
												563935
											],
											[
												563971,
												563980
											],
											[
												564203,
												564212
											],
											[
												564234,
												564243
											],
											[
												564279,
												564288
											],
											[
												564465,
												564474
											],
											[
												564496,
												564505
											],
											[
												564624,
												564633
											],
											[
												564759,
												564768
											],
											[
												564982,
												564991
											],
											[
												565005,
												565014
											],
											[
												565243,
												565252
											],
											[
												565464,
												565473
											],
											[
												565487,
												565496
											],
											[
												565762,
												565771
											],
											[
												566028,
												566037
											],
											[
												566042,
												566051
											],
											[
												566058,
												566067
											],
											[
												566156,
												566165
											],
											[
												566249,
												566258
											],
											[
												566431,
												566440
											],
											[
												566445,
												566454
											],
											[
												566461,
												566470
											],
											[
												566556,
												566565
											],
											[
												566646,
												566655
											],
											[
												566828,
												566837
											],
											[
												566842,
												566851
											],
											[
												566858,
												566867
											],
											[
												566952,
												566961
											],
											[
												567115,
												567124
											],
											[
												567287,
												567296
											],
											[
												567438,
												567447
											],
											[
												567592,
												567601
											],
											[
												567732,
												567741
											],
											[
												567837,
												567846
											],
											[
												567945,
												567954
											],
											[
												568057,
												568066
											],
											[
												568216,
												568225
											],
											[
												568378,
												568387
											],
											[
												568613,
												568622
											],
											[
												568775,
												568784
											],
											[
												568946,
												568955
											],
											[
												569115,
												569124
											],
											[
												569349,
												569358
											],
											[
												569360,
												569369
											],
											[
												569376,
												569385
											],
											[
												569450,
												569459
											],
											[
												569514,
												569523
											],
											[
												569656,
												569665
											],
											[
												569667,
												569676
											],
											[
												569683,
												569692
											],
											[
												569748,
												569757
											],
											[
												569889,
												569898
											],
											[
												569921,
												569930
											],
											[
												570086,
												570095
											],
											[
												570119,
												570128
											],
											[
												570288,
												570297
											],
											[
												570509,
												570518
											],
											[
												570753,
												570762
											],
											[
												570776,
												570785
											],
											[
												570992,
												571001
											],
											[
												571015,
												571024
											],
											[
												571231,
												571240
											],
											[
												571254,
												571263
											],
											[
												571470,
												571479
											],
											[
												571493,
												571502
											],
											[
												571909,
												571918
											],
											[
												572032,
												572041
											],
											[
												572115,
												572124
											],
											[
												572129,
												572138
											],
											[
												572145,
												572154
											],
											[
												572208,
												572217
											],
											[
												572232,
												572241
											],
											[
												572417,
												572426
											],
											[
												572431,
												572440
											],
											[
												572447,
												572456
											],
											[
												572626,
												572635
											],
											[
												572766,
												572775
											],
											[
												572780,
												572789
											],
											[
												572796,
												572805
											],
											[
												572975,
												572984
											],
											[
												573110,
												573119
											],
											[
												573124,
												573133
											],
											[
												573140,
												573149
											],
											[
												573256,
												573265
											],
											[
												573280,
												573289
											],
											[
												573521,
												573530
											],
											[
												573535,
												573544
											],
											[
												573551,
												573560
											],
											[
												573688,
												573697
											],
											[
												573712,
												573721
											],
											[
												573923,
												573932
											],
											[
												573937,
												573946
											],
											[
												573953,
												573962
											],
											[
												574061,
												574070
											],
											[
												574077,
												574086
											],
											[
												574147,
												574156
											],
											[
												574225,
												574234
											],
											[
												574391,
												574400
											],
											[
												574405,
												574414
											],
											[
												574421,
												574430
											],
											[
												574484,
												574493
											],
											[
												574500,
												574509
											],
											[
												574606,
												574615
											],
											[
												574708,
												574717
											],
											[
												574792,
												574801
											],
											[
												574882,
												574891
											],
											[
												574989,
												574998
											],
											[
												575314,
												575323
											],
											[
												575512,
												575521
											],
											[
												575696,
												575705
											],
											[
												575824,
												575833
											],
											[
												575838,
												575847
											],
											[
												575854,
												575863
											],
											[
												575979,
												575988
											],
											[
												576113,
												576122
											],
											[
												576127,
												576136
											],
											[
												576143,
												576152
											],
											[
												576409,
												576418
											],
											[
												576535,
												576544
											],
											[
												576563,
												576572
											],
											[
												576616,
												576625
											],
											[
												576733,
												576742
											],
											[
												576767,
												576776
											],
											[
												576790,
												576799
											],
											[
												576870,
												576879
											],
											[
												576907,
												576916
											],
											[
												576965,
												576974
											],
											[
												577011,
												577020
											],
											[
												577280,
												577289
											],
											[
												577324,
												577333
											],
											[
												577338,
												577347
											],
											[
												577355,
												577364
											],
											[
												577464,
												577473
											],
											[
												577478,
												577487
											],
											[
												577495,
												577504
											],
											[
												577604,
												577613
											],
											[
												577618,
												577627
											],
											[
												577635,
												577644
											],
											[
												577755,
												577764
											],
											[
												577794,
												577803
											],
											[
												577837,
												577846
											],
											[
												577861,
												577870
											],
											[
												577899,
												577908
											],
											[
												577923,
												577932
											],
											[
												577961,
												577970
											],
											[
												577989,
												577998
											],
											[
												578072,
												578081
											],
											[
												578116,
												578125
											],
											[
												578130,
												578139
											],
											[
												578147,
												578156
											],
											[
												578228,
												578237
											],
											[
												578242,
												578251
											],
											[
												578259,
												578268
											],
											[
												578340,
												578349
											],
											[
												578354,
												578363
											],
											[
												578371,
												578380
											],
											[
												578463,
												578472
											],
											[
												578496,
												578505
											],
											[
												578539,
												578548
											],
											[
												578563,
												578572
											],
											[
												578601,
												578610
											],
											[
												578625,
												578634
											],
											[
												578663,
												578672
											],
											[
												578691,
												578700
											],
											[
												578963,
												578972
											],
											[
												579160,
												579169
											],
											[
												579386,
												579395
											],
											[
												579905,
												579914
											],
											[
												580176,
												580185
											],
											[
												580290,
												580299
											],
											[
												580385,
												580394
											],
											[
												580413,
												580422
											],
											[
												580471,
												580480
											],
											[
												580978,
												580987
											],
											[
												581064,
												581073
											],
											[
												581462,
												581471
											],
											[
												581890,
												581899
											],
											[
												582213,
												582222
											],
											[
												582263,
												582272
											],
											[
												582351,
												582360
											],
											[
												582671,
												582680
											],
											[
												582697,
												582706
											],
											[
												582814,
												582823
											],
											[
												583126,
												583135
											],
											[
												583144,
												583153
											],
											[
												583243,
												583252
											],
											[
												583261,
												583270
											],
											[
												583360,
												583369
											],
											[
												583378,
												583387
											],
											[
												583470,
												583479
											],
											[
												583488,
												583497
											],
											[
												583605,
												583614
											],
											[
												583623,
												583632
											],
											[
												583746,
												583755
											],
											[
												583764,
												583773
											],
											[
												583873,
												583882
											],
											[
												583891,
												583900
											],
											[
												584115,
												584124
											],
											[
												584205,
												584214
											],
											[
												584464,
												584473
											],
											[
												584482,
												584491
											],
											[
												584834,
												584843
											],
											[
												584852,
												584861
											],
											[
												585177,
												585186
											],
											[
												585195,
												585204
											],
											[
												585371,
												585380
											],
											[
												585583,
												585592
											],
											[
												585661,
												585670
											],
											[
												585871,
												585880
											],
											[
												585896,
												585905
											],
											[
												586100,
												586109
											],
											[
												586140,
												586149
											],
											[
												586310,
												586319
											],
											[
												586388,
												586397
											],
											[
												586521,
												586530
											],
											[
												586889,
												586898
											],
											[
												587326,
												587335
											],
											[
												587344,
												587353
											],
											[
												587737,
												587746
											],
											[
												587755,
												587764
											],
											[
												587975,
												587984
											],
											[
												588420,
												588429
											],
											[
												588506,
												588515
											],
											[
												588798,
												588807
											],
											[
												588848,
												588857
											],
											[
												588966,
												588975
											],
											[
												589210,
												589219
											],
											[
												589228,
												589237
											],
											[
												589348,
												589357
											],
											[
												589758,
												589767
											],
											[
												589986,
												589995
											],
											[
												590394,
												590403
											],
											[
												590412,
												590421
											],
											[
												590769,
												590778
											],
											[
												590787,
												590796
											],
											[
												591186,
												591195
											],
											[
												591204,
												591213
											],
											[
												591540,
												591549
											],
											[
												591558,
												591567
											],
											[
												591897,
												591906
											],
											[
												591915,
												591924
											],
											[
												592206,
												592215
											],
											[
												592224,
												592233
											],
											[
												592746,
												592755
											],
											[
												593128,
												593137
											],
											[
												593146,
												593155
											],
											[
												593399,
												593408
											],
											[
												593667,
												593676
											],
											[
												593685,
												593694
											],
											[
												594122,
												594131
											],
											[
												594140,
												594149
											],
											[
												594451,
												594460
											],
											[
												594469,
												594478
											],
											[
												594939,
												594948
											],
											[
												595265,
												595274
											],
											[
												595543,
												595552
											],
											[
												595561,
												595570
											],
											[
												596030,
												596039
											],
											[
												596116,
												596125
											],
											[
												596454,
												596463
											],
											[
												596477,
												596486
											],
											[
												596749,
												596758
											],
											[
												596767,
												596776
											],
											[
												596866,
												596875
											],
											[
												597281,
												597290
											],
											[
												597339,
												597348
											],
											[
												597691,
												597700
											],
											[
												598082,
												598091
											],
											[
												598519,
												598528
											],
											[
												599142,
												599151
											],
											[
												599385,
												599394
											],
											[
												599450,
												599459
											],
											[
												599508,
												599517
											],
											[
												599616,
												599625
											],
											[
												599933,
												599942
											],
											[
												600033,
												600042
											],
											[
												600201,
												600210
											],
											[
												600308,
												600317
											],
											[
												600478,
												600487
											],
											[
												600572,
												600581
											],
											[
												600678,
												600687
											],
											[
												600720,
												600729
											],
											[
												600826,
												600835
											],
											[
												601112,
												601121
											],
											[
												601144,
												601153
											],
											[
												601211,
												601220
											],
											[
												601251,
												601260
											],
											[
												601418,
												601427
											],
											[
												601557,
												601566
											],
											[
												601578,
												601587
											],
											[
												601779,
												601788
											],
											[
												601811,
												601820
											],
											[
												601866,
												601875
											],
											[
												601962,
												601971
											],
											[
												602266,
												602275
											],
											[
												602351,
												602360
											],
											[
												602589,
												602598
											],
											[
												602678,
												602687
											],
											[
												603064,
												603073
											],
											[
												603149,
												603158
											],
											[
												603185,
												603194
											],
											[
												603313,
												603322
											],
											[
												603624,
												603633
											],
											[
												603832,
												603841
											],
											[
												604078,
												604087
											],
											[
												604167,
												604176
											],
											[
												604504,
												604513
											],
											[
												604712,
												604721
											],
											[
												604748,
												604757
											],
											[
												604911,
												604920
											],
											[
												605176,
												605185
											],
											[
												605296,
												605305
											],
											[
												605346,
												605355
											],
											[
												605627,
												605636
											],
											[
												605741,
												605750
											],
											[
												605865,
												605874
											],
											[
												606101,
												606110
											],
											[
												606158,
												606167
											],
											[
												606461,
												606470
											],
											[
												606550,
												606559
											],
											[
												606947,
												606956
											],
											[
												607004,
												607013
											],
											[
												607040,
												607049
											],
											[
												607338,
												607347
											],
											[
												607427,
												607436
											],
											[
												607749,
												607758
											],
											[
												608045,
												608054
											],
											[
												608422,
												608431
											],
											[
												608458,
												608467
											],
											[
												608751,
												608760
											],
											[
												608857,
												608866
											],
											[
												609155,
												609164
											],
											[
												609244,
												609253
											],
											[
												609533,
												609542
											],
											[
												609640,
												609649
											],
											[
												609672,
												609681
											],
											[
												609825,
												609834
											],
											[
												609865,
												609874
											],
											[
												610081,
												610090
											],
											[
												610095,
												610104
											],
											[
												610169,
												610178
											],
											[
												610204,
												610213
											],
											[
												610218,
												610227
											],
											[
												610275,
												610284
											],
											[
												610312,
												610321
											],
											[
												610468,
												610477
											],
											[
												610586,
												610595
											],
											[
												610618,
												610627
											],
											[
												610699,
												610708
											],
											[
												610751,
												610760
											],
											[
												610862,
												610871
											],
											[
												610921,
												610930
											],
											[
												611096,
												611105
											],
											[
												611269,
												611278
											],
											[
												611391,
												611400
											],
											[
												611429,
												611438
											],
											[
												611617,
												611626
											],
											[
												611663,
												611672
											],
											[
												611837,
												611846
											],
											[
												611900,
												611909
											],
											[
												612219,
												612228
											],
											[
												612487,
												612496
											],
											[
												612878,
												612887
											],
											[
												613123,
												613132
											],
											[
												613253,
												613262
											],
											[
												613433,
												613442
											],
											[
												613623,
												613632
											],
											[
												613866,
												613875
											],
											[
												614054,
												614063
											],
											[
												614311,
												614320
											],
											[
												614442,
												614451
											],
											[
												614695,
												614704
											],
											[
												614742,
												614751
											],
											[
												614780,
												614789
											],
											[
												614847,
												614856
											],
											[
												615340,
												615349
											],
											[
												615523,
												615532
											],
											[
												615705,
												615714
											],
											[
												615967,
												615976
											],
											[
												616513,
												616522
											],
											[
												616811,
												616820
											],
											[
												617316,
												617325
											],
											[
												617792,
												617801
											],
											[
												617857,
												617866
											],
											[
												617957,
												617966
											],
											[
												618068,
												618077
											],
											[
												618228,
												618237
											],
											[
												618478,
												618487
											],
											[
												618523,
												618532
											],
											[
												618708,
												618717
											],
											[
												618973,
												618982
											],
											[
												619449,
												619458
											],
											[
												619460,
												619469
											],
											[
												619847,
												619856
											],
											[
												619858,
												619867
											],
											[
												620338,
												620347
											],
											[
												620457,
												620466
											],
											[
												620471,
												620480
											],
											[
												620494,
												620503
											],
											[
												620599,
												620608
											],
											[
												621152,
												621161
											],
											[
												621210,
												621219
											],
											[
												621374,
												621383
											],
											[
												621555,
												621564
											],
											[
												621584,
												621593
											],
											[
												621734,
												621743
											],
											[
												621839,
												621848
											],
											[
												621953,
												621962
											],
											[
												621981,
												621990
											],
											[
												622167,
												622176
											],
											[
												622250,
												622259
											],
											[
												622536,
												622545
											],
											[
												622622,
												622631
											],
											[
												622908,
												622917
											],
											[
												622990,
												622999
											],
											[
												623254,
												623263
											],
											[
												623333,
												623342
											],
											[
												623660,
												623669
											],
											[
												623810,
												623819
											],
											[
												623824,
												623833
											],
											[
												623840,
												623849
											],
											[
												623924,
												623933
											],
											[
												623974,
												623983
											],
											[
												624019,
												624028
											],
											[
												624068,
												624077
											],
											[
												624110,
												624119
											],
											[
												624312,
												624321
											],
											[
												624540,
												624549
											],
											[
												624774,
												624783
											],
											[
												625000,
												625009
											],
											[
												625187,
												625196
											],
											[
												625225,
												625234
											],
											[
												625475,
												625484
											],
											[
												625540,
												625549
											],
											[
												625956,
												625965
											],
											[
												626453,
												626462
											],
											[
												627051,
												627060
											],
											[
												627611,
												627620
											],
											[
												628093,
												628102
											],
											[
												628151,
												628160
											],
											[
												628423,
												628432
											],
											[
												628437,
												628446
											],
											[
												628453,
												628462
											],
											[
												628548,
												628557
											],
											[
												628616,
												628625
											],
											[
												628853,
												628862
											],
											[
												629333,
												629342
											],
											[
												629463,
												629472
											],
											[
												630001,
												630010
											],
											[
												630465,
												630474
											],
											[
												630731,
												630740
											],
											[
												630863,
												630872
											],
											[
												630888,
												630897
											],
											[
												630946,
												630955
											],
											[
												630972,
												630981
											],
											[
												631029,
												631038
											],
											[
												631093,
												631102
											],
											[
												631479,
												631488
											],
											[
												631891,
												631900
											],
											[
												632205,
												632214
											],
											[
												632230,
												632239
											],
											[
												632296,
												632305
											],
											[
												632322,
												632331
											],
											[
												632379,
												632388
											],
											[
												632443,
												632452
											],
											[
												632836,
												632845
											],
											[
												633131,
												633140
											],
											[
												633189,
												633198
											],
											[
												633319,
												633328
											],
											[
												633459,
												633468
											],
											[
												633652,
												633661
											],
											[
												633666,
												633675
											],
											[
												633754,
												633763
											],
											[
												633909,
												633918
											],
											[
												633923,
												633932
											],
											[
												634028,
												634037
											],
											[
												634187,
												634196
											],
											[
												634201,
												634210
											],
											[
												634322,
												634331
											],
											[
												634487,
												634496
											],
											[
												634501,
												634510
											],
											[
												634586,
												634595
											],
											[
												634741,
												634750
											],
											[
												634755,
												634764
											],
											[
												634841,
												634850
											],
											[
												635010,
												635019
											],
											[
												635041,
												635050
											],
											[
												635118,
												635127
											],
											[
												635132,
												635141
											],
											[
												635278,
												635287
											],
											[
												635493,
												635502
											],
											[
												635524,
												635533
											],
											[
												635604,
												635613
											],
											[
												635641,
												635650
											],
											[
												635692,
												635701
											],
											[
												635706,
												635715
											],
											[
												635854,
												635863
											],
											[
												636070,
												636079
											],
											[
												636084,
												636093
											],
											[
												636238,
												636247
											],
											[
												636470,
												636479
											],
											[
												636484,
												636493
											],
											[
												636642,
												636651
											],
											[
												636873,
												636882
											],
											[
												636887,
												636896
											],
											[
												637034,
												637043
											],
											[
												637250,
												637259
											],
											[
												637264,
												637273
											],
											[
												637406,
												637415
											],
											[
												637509,
												637518
											],
											[
												637769,
												637778
											],
											[
												637783,
												637792
											],
											[
												637889,
												637898
											],
											[
												638094,
												638103
											],
											[
												638108,
												638117
											],
											[
												638224,
												638233
											],
											[
												638393,
												638402
											],
											[
												638407,
												638416
											],
											[
												638519,
												638528
											],
											[
												638705,
												638714
											],
											[
												638736,
												638745
											],
											[
												638813,
												638822
											],
											[
												638827,
												638836
											],
											[
												639040,
												639049
											],
											[
												639272,
												639281
											],
											[
												639303,
												639312
											],
											[
												639383,
												639392
											],
											[
												639420,
												639429
											],
											[
												639471,
												639480
											],
											[
												639485,
												639494
											],
											[
												639700,
												639709
											],
											[
												639922,
												639931
											],
											[
												639936,
												639945
											],
											[
												640043,
												640052
											],
											[
												640235,
												640244
											],
											[
												640249,
												640258
											],
											[
												640405,
												640414
											],
											[
												640568,
												640577
											],
											[
												640582,
												640591
											],
											[
												640698,
												640707
											],
											[
												640780,
												640789
											],
											[
												640934,
												640943
											],
											[
												640948,
												640957
											],
											[
												641061,
												641070
											],
											[
												641143,
												641152
											],
											[
												641305,
												641314
											],
											[
												641319,
												641328
											],
											[
												641477,
												641486
											],
											[
												641645,
												641654
											],
											[
												641659,
												641668
											],
											[
												641800,
												641809
											],
											[
												641882,
												641891
											],
											[
												642053,
												642062
											],
											[
												642067,
												642076
											],
											[
												642210,
												642219
											],
											[
												642321,
												642330
											],
											[
												642588,
												642597
											],
											[
												642602,
												642611
											],
											[
												642778,
												642787
											],
											[
												642889,
												642898
											],
											[
												643162,
												643171
											],
											[
												643193,
												643202
											],
											[
												643270,
												643279
											],
											[
												643284,
												643293
											],
											[
												643458,
												643467
											],
											[
												643673,
												643682
											],
											[
												643704,
												643713
											],
											[
												643784,
												643793
											],
											[
												643821,
												643830
											],
											[
												643872,
												643881
											],
											[
												644174,
												644183
											],
											[
												644450,
												644459
											],
											[
												644481,
												644490
											],
											[
												644561,
												644570
											],
											[
												644598,
												644607
											],
											[
												644988,
												644997
											],
											[
												645002,
												645011
											],
											[
												645098,
												645107
											],
											[
												645324,
												645333
											],
											[
												645338,
												645347
											],
											[
												645434,
												645443
											],
											[
												645664,
												645673
											],
											[
												645678,
												645687
											],
											[
												645774,
												645783
											],
											[
												646220,
												646229
											],
											[
												646578,
												646587
											],
											[
												646748,
												646757
											],
											[
												647254,
												647263
											],
											[
												647554,
												647563
											],
											[
												648100,
												648109
											],
											[
												648165,
												648174
											],
											[
												648290,
												648299
											],
											[
												648412,
												648421
											],
											[
												648486,
												648495
											],
											[
												648691,
												648700
											],
											[
												648806,
												648815
											],
											[
												648841,
												648850
											],
											[
												649085,
												649094
											],
											[
												649195,
												649204
											],
											[
												649295,
												649304
											],
											[
												649332,
												649341
											],
											[
												649772,
												649781
											],
											[
												649830,
												649839
											],
											[
												649960,
												649969
											],
											[
												650067,
												650076
											],
											[
												650303,
												650312
											],
											[
												650620,
												650629
											],
											[
												650912,
												650921
											],
											[
												651184,
												651193
											],
											[
												651381,
												651390
											],
											[
												651526,
												651535
											],
											[
												651549,
												651558
											],
											[
												651848,
												651857
											],
											[
												652129,
												652138
											],
											[
												652159,
												652168
											],
											[
												652420,
												652429
											],
											[
												652450,
												652459
											],
											[
												652739,
												652748
											],
											[
												653041,
												653050
											],
											[
												653329,
												653338
											],
											[
												653633,
												653642
											],
											[
												653945,
												653954
											],
											[
												654224,
												654233
											],
											[
												654262,
												654271
											],
											[
												654587,
												654596
											],
											[
												654625,
												654634
											],
											[
												655006,
												655015
											],
											[
												655497,
												655506
											],
											[
												655641,
												655650
											],
											[
												656074,
												656083
											],
											[
												656235,
												656244
											],
											[
												656739,
												656748
											],
											[
												656797,
												656806
											],
											[
												656912,
												656921
											],
											[
												656926,
												656935
											],
											[
												656942,
												656951
											],
											[
												657076,
												657085
											],
											[
												657504,
												657513
											],
											[
												657590,
												657599
											],
											[
												657907,
												657916
											],
											[
												657957,
												657966
											],
											[
												658039,
												658048
											],
											[
												658247,
												658256
											],
											[
												658265,
												658274
											],
											[
												658367,
												658376
											],
											[
												658802,
												658811
											],
											[
												658888,
												658897
											],
											[
												659146,
												659155
											],
											[
												659196,
												659205
											],
											[
												659278,
												659287
											],
											[
												659563,
												659572
											],
											[
												659821,
												659830
											],
											[
												659839,
												659848
											],
											[
												660122,
												660131
											],
											[
												660140,
												660149
											],
											[
												660497,
												660506
											],
											[
												661032,
												661041
											],
											[
												661401,
												661410
											],
											[
												661419,
												661428
											],
											[
												661802,
												661811
											],
											[
												662014,
												662023
											],
											[
												662383,
												662392
											],
											[
												662749,
												662758
											],
											[
												663119,
												663128
											],
											[
												663359,
												663368
											],
											[
												663861,
												663870
											],
											[
												663991,
												664000
											],
											[
												664441,
												664450
											],
											[
												664627,
												664636
											],
											[
												664652,
												664661
											],
											[
												664672,
												664681
											],
											[
												664910,
												664919
											],
											[
												665070,
												665079
											],
											[
												665500,
												665509
											],
											[
												665648,
												665657
											],
											[
												665710,
												665719
											],
											[
												666045,
												666054
											],
											[
												666642,
												666651
											],
											[
												666786,
												666795
											],
											[
												667272,
												667281
											],
											[
												667377,
												667386
											],
											[
												667599,
												667608
											],
											[
												668147,
												668156
											],
											[
												668414,
												668423
											],
											[
												668948,
												668957
											],
											[
												669194,
												669203
											],
											[
												669699,
												669708
											],
											[
												669888,
												669897
											],
											[
												670031,
												670040
											],
											[
												670550,
												670559
											],
											[
												670746,
												670755
											],
											[
												670981,
												670990
											],
											[
												671025,
												671034
											],
											[
												671085,
												671094
											],
											[
												671124,
												671133
											],
											[
												671193,
												671202
											],
											[
												671318,
												671327
											],
											[
												671453,
												671462
											],
											[
												671466,
												671475
											],
											[
												671552,
												671561
											],
											[
												671671,
												671680
											],
											[
												672045,
												672054
											],
											[
												672473,
												672482
											],
											[
												672568,
												672577
											],
											[
												672599,
												672608
											],
											[
												672870,
												672879
											],
											[
												673062,
												673071
											],
											[
												673098,
												673107
											],
											[
												673108,
												673117
											],
											[
												673146,
												673155
											],
											[
												673207,
												673216
											],
											[
												673250,
												673259
											],
											[
												673294,
												673303
											],
											[
												673337,
												673346
											],
											[
												673363,
												673372
											],
											[
												673404,
												673413
											],
											[
												673601,
												673610
											],
											[
												673630,
												673639
											],
											[
												673694,
												673703
											],
											[
												673764,
												673773
											],
											[
												673876,
												673885
											],
											[
												674021,
												674030
											],
											[
												674093,
												674102
											],
											[
												674104,
												674113
											],
											[
												674131,
												674140
											],
											[
												674206,
												674215
											],
											[
												674242,
												674251
											],
											[
												674252,
												674261
											],
											[
												674262,
												674271
											],
											[
												674290,
												674299
											],
											[
												674305,
												674314
											],
											[
												674357,
												674366
											],
											[
												674371,
												674380
											],
											[
												674403,
												674412
											],
											[
												674574,
												674583
											],
											[
												674701,
												674710
											],
											[
												674745,
												674754
											],
											[
												674783,
												674792
											],
											[
												674823,
												674832
											],
											[
												674883,
												674892
											],
											[
												674992,
												675001
											],
											[
												675086,
												675095
											],
											[
												675210,
												675219
											],
											[
												675267,
												675276
											],
											[
												675357,
												675366
											],
											[
												675403,
												675412
											],
											[
												675569,
												675578
											],
											[
												675688,
												675697
											],
											[
												675822,
												675831
											],
											[
												675952,
												675961
											],
											[
												676155,
												676164
											],
											[
												676293,
												676302
											],
											[
												676309,
												676318
											],
											[
												676507,
												676516
											],
											[
												676634,
												676643
											],
											[
												676837,
												676846
											],
											[
												676935,
												676944
											],
											[
												677054,
												677063
											],
											[
												677133,
												677142
											],
											[
												677247,
												677256
											],
											[
												677348,
												677357
											],
											[
												677473,
												677482
											],
											[
												677534,
												677543
											],
											[
												677587,
												677596
											],
											[
												677615,
												677624
											],
											[
												677698,
												677707
											],
											[
												677787,
												677796
											],
											[
												678043,
												678052
											],
											[
												678232,
												678241
											],
											[
												678250,
												678259
											],
											[
												678386,
												678395
											],
											[
												678396,
												678405
											],
											[
												678418,
												678427
											],
											[
												678740,
												678749
											],
											[
												679162,
												679171
											],
											[
												679342,
												679351
											],
											[
												679662,
												679671
											],
											[
												679972,
												679981
											],
											[
												680103,
												680112
											],
											[
												680257,
												680266
											],
											[
												680776,
												680785
											],
											[
												681168,
												681177
											],
											[
												681222,
												681231
											],
											[
												681636,
												681645
											],
											[
												681965,
												681974
											],
											[
												682362,
												682371
											],
											[
												682446,
												682455
											],
											[
												682967,
												682976
											],
											[
												683080,
												683089
											],
											[
												683155,
												683164
											],
											[
												683601,
												683610
											],
											[
												683644,
												683653
											],
											[
												683971,
												683980
											],
											[
												684102,
												684111
											],
											[
												684444,
												684453
											],
											[
												684799,
												684808
											],
											[
												685070,
												685079
											],
											[
												685159,
												685168
											],
											[
												685284,
												685293
											],
											[
												685431,
												685440
											],
											[
												685520,
												685529
											],
											[
												685645,
												685654
											],
											[
												685849,
												685858
											],
											[
												685942,
												685951
											],
											[
												686075,
												686084
											],
											[
												686339,
												686348
											],
											[
												686666,
												686675
											],
											[
												687074,
												687083
											],
											[
												687580,
												687589
											],
											[
												687894,
												687903
											],
											[
												688053,
												688062
											],
											[
												688591,
												688600
											],
											[
												689001,
												689010
											],
											[
												689446,
												689455
											],
											[
												689772,
												689781
											],
											[
												690176,
												690185
											],
											[
												690226,
												690235
											],
											[
												690489,
												690498
											],
											[
												690725,
												690734
											],
											[
												690975,
												690984
											],
											[
												691027,
												691036
											],
											[
												691085,
												691094
											],
											[
												691173,
												691182
											],
											[
												691341,
												691350
											],
											[
												691373,
												691382
											],
											[
												691855,
												691864
											],
											[
												692299,
												692308
											],
											[
												692430,
												692439
											],
											[
												692505,
												692514
											],
											[
												692671,
												692680
											],
											[
												692985,
												692994
											],
											[
												693198,
												693207
											],
											[
												693357,
												693366
											],
											[
												693480,
												693489
											],
											[
												693681,
												693690
											],
											[
												693888,
												693897
											],
											[
												693936,
												693945
											],
											[
												694170,
												694179
											],
											[
												694286,
												694295
											],
											[
												694336,
												694345
											],
											[
												694519,
												694528
											],
											[
												694621,
												694630
											],
											[
												694923,
												694932
											],
											[
												695044,
												695053
											],
											[
												695216,
												695225
											],
											[
												695342,
												695351
											],
											[
												695443,
												695452
											],
											[
												695692,
												695701
											],
											[
												695968,
												695977
											],
											[
												696209,
												696218
											],
											[
												696319,
												696328
											],
											[
												696510,
												696519
											],
											[
												696543,
												696552
											],
											[
												696833,
												696842
											],
											[
												696877,
												696886
											],
											[
												696971,
												696980
											],
											[
												697086,
												697095
											],
											[
												697402,
												697411
											],
											[
												697673,
												697682
											],
											[
												697717,
												697726
											],
											[
												697855,
												697864
											],
											[
												697987,
												697996
											],
											[
												698459,
												698468
											],
											[
												698757,
												698766
											],
											[
												698884,
												698893
											],
											[
												699199,
												699208
											],
											[
												699232,
												699241
											],
											[
												699439,
												699448
											],
											[
												699701,
												699710
											],
											[
												699889,
												699898
											],
											[
												700041,
												700050
											],
											[
												700228,
												700237
											],
											[
												700456,
												700465
											],
											[
												700731,
												700740
											],
											[
												700780,
												700789
											],
											[
												700861,
												700870
											],
											[
												701110,
												701119
											],
											[
												701294,
												701303
											],
											[
												701683,
												701692
											],
											[
												701921,
												701930
											],
											[
												702108,
												702117
											],
											[
												702426,
												702435
											],
											[
												702655,
												702664
											],
											[
												702823,
												702832
											],
											[
												702987,
												702996
											],
											[
												703187,
												703196
											],
											[
												703236,
												703245
											],
											[
												703403,
												703412
											],
											[
												703448,
												703457
											],
											[
												703611,
												703620
											],
											[
												703751,
												703760
											],
											[
												703901,
												703910
											],
											[
												704067,
												704076
											],
											[
												704173,
												704182
											],
											[
												704419,
												704428
											],
											[
												704543,
												704552
											],
											[
												704787,
												704796
											],
											[
												705186,
												705195
											],
											[
												705529,
												705538
											],
											[
												705684,
												705693
											],
											[
												706053,
												706062
											],
											[
												706250,
												706259
											],
											[
												706315,
												706324
											],
											[
												706477,
												706486
											],
											[
												706620,
												706629
											],
											[
												706798,
												706807
											],
											[
												707024,
												707033
											],
											[
												707220,
												707229
											],
											[
												707259,
												707268
											],
											[
												707696,
												707705
											],
											[
												707906,
												707915
											],
											[
												708163,
												708172
											],
											[
												708374,
												708383
											],
											[
												708700,
												708709
											],
											[
												708855,
												708864
											],
											[
												708965,
												708974
											],
											[
												709064,
												709073
											],
											[
												709096,
												709105
											],
											[
												709216,
												709225
											],
											[
												709303,
												709312
											],
											[
												709426,
												709435
											],
											[
												709570,
												709579
											],
											[
												709747,
												709756
											],
											[
												710024,
												710033
											],
											[
												710451,
												710460
											],
											[
												710944,
												710953
											],
											[
												711023,
												711032
											],
											[
												711333,
												711342
											],
											[
												711580,
												711589
											],
											[
												712044,
												712053
											],
											[
												712387,
												712396
											],
											[
												712955,
												712964
											],
											[
												713402,
												713411
											],
											[
												713784,
												713793
											],
											[
												713976,
												713985
											],
											[
												714481,
												714490
											],
											[
												714745,
												714754
											],
											[
												714794,
												714803
											],
											[
												714995,
												715004
											],
											[
												715398,
												715407
											],
											[
												715659,
												715668
											],
											[
												715695,
												715704
											],
											[
												715963,
												715972
											],
											[
												716200,
												716209
											],
											[
												716369,
												716378
											],
											[
												716626,
												716635
											],
											[
												716688,
												716697
											],
											[
												717027,
												717036
											],
											[
												717095,
												717104
											],
											[
												717159,
												717168
											],
											[
												717538,
												717547
											],
											[
												717598,
												717607
											],
											[
												718015,
												718024
											],
											[
												718412,
												718421
											],
											[
												718646,
												718655
											],
											[
												719032,
												719041
											],
											[
												719162,
												719171
											],
											[
												719565,
												719574
											],
											[
												719722,
												719731
											],
											[
												719762,
												719771
											],
											[
												720026,
												720035
											],
											[
												720274,
												720283
											],
											[
												720483,
												720492
											],
											[
												720811,
												720820
											],
											[
												721270,
												721279
											],
											[
												721331,
												721340
											],
											[
												721387,
												721396
											],
											[
												721827,
												721836
											],
											[
												721929,
												721938
											],
											[
												722079,
												722088
											],
											[
												722301,
												722310
											],
											[
												722462,
												722471
											],
											[
												722692,
												722701
											],
											[
												722893,
												722902
											],
											[
												723118,
												723127
											],
											[
												723132,
												723141
											],
											[
												723148,
												723157
											],
											[
												723335,
												723344
											],
											[
												723402,
												723411
											],
											[
												723519,
												723528
											],
											[
												723533,
												723542
											],
											[
												723549,
												723558
											],
											[
												723758,
												723767
											],
											[
												724021,
												724030
											],
											[
												724142,
												724151
											],
											[
												724444,
												724453
											],
											[
												724640,
												724649
											],
											[
												724824,
												724833
											],
											[
												724836,
												724845
											],
											[
												724880,
												724889
											],
											[
												724892,
												724901
											],
											[
												724904,
												724913
											],
											[
												724933,
												724942
											],
											[
												724947,
												724956
											],
											[
												725181,
												725190
											],
											[
												725364,
												725373
											],
											[
												725582,
												725591
											],
											[
												725710,
												725719
											],
											[
												725728,
												725737
											],
											[
												725967,
												725976
											],
											[
												726379,
												726388
											],
											[
												726536,
												726545
											],
											[
												726612,
												726621
											],
											[
												726724,
												726733
											],
											[
												726742,
												726751
											],
											[
												726999,
												727008
											],
											[
												727445,
												727454
											],
											[
												727549,
												727558
											],
											[
												727782,
												727791
											],
											[
												728206,
												728215
											],
											[
												728389,
												728398
											],
											[
												728611,
												728620
											],
											[
												728975,
												728984
											],
											[
												729281,
												729290
											],
											[
												729643,
												729652
											],
											[
												729897,
												729906
											],
											[
												730010,
												730019
											],
											[
												730222,
												730231
											],
											[
												730541,
												730550
											],
											[
												730559,
												730568
											],
											[
												730753,
												730762
											],
											[
												730985,
												730994
											],
											[
												731149,
												731158
											],
											[
												731313,
												731322
											],
											[
												731477,
												731486
											],
											[
												731699,
												731708
											],
											[
												731919,
												731928
											],
											[
												731985,
												731994
											],
											[
												732479,
												732488
											],
											[
												732874,
												732883
											],
											[
												733104,
												733113
											],
											[
												733453,
												733462
											],
											[
												733548,
												733557
											],
											[
												733926,
												733935
											],
											[
												734393,
												734402
											],
											[
												734712,
												734721
											],
											[
												734976,
												734985
											],
											[
												735408,
												735417
											],
											[
												735877,
												735886
											],
											[
												736097,
												736106
											],
											[
												736322,
												736331
											],
											[
												736364,
												736373
											],
											[
												736768,
												736777
											],
											[
												737161,
												737170
											],
											[
												737634,
												737643
											],
											[
												738089,
												738098
											],
											[
												738230,
												738239
											],
											[
												738634,
												738643
											],
											[
												738964,
												738973
											],
											[
												739241,
												739250
											],
											[
												739441,
												739450
											],
											[
												739765,
												739774
											],
											[
												740192,
												740201
											],
											[
												740625,
												740634
											],
											[
												740793,
												740802
											],
											[
												741031,
												741040
											],
											[
												741365,
												741374
											],
											[
												741688,
												741697
											],
											[
												741986,
												741995
											],
											[
												742013,
												742022
											],
											[
												742163,
												742172
											],
											[
												742177,
												742186
											],
											[
												742193,
												742202
											],
											[
												742330,
												742339
											],
											[
												742419,
												742428
											],
											[
												742598,
												742607
											],
											[
												742703,
												742712
											],
											[
												742717,
												742726
											],
											[
												742733,
												742742
											],
											[
												742965,
												742974
											],
											[
												743179,
												743188
											],
											[
												743213,
												743222
											],
											[
												743409,
												743418
											],
											[
												743443,
												743452
											],
											[
												743609,
												743618
											],
											[
												743643,
												743652
											],
											[
												743799,
												743808
											],
											[
												743813,
												743822
											],
											[
												743832,
												743841
											],
											[
												743967,
												743976
											],
											[
												744123,
												744132
											],
											[
												744327,
												744336
											],
											[
												744444,
												744453
											],
											[
												744458,
												744467
											],
											[
												744477,
												744486
											],
											[
												744613,
												744622
											],
											[
												744717,
												744726
											],
											[
												744779,
												744788
											],
											[
												745149,
												745158
											],
											[
												745225,
												745234
											],
											[
												745400,
												745409
											],
											[
												745435,
												745444
											],
											[
												745505,
												745514
											],
											[
												745539,
												745548
											],
											[
												745699,
												745708
											],
											[
												745935,
												745944
											],
											[
												746257,
												746266
											],
											[
												746375,
												746384
											],
											[
												746551,
												746560
											],
											[
												747044,
												747053
											],
											[
												747420,
												747429
											],
											[
												747739,
												747748
											],
											[
												748166,
												748175
											],
											[
												748365,
												748374
											],
											[
												748645,
												748654
											],
											[
												749097,
												749106
											],
											[
												749416,
												749425
											],
											[
												749865,
												749874
											],
											[
												750374,
												750383
											],
											[
												750731,
												750740
											],
											[
												750886,
												750895
											],
											[
												751128,
												751137
											],
											[
												751575,
												751584
											],
											[
												751654,
												751663
											],
											[
												751821,
												751830
											],
											[
												751899,
												751908
											],
											[
												752124,
												752133
											],
											[
												752425,
												752434
											],
											[
												752800,
												752809
											],
											[
												752917,
												752926
											],
											[
												752984,
												752993
											],
											[
												753209,
												753218
											],
											[
												753271,
												753280
											],
											[
												753282,
												753291
											],
											[
												753373,
												753382
											],
											[
												753408,
												753417
											],
											[
												753418,
												753427
											],
											[
												753428,
												753437
											],
											[
												753455,
												753464
											],
											[
												753470,
												753479
											],
											[
												753520,
												753529
											],
											[
												753534,
												753543
											],
											[
												753565,
												753574
											],
											[
												753782,
												753791
											],
											[
												754011,
												754020
											],
											[
												754107,
												754116
											],
											[
												754237,
												754246
											],
											[
												754323,
												754332
											],
											[
												754448,
												754457
											],
											[
												754547,
												754556
											],
											[
												754669,
												754678
											],
											[
												754729,
												754738
											],
											[
												754794,
												754803
											],
											[
												754821,
												754830
											],
											[
												754903,
												754912
											],
											[
												754990,
												754999
											],
											[
												755251,
												755260
											],
											[
												755537,
												755546
											],
											[
												755847,
												755856
											],
											[
												755930,
												755939
											],
											[
												756004,
												756013
											],
											[
												756120,
												756129
											],
											[
												756319,
												756328
											],
											[
												756367,
												756376
											],
											[
												756378,
												756387
											],
											[
												756397,
												756406
											],
											[
												756442,
												756451
											],
											[
												756503,
												756512
											],
											[
												756572,
												756581
											],
											[
												756715,
												756724
											],
											[
												756763,
												756772
											],
											[
												756774,
												756783
											],
											[
												756793,
												756802
											],
											[
												756816,
												756825
											],
											[
												756861,
												756870
											],
											[
												756922,
												756931
											],
											[
												756992,
												757001
											],
											[
												757246,
												757255
											],
											[
												757290,
												757299
											],
											[
												757319,
												757328
											],
											[
												757358,
												757367
											],
											[
												757417,
												757426
											],
											[
												757523,
												757532
											],
											[
												757632,
												757641
											],
											[
												757754,
												757763
											],
											[
												757810,
												757819
											],
											[
												757904,
												757913
											],
											[
												757949,
												757958
											],
											[
												758209,
												758218
											],
											[
												758355,
												758364
											],
											[
												758382,
												758391
											],
											[
												758790,
												758799
											],
											[
												758974,
												758983
											],
											[
												759095,
												759104
											],
											[
												759284,
												759293
											],
											[
												759729,
												759738
											],
											[
												760105,
												760114
											],
											[
												760162,
												760171
											],
											[
												760259,
												760268
											],
											[
												760617,
												760626
											],
											[
												760807,
												760816
											],
											[
												760843,
												760852
											],
											[
												760853,
												760862
											],
											[
												760892,
												760901
											],
											[
												760956,
												760965
											],
											[
												761002,
												761011
											],
											[
												761046,
												761055
											],
											[
												761092,
												761101
											],
											[
												761121,
												761130
											],
											[
												761163,
												761172
											],
											[
												761428,
												761437
											],
											[
												761559,
												761568
											],
											[
												761706,
												761715
											],
											[
												761851,
												761860
											],
											[
												762096,
												762105
											],
											[
												762114,
												762123
											],
											[
												762284,
												762293
											],
											[
												762294,
												762303
											],
											[
												762316,
												762325
											],
											[
												762553,
												762562
											],
											[
												762793,
												762802
											],
											[
												763096,
												763111
											],
											[
												763307,
												763322
											],
											[
												763646,
												763661
											],
											[
												763947,
												763962
											],
											[
												763970,
												763985
											]
										],
										"scope": ""
									}
								},
								"selection":
								[
									[
										762908,
										762908
									]
								],
								"settings":
								{
									"detect_indentation": false,
									"is_init_dirty_state": false,
									"line_numbers": false,
									"output_tag": 2,
									"result_base_dir": "",
									"result_file_regex": "^([^ 	].*):$",
									"result_line_regex": "^ +([0-9]+):",
									"scroll_past_end": true,
									"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 361296.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/D/lujian/Documents/java-workspace/thirdparties/spring-framework/src/test/java/com/foo/ComponentBeanDefinitionParserTests.java",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 2437,
								"regions":
								{
								},
								"selection":
								[
									[
										1630,
										1630
									]
								],
								"settings":
								{
									"is_init_dirty_state": true,
									"origin_encoding": "ASCII",
									"syntax": "Packages/Java/Java.sublime-syntax",
									"translate_tabs_to_spaces": false
								},
								"translation.x": 0.0,
								"translation.y": 918.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "/D/lujian/Documents/java-workspace/thirdparties/spring-boot/spring-boot-samples/spring-boot-sample-web-jsp/src/main/webapp/WEB-INF/jsp/welcome.jsp",
							"semi_transient": true,
							"settings":
							{
								"buffer_size": 409,
								"regions":
								{
								},
								"selection":
								[
									[
										399,
										399
									]
								],
								"settings":
								{
									"is_init_dirty_state": false,
									"origin_encoding": "ASCII",
									"syntax": "Packages/Java/Java Server Pages (JSP).sublime-syntax"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 26.0
			},
			"input":
			{
				"height": 35.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					]
				],
				"cols":
				[
					0.0,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.exec":
			{
				"height": 124.0
			},
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "Packages/User/CPP.sublime-build",
			"position": "0,2,3,-63,-1,-1,-1,663,125,125,781",
			"project": "",
			"replace":
			{
				"height": 48.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
					[
						"aistate",
						"ClientSolution\\Lockstep\\Code\\StateMachine\\AIStateMachine.cs"
					],
					[
						"entry",
						"ClientSolution\\Lockstep\\Code\\BehaviorTree\\Decorator\\Entry.cs"
					],
					[
						"behaviortree",
						"ClientSolution\\Lockstep\\Code\\BehaviorTree\\BehaviorTree.cs"
					],
					[
						"betree",
						"ClientSolution\\Lockstep\\Code\\BehaviorTree\\BehaviorTree.cs"
					],
					[
						"blackbo",
						"ClientSolution\\Lockstep\\Code\\BehaviorTree\\Blackboard.cs"
					],
					[
						"beblack",
						"Assets\\Editor\\BehaviorTreeEditor\\BehaviorTreeEditorBlackboardArea.cs"
					],
					[
						"",
						"Assets\\Editor\\BehaviorTreeEditor\\BehaviorTreeEditorFieldArea.cs"
					],
					[
						"blackboard",
						"Assets\\Editor\\BehaviorTreeEditor\\BehaviorTreeEditorBlackboardArea.cs"
					],
					[
						"numguess",
						"tomcat\\webapps\\examples\\jsp\\num\\numguess.jsp"
					],
					[
						"modulelibrary",
						"gradle\\subprojects\\ide\\src\\main\\groovy\\org\\gradle\\plugins\\ide\\idea\\model\\ModuleLibrary.java"
					],
					[
						"colli",
						"Scripts\\XPhysics\\BoundsCollider.cs"
					],
					[
						"grayscalee",
						"ThirdParts\\Standard Assets\\Effects\\ImageEffects\\Shaders\\GrayscaleEffect.shader"
					],
					[
						"gray",
						"ThirdParts\\Standard Assets\\Effects\\ImageEffects\\Scripts\\Grayscale.cs"
					],
					[
						"greyscale",
						"ThirdParts\\Standard Assets\\Effects\\ImageEffects\\Scripts\\Grayscale.cs"
					],
					[
						"imageeffectbase",
						"ThirdParts\\Standard Assets\\Effects\\ImageEffects\\Scripts\\ImageEffectBase.cs"
					],
					[
						"graysc",
						"ThirdParts\\Standard Assets\\Effects\\ImageEffects\\Scripts\\Grayscale.cs"
					],
					[
						"runesp",
						"Scripts\\Lockstep\\RuneSpawner.cs"
					],
					[
						"runecon",
						"Scripts\\Controller\\RuneController.cs"
					]
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": true,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 459.0,
			"status_bar_visible": true,
			"template_settings":
			{
			},
			"window_id": 44,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
